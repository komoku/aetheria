<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<World author="Carlos Gómez Rodríguez (Al-Khwarizmi)" date="2009-12-30" moduleName="Wizard's Quest: Morluck's Lair" parserVersion="" type="Rolero" version="0.2.1b" worldDir="." worldName="Wizard's Quest">
<IdeMetaInf>
<View xoffset="-58.902321590172164" yoffset="-92.90232159017205" zoom="1.6471820345351496"/>
<Node class="org.f2o.absurdum.puck.gui.graph.RoomNode" name="Limbo" x="240" y="40"/>
<Node class="org.f2o.absurdum.puck.gui.graph.RoomNode" name="Entrada" x="240" y="100"/>
<Node class="org.f2o.absurdum.puck.gui.graph.RoomNode" name="Encrucijada" x="240" y="280"/>
<Node class="org.f2o.absurdum.puck.gui.graph.RoomNode" name="Pasillo" x="240" y="340"/>
<Node class="org.f2o.absurdum.puck.gui.graph.RoomNode" name="Sala de antimagia" x="320" y="280"/>
<Node class="org.f2o.absurdum.puck.gui.graph.RoomNode" name="Sala de elementos" x="340" y="340"/>
<Node class="org.f2o.absurdum.puck.gui.graph.RoomNode" name="Sala del orco" x="-60" y="280"/>
<Node class="org.f2o.absurdum.puck.gui.graph.RoomNode" name="Sala de combate" x="-60" y="220"/>
<Node class="org.f2o.absurdum.puck.gui.graph.RoomNode" name="Antesala" x="240" y="420"/>
<Node class="org.f2o.absurdum.puck.gui.graph.RoomNode" name="Sala del goblin" x="240" y="160"/>
<Node class="org.f2o.absurdum.puck.gui.graph.RoomNode" name="Sala del lago" x="140" y="280"/>
<Node class="org.f2o.absurdum.puck.gui.graph.RoomNode" name="Orilla oeste del lago" x="40" y="280"/>
<Node class="org.f2o.absurdum.puck.gui.graph.RoomNode" name="Sala del trono" x="240" y="520"/>
<Node class="org.f2o.absurdum.puck.gui.graph.CharacterNode" name="Zuno(copy)" x="80" y="20"/>
<Node class="org.f2o.absurdum.puck.gui.graph.CharacterNode" name="Bestia menor(copy)" x="520" y="40"/>
<Node class="org.f2o.absurdum.puck.gui.graph.CharacterNode" name="Guardia goblin" x="300" y="180"/>
<Node class="org.f2o.absurdum.puck.gui.graph.CharacterNode" name="Soldado goblin(copy)" x="60" y="160"/>
<Node class="org.f2o.absurdum.puck.gui.graph.CharacterNode" name="Capitán orco" x="160" y="420"/>
<Node class="org.f2o.absurdum.puck.gui.graph.CharacterNode" name="Guardia orco" x="-80" y="340"/>
<Node class="org.f2o.absurdum.puck.gui.graph.CharacterNode" name="Demonio alado" x="160" y="-60"/>
<Node class="org.f2o.absurdum.puck.gui.graph.CharacterNode" name="Héroe" x="340" y="100"/>
<Node class="org.f2o.absurdum.puck.gui.graph.CharacterNode" name="Tamar" x="420" y="-80"/>
<Node class="org.f2o.absurdum.puck.gui.graph.CharacterNode" name="Morluck" x="240" y="600"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Garra derecha(copy)" x="540" y="20"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Garra izquierda(copy)" x="540" y="40"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Mano derecha" x="320" y="240"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Mano derecha del héroe" x="380" y="20"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Mano izquierda del héroe" x="420" y="40"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Bastón de combate" x="420" y="0"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Gran puerta de piedra" x="160" y="200"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Cilindro de piedra incogible" x="240" y="-20"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Cilindro de piedra" x="280" y="0"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Orbe de luz(copy)" x="20" y="20"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Arco" x="320" y="320"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Agujero circular" x="160" y="240"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Espada corta" x="60" y="-20"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Arcón" x="340" y="380"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Libro de magia elemental" x="340" y="420"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Libro de magia de combate" x="-120" y="180"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Escudo circular de madera(copy)" x="640" y="40"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Mano derecha de guardia orco" x="-80" y="380"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Mano izquierda de guardia orco" x="-220" y="340"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Escudo circular metálico" x="-220" y="400"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Poción de salud" x="-160" y="240"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Botella vacía" x="180" y="60"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Mano izquierda de capitán orco" x="160" y="460"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Escudo cuadrado metálico" x="160" y="500"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Mano derecha de capitán orco" x="100" y="400"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Cimitarra" x="-20" y="420"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Garra derecha de demonio" x="260" y="-100"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Garra izquierda de demonio" x="300" y="-40"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="cuerda" x="320" y="600"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Ramo de flores" x="320" y="40"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Libro de magia antimagia" x="420" y="280"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Lago" x="100" y="340"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Lámpara de araña" x="320" y="560"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Garrote tosco" x="380" y="220"/>
<Node class="org.f2o.absurdum.puck.gui.graph.ItemNode" name="Hacha de guerra" x="60" y="440"/>
<Node class="org.f2o.absurdum.puck.gui.graph.AbstractEntityNode" name="invocar flores" x="400" y="160"/>
<Node class="org.f2o.absurdum.puck.gui.graph.AbstractEntityNode" name="desencantar" x="480" y="320"/>
<Node class="org.f2o.absurdum.puck.gui.graph.AbstractEntityNode" name="cierre mágico" x="420" y="360"/>
<Node class="org.f2o.absurdum.puck.gui.graph.AbstractEntityNode" name="detectar magia" x="520" y="280"/>
<Node class="org.f2o.absurdum.puck.gui.graph.AbstractEntityNode" name="Zorgloj" x="200" y="20"/>
<Node class="org.f2o.absurdum.puck.gui.graph.AbstractEntityNode" name="invocar bestia menor(copy)" x="640" y="140"/>
<Node class="org.f2o.absurdum.puck.gui.graph.AbstractEntityNode" name="iluminar" x="-40" y="20"/>
<Node class="org.f2o.absurdum.puck.gui.graph.AbstractEntityNode" name="daño de hielo" x="480" y="460"/>
<Node class="org.f2o.absurdum.puck.gui.graph.AbstractEntityNode" name="aturdir" x="-100" y="100"/>
<Node class="org.f2o.absurdum.puck.gui.graph.AbstractEntityNode" name="daño de fuego(copy)" x="20" y="80"/>
<Node class="org.f2o.absurdum.puck.gui.graph.AbstractEntityNode" name="encantar arma" x="-160" y="100"/>
<Node class="org.f2o.absurdum.puck.gui.graph.AbstractEntityNode" name="Regeneración Magia" x="460" y="140"/>
<Node class="org.f2o.absurdum.puck.gui.graph.AbstractEntityNode" name="invocar demonio" x="100" y="600"/>
<Node class="org.f2o.absurdum.puck.gui.graph.AbstractEntityNode" name="contrahechizo" x="480" y="200"/>
<Node class="org.f2o.absurdum.puck.gui.graph.AbstractEntityNode" name="Notas" x="440" y="600"/>
<Node class="org.f2o.absurdum.puck.gui.graph.AbstractEntityNode" name="daño de fuego" x="480" y="420"/>
<Node class="org.f2o.absurdum.puck.gui.graph.SpellNode" name="Cierre mágico" x="480" y="360"/>
<Node class="org.f2o.absurdum.puck.gui.graph.SpellNode" name="Invocar bestia(copy)" x="640" y="100"/>
<Node class="org.f2o.absurdum.puck.gui.graph.SpellNode" name="Desencantar" x="420" y="320"/>
<Node class="org.f2o.absurdum.puck.gui.graph.SpellNode" name="Iluminar" x="-100" y="20"/>
<Node class="org.f2o.absurdum.puck.gui.graph.SpellNode" name="Hielo" x="420" y="460"/>
<Node class="org.f2o.absurdum.puck.gui.graph.SpellNode" name="Encantar arma" x="-160" y="140"/>
<Node class="org.f2o.absurdum.puck.gui.graph.SpellNode" name="Gran bola de fuego(copy)" x="60" y="120"/>
<Node class="org.f2o.absurdum.puck.gui.graph.SpellNode" name="Invocar flores" x="400" y="100"/>
<Node class="org.f2o.absurdum.puck.gui.graph.SpellNode" name="Invocar demonio" x="160" y="600"/>
<Node class="org.f2o.absurdum.puck.gui.graph.SpellNode" name="Aturdir" x="-100" y="140"/>
<Node class="org.f2o.absurdum.puck.gui.graph.SpellNode" name="Detectar magia" x="480" y="280"/>
<Node class="org.f2o.absurdum.puck.gui.graph.SpellNode" name="Contrahechizo" x="480" y="240"/>
<Node class="org.f2o.absurdum.puck.gui.graph.SpellNode" name="Fuego" x="420" y="420"/>
</IdeMetaInf>
<Code language="BeanShell"><![CDATA[/*Introducción del juego para un jugador*/

void intro( Player aPlayer , boolean fromState )

{

	aPlayer.clearScreen();
	
	world.getLanguage().addVerbEntry("hechizos","hechizos");
	world.getLanguage().addVerbEntry("conjuros","conjuros");

	if ( aPlayer.getIO() instanceof MultimediaInputOutputClient )
    {
        MultimediaInputOutputClient mioc = (MultimediaInputOutputClient) aPlayer.getIO();
        if ( mioc.isGraphicsEnabled() )
        {
            mioc.insertCenteredIcon(world.getResource("logomorluck.png"));   
            aPlayer.write("\n");
        }
    }
    
    aPlayer.write("\nWizard's Quest: Morluck's Lair - © 2009 Carlos Gómez Rodríguez (Al-Khwarizmi) - versión de 2009-12-25\n\n");

	if ( !fromState )
	{

	    aPlayer.write("Tras un largo día de viaje, has llegado a tu destino: la guarida del malvado Morluck. Al ver la oscura e imponente entrada de la cueva, " +
	
	    "en cuyo interior acechan peligros inimaginables, lamentas una vez más no haber prestado atención en tus clases de magia. Con un buen conjuro de bola de " +
	
	    "fuego podrías reducir a cenizas a todos los sicarios orcos de Morluck. Pena que sólo aprendieras ese estúpido conjuro para crear flores, creyendo que " +
	
	    "con eso impresionarías a las chicas...\n");
	
	    
	
	    aPlayer.waitKeyPress();
	
	    
	
	    aPlayer.write("Pero ahora no hay vuelta atrás. La bella Tamar, la mujer de tus sueños, ha sido secuestrada por Morluck, y quién mejor para rescatarla " +
	
	    "que tú, el bocazas que le contó a todo el pueblo que era capaz de desintegrar a un gigante chasqueando los dedos. Si quieres conservar algo de honor " +
	
	    "y volver a mirar a la gente a la cara alguna vez, no te queda otra opción que entrar en los dominios del malvado brujo, y salir con la chica... aunque " +
	
	    "parece más probable que no salgas nunca.\n");
	
		
	
	    aPlayer.waitKeyPress();
	
	
	
		aPlayer.write("Maldiciendo una vez más tu propia mendacidad y holgazanería, y con las piernas temblando por el miedo, entras en la oscura cueva. " +
	
	    "Es el momento de convertirte en un héroe... o en un cadáver.\n");
	
		
	
	    aPlayer.waitKeyPress();
	    
	    
	    aPlayer.writeDescription("Entras en la guarida de Morluck. Te hallas en la entrada, una caverna natural. Hacia el norte puedes ver la luz que proviene de la " +
	    "salida al exterior, por donde has venido. Hacia el sur, un estrecho y sombrío túnel.\n\n");
    
    
    }
    else
    {
    	aPlayer.writeInformation("Estado restaurado.\n\n");
    }

    aPlayer.writeImportant( "(Nota: En esta aventura, puedes teclear \"hechizos\" o \"conjuros \" en cualquier momento para ver los conjuros que puedes lanzar, "+
    "y \"conjurar (conjuro)\" o \"conjurar (conjuro) sobre (objetivo)\" para utilizarlos. También puedes teclear \"estado\" para ver un informe completo de tu estado" +
    " de salud, habilidades y conjuros conocidos).\n\n");
    
    




}]]></Code>
<PlayerList>
<Player id="Héroe"/>
</PlayerList>
<VisualConfiguration>
<Colors>
<Story color="#006633"/>
<Information color="#660066"/>
<Default color="#000000"/>
<Input color="#666666"/>
<Description color="#0000ff"/>
<Foreground color="#000000"/>
<Important color="#00cc33"/>
<Denial color="#ff9900"/>
<Action color="#660000"/>
<Background color="#ffffcc"/>
<Error color="#ff0000"/>
</Colors>
<Font filename="berylium.ttf" name="Berylium" size="24.0"/>
</VisualConfiguration>
<Rooms>
<Room name="Limbo">
<DescriptionList/>
<ExtraDescriptionList/>
<PropertyList/>
<Code language="BeanShell"><![CDATA[/*Método de análisis sintáctico de la entrada en una habitación*/

void parseCommand( Player aPlayer , String verb , String args )

{

	
    if ( get(aPlayer,"winrar") )
    {
       aPlayer.writeInformation("HAS GANADO. La partida ha terminado.\n"); 
    }
    else
    {
	   aPlayer.writeDenial("Estás muerto. Reinicia el juego o restaura una partida si quieres volver a intentar derrotar a Morluck.\n");
    }

    end();

	

}]]></Code>
<PathList/>
<Inventory>
<ItemRef id="Ramo de flores"/>
<ItemRef id="Cilindro de piedra"/>
<ItemRef id="Cilindro de piedra incogible"/>
<ItemRef id="Botella vacía"/>
</Inventory>
<MobileList>
<MobRef id="Demonio alado"/>
<MobRef id="Tamar"/>
</MobileList>
<RelationshipList>
<Relationship id="Ramo de flores">
<PropertyList/>
</Relationship>
<Relationship id="Cilindro de piedra">
<PropertyList/>
</Relationship>
<Relationship id="Cilindro de piedra incogible">
<PropertyList/>
</Relationship>
<Relationship id="Botella vacía">
<PropertyList/>
</Relationship>
<Relationship id="Demonio alado">
<PropertyList/>
</Relationship>
<Relationship id="Tamar">
<PropertyList/>
</Relationship>
</RelationshipList>
</Room>
<Room name="Entrada">
<DescriptionList>
<Description>Te encuentras en la entrada a la guarida del malvado Morluck. Se trata de una caverna natural. Hacia el norte puedes ver la luz que proviene de la salida al exterior. Hacia el sur, un estrecho y sombrío túnel.</Description>
</DescriptionList>
<ExtraDescriptionList>
<ExtraDescription>
<Name>luz</Name>
<Name>salida</Name>
<Name>exterior</Name>
<DescriptionList>
<Description>La salida al mundo exterior, al que no puedes volver vivo sin haber rescatado a la bella Tamar.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>túnel</Name>
<Name>tunel</Name>
<DescriptionList>
<Description>Un túnel estrecho excavado en la roca.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>roca</Name>
<DescriptionList>
<Description>La roca en la que están excavados estos subterráneos. Parece granito.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>granito</Name>
<DescriptionList>
<Description>No eres experto en minerales.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>caverna</Name>
<DescriptionList>
<Description>Esta entrada es una caverna natural, aunque el túnel que conduce al sur parece excavado.</Description>
</DescriptionList>
</ExtraDescription>
</ExtraDescriptionList>
<PropertyList/>
<PathList>
<Path destination="Limbo" direction="norte" exitTime="0" standard="true">
<PropertyList>
<PropertyEntry name="closed" timeUnitsLeft="0" value="true"/>
</PropertyList>
<DescriptionList>
<Description>Por un momento piensas en olvidarte de Morluck y salir de esta repugnante cueva; pero tras todo lo que has fanfarroneado, sería una deshonra volver por donde has venido... debes rescatar a la bella Tamar, o morir en el intento.</Description>
</DescriptionList>
<CommandList>
<Command name="aldea"/>
<Command name="pueblo"/>
<Command name="fuera"/>
</CommandList>
</Path>
<Path destination="Sala del goblin" direction="sur" exitTime="30" standard="true">
<PropertyList/>
<DescriptionList>
<Description>Caminas unos metros hacia el sur, por un estrecho túnel tenuemente iluminado sin que se vean antorchas... sin duda, se trata de luz mágica. Llegas a un ensanchamiento del túnel.</Description>
</DescriptionList>
<CommandList>
<Command name="dentro"/>
</CommandList>
</Path>
</PathList>
<Inventory/>
<MobileList>
<MobRef id="Héroe"/>
</MobileList>
<RelationshipList>
<Relationship id="Limbo">
<PropertyList>
<PropertyEntry name="jurl" timeUnitsLeft="3" value="re"/>
</PropertyList>
</Relationship>
<Relationship id="Sala del goblin">
<PropertyList/>
</Relationship>
<Relationship id="Héroe">
<PropertyList/>
</Relationship>
</RelationshipList>
</Room>
<Room name="Encrucijada">
<DescriptionList>
<Description>Te encuentras en lo que parece el vestíbulo interior de la guarida de Morluck. Se trata de una sala de alto techo, excavada en roca oscura, e iluminada por luz mágica. Por el norte se sale al exterior, a través de una puerta abierta de grandes hojas pétreas. Al oeste y al este hay sendos túneles altos y estrechos. Al sur, un túnel algo más amplio con suave pendiente descendente, hacia el corazón de la montaña.</Description>
</DescriptionList>
<ExtraDescriptionList>
<ExtraDescription>
<Name>roca</Name>
<DescriptionList>
<Description>La roca granítica en la que están excavados todos estos subterráneos y pasadizos.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>luz</Name>
<DescriptionList>
<Description>La luz irradia de todas partes o de ninguna en particular, haciendo obvia su naturaleza mágica.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>techo</Name>
<DescriptionList>
<Description>Un alto techo de piedra, sin nada remarcable.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>túneles</Name>
<Name>túnel</Name>
<Name>tunel</Name>
<Name>tuneles</Name>
<DescriptionList>
<Description>Túneles excavados en la roca conducen al oeste, este y sur. Los del este y oeste son altos y estrechos, el que se dirige al sur desciende suavemente.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>pendiente</Name>
<DescriptionList>
<Description>El túnel que se dirige al sur tiene algo de pendiente descendente.</Description>
</DescriptionList>
</ExtraDescription>
</ExtraDescriptionList>
<PropertyList/>
<PathList>
<Path destination="Sala del goblin" direction="norte" exitTime="30" standard="true">
<AssociatedItem id="Gran puerta de piedra"/>
<PropertyList/>
<DescriptionList>
<Description>Regresas hacia el norte a través de la gran puerta de piedra.</Description>
</DescriptionList>
<CommandList>
<Command name="fuera"/>
<Command name="puerta"/>
<Command name="puerta de piedra"/>
</CommandList>
</Path>
<Path destination="Sala de antimagia" direction="este" exitTime="30" standard="true">
<PropertyList/>
<DescriptionList>
<Description>Avanzas unos metros por un alto y estrecho túnel de piedra, hasta llegar a una sala cuadrada.</Description>
</DescriptionList>
<CommandList/>
</Path>
<Path destination="Pasillo" direction="sur" exitTime="30" standard="true">
<PropertyList/>
<DescriptionList>
<Description>Te diriges hacia el sur por un pasillo suavemente descendente...</Description>
</DescriptionList>
<CommandList>
<Command name="bajar"/>
<Command name="dentro"/>
</CommandList>
</Path>
<Path destination="Sala del lago" direction="oeste" exitTime="30" standard="true">
<PropertyList/>
<DescriptionList>
<Description>Te diriges hacia el oeste, caminando unos metros por un alto y estrecho túnel pétreo.</Description>
</DescriptionList>
<CommandList>
<Command name="lago"/>
</CommandList>
</Path>
</PathList>
<Inventory>
<ItemRef id="Gran puerta de piedra"/>
<ItemRef id="Agujero circular"/>
</Inventory>
<MobileList/>
<RelationshipList>
<Relationship id="Sala del goblin">
<PropertyList/>
</Relationship>
<Relationship id="Sala de antimagia">
<PropertyList/>
</Relationship>
<Relationship id="Pasillo">
<PropertyList/>
</Relationship>
<Relationship id="Sala del lago">
<PropertyList/>
</Relationship>
<Relationship id="Gran puerta de piedra">
<PropertyList/>
</Relationship>
<Relationship id="Agujero circular">
<PropertyList/>
</Relationship>
</RelationshipList>
</Room>
<Room name="Pasillo">
<DescriptionList>
<Description>Te encuentras en un pasillo de piedra que circula de norte a sur, en las entrañas de la tierra. La pendiente es ligeramente descendente de norte a sur</Description>
<Description>
<Condition language="BeanShell">get(get("Arco"),"enchanted")</Condition>. En la pared este del túnel hay un arco tapiado con grandes bloques de piedra. La clave del arco tiene una inscripción en runas doradas.</Description>
<Description>
<Condition language="BeanShell">!get(get("Arco"),"enchanted")</Condition>. En la pared este del túnel hay un arco que conduce a un tosco túnel excavado en la roca. La clave del arco tiene una inscripción en runas doradas.</Description>
</DescriptionList>
<ExtraDescriptionList>
<ExtraDescription>
<Name>arco</Name>
<DescriptionList>
<Description>Un arco tapiado con grandes bloques de piedra. La clave tiene una inscripción rúnica.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>inscripción</Name>
<Name>inscripciones</Name>
<Name>runas</Name>
<Name>runa</Name>
<Name>rúnica</Name>
<Name>clave</Name>
<DescriptionList>
<Description>Son runas modernas, y dicen... "las cosas no siempre son lo que parecen"</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>piedra</Name>
<DescriptionList>
<Description>La piedra granítica en la que están excavados todos estos túneles.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>pared</Name>
<Name>paredes</Name>
<DescriptionList>
<Description>Las paredes del túnel son de piedra toscamente pulida.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>pendiente</Name>
<DescriptionList>
<Description>El túnel va descendiendo de norte a sur.</Description>
</DescriptionList>
</ExtraDescription>
</ExtraDescriptionList>
<PropertyList/>
<Code language="BeanShell"><![CDATA[/*Método de análisis sintáctico de la entrada en una habitación*/

void parseCommand( Player aPlayer , String verb , String args )

{

	

	if ( verb.equalsIgnoreCase("leer") )

    {

        if ( args.indexOf("runa") >= 0 || args.indexOf("inscrip") >= 0 || args.indexOf("clave") >= 0 )

            aPlayer.forceCommand("mirar runas");

    }

	

}]]></Code>
<PathList>
<Path destination="Encrucijada" direction="norte" exitTime="30" standard="true">
<PropertyList/>
<DescriptionList>
<Description>Vuelves hacia el norte por un pasillo suavemente ascendente.</Description>
</DescriptionList>
<CommandList>
<Command name="subir"/>
<Command name="fuera"/>
</CommandList>
</Path>
<Path destination="Sala de elementos" direction="este" exitTime="0" standard="true">
<PropertyList>
<PropertyEntry name="closed" timeUnitsLeft="0" value="true"/>
</PropertyList>
<DescriptionList>
<Description>
<Condition language="BeanShell">self.isClosed()</Condition>Imposible, el arco está tapiado con piedra sólida.</Description>
<Description>
<Condition language="BeanShell">self.isOpen() &amp;&amp; get(get("Arco"),"enchanted") &amp;&amp; !get(get("Arco"),"passed")</Condition>Un poco titubeante, caminas hacia el arco pensando que las piedras no existen... ¡y, efectivamente, lo atraviesas! Te diriges hacia el este por un estrecho túnel excavado toscamente en la roca...</Description>
<Description>
<Condition language="BeanShell">self.isOpen() &amp;&amp; get(get("Arco"),"enchanted") &amp;&amp; get(get("Arco"),"passed")</Condition>Atravesando el arco con sus piedras ilusorias, te diriges hacia el este por el túnel.</Description>
<Description>
<Condition language="BeanShell">self.isOpen() &amp;&amp; !get(get("Arco"),"enchanted")</Condition>Atravesando el arco, vas hacia el este por un estrecho túnel excavado toscamente en la roca.</Description>
</DescriptionList>
<CommandList/>
</Path>
<Path destination="Antesala" direction="sur" exitTime="30" standard="true">
<PropertyList/>
<DescriptionList>
<Description>Bajas unos metros por el pasillo en dirección sur.</Description>
</DescriptionList>
<CommandList>
<Command name="abajo"/>
<Command name="bajar"/>
<Command name="dentro"/>
<Command name="antesala"/>
</CommandList>
</Path>
</PathList>
<Inventory>
<ItemRef id="Arco"/>
</Inventory>
<MobileList/>
<RelationshipList>
<Relationship id="Encrucijada">
<PropertyList/>
</Relationship>
<Relationship id="Sala de elementos">
<PropertyList>
<PropertyEntry name="closed" timeUnitsLeft="0" value="true"/>
</PropertyList>
</Relationship>
<Relationship id="Antesala">
<PropertyList/>
</Relationship>
<Relationship id="Arco">
<PropertyList/>
</Relationship>
</RelationshipList>
</Room>
<Room name="Sala de antimagia">
<DescriptionList>
<Description>Te hallas en una sala cuadrada, excavada en la roca, de muros pulidos y suelo enlosado con grandes piedras</Description>
<Description>
<Condition language="BeanShell">get(get("Libro de magia antimagia"),"originalPos")</Condition>. En su centro, sobre una gran losa que sobresale extrañamente de las demás, ves un grueso tomo de portada raída.</Description>
<Description>
<Condition language="BeanShell">!get(get("Libro de magia antimagia"),"originalPos")</Condition>. En su centro ves una losa que sobresale extrañamente de las demás.</Description>
</DescriptionList>
<ExtraDescriptionList>
<ExtraDescription>
<Name>roca</Name>
<DescriptionList>
<Description>La roca en la que están excavados todos estos subterráneos.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>muros</Name>
<DescriptionList>
<Description>Muros lisos de roca pulida.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>suelo</Name>
<DescriptionList>
<Description>El suelo está enlosado con grandes piedras de formas irregulares.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>losa</Name>
<Name>piedra</Name>
<DescriptionList>
<Description>Una gran losa que sobresale de las demás de forma muy sospechosa... como si fuera parte de un mecanismo.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>piedras</Name>
<DescriptionList>
<Description>Grandes piedras que forman el suelo de la estancia. Una gran losa sobresale de las demás.</Description>
</DescriptionList>
</ExtraDescription>
</ExtraDescriptionList>
<PropertyList/>
<Code language="BeanShell"><![CDATA[/*Método de análisis sintáctico de la entrada en una habitación*/

void parseCommand( Player aPlayer , String verb , String args )

{

	

	if ( equals(verb,"pisar") )

    {

        if ( args.indexOf("losa") >= 0 )

        {

	           aPlayer.writeAction("Pisas la extraña losa, que se hunde en el suelo con un ruido sordo...\n");



                aPlayer.waitKeyPress();



                aPlayer.writeAction("¡El techo entero de la sala se derrumba sobre ti, golpeándote violentamente en la cabeza!\n");



                aPlayer.die();

                

                aPlayer.setRoom(room("Limbo"));



                end();   

        }

    }



}]]></Code>
<PathList>
<Path destination="Encrucijada" direction="oeste" exitTime="30" standard="true">
<PropertyList/>
<DescriptionList>
<Description>Volviendo por el alto y sombrío túnel, regresas al vestíbulo.</Description>
</DescriptionList>
<CommandList>
<Command name="fuera"/>
</CommandList>
</Path>
</PathList>
<Inventory>
<ItemRef id="Libro de magia antimagia"/>
</Inventory>
<MobileList/>
<RelationshipList>
<Relationship id="Encrucijada">
<PropertyList/>
</Relationship>
<Relationship id="Libro de magia antimagia">
<PropertyList/>
</Relationship>
</RelationshipList>
</Room>
<Room name="Sala de elementos">
<DescriptionList>
<Description>Te encuentras en una sala circular, de unos cinco metros de diámetro, excavada toscamente en la roca.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<PropertyList/>
<Code language="BeanShell"><![CDATA[/*

Método que captura el evento lanzado cuando una criatura entra en una habitación.

*/

void onEnterRoom ( Mobile creature )

{

    

    if ( equals(creature,get("Héroe")))

    {

        set(get("Arco"),"passed",true);    

    }

 	

}]]></Code>
<PathList>
<Path destination="Pasillo" direction="oeste" exitTime="0" standard="true">
<PropertyList/>
<DescriptionList>
<Description>
<Condition language="BeanShell">get(get("Arco"),"enchanted")</Condition>Vuelves al pasillo principal a través de las piedras ilusorias.</Description>
<Description>
<Condition language="BeanShell">!get(get("Arco"),"enchanted")</Condition>Vuelves al pasillo principal a través del arco.</Description>
</DescriptionList>
<CommandList/>
</Path>
</PathList>
<Inventory>
<ItemRef id="Arcón"/>
</Inventory>
<MobileList/>
<RelationshipList>
<Relationship id="Pasillo">
<PropertyList/>
</Relationship>
<Relationship id="Arcón">
<PropertyList/>
</Relationship>
</RelationshipList>
</Room>
<Room name="Sala del orco">
<DescriptionList>
<Description>Estás en una pequeña sala que sólo contiene un sucio jergón. Túneles bajos y estrechos conducen al este y al norte.</Description>
</DescriptionList>
<ExtraDescriptionList>
<ExtraDescription>
<Name>jergón</Name>
<Name>jergon</Name>
<DescriptionList>
<Description>Un sucio y repulsivo jergón, sin duda lugar de descanso de un orco. No hay nada de interés en él.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>túnel</Name>
<Name>tunel</Name>
<Name>túneles</Name>
<Name>tuneles</Name>
<DescriptionList>
<Description>Túneles largos y estrechos que van hacia el este y el norte.</Description>
</DescriptionList>
</ExtraDescription>
</ExtraDescriptionList>
<PropertyList/>
<PathList>
<Path destination="Orilla oeste del lago" direction="este" exitTime="30" standard="true">
<PropertyList/>
<DescriptionList>
<Description>Vuelves hacia el este a través de un túnel tan bajo que te obliga a agacharte un poquito.</Description>
</DescriptionList>
<CommandList>
<Command name="fuera"/>
<Command name="lago"/>
</CommandList>
</Path>
<Path destination="Sala de combate" direction="norte" exitTime="30" standard="true">
<PropertyList>
<PropertyEntry name="closed" timeUnitsLeft="0" value="true"/>
</PropertyList>
<DescriptionList>
<Description>
<Condition language="BeanShell">self.isClosed()</Condition>No puedes, el orco está bloqueando el pasadizo con su grueso cuerpo.</Description>
<Description>
<Condition language="BeanShell">self.isOpen()</Condition>Tomas el estrecho túnel que conduce al norte.</Description>
</DescriptionList>
<CommandList>
<Command name="dentro"/>
</CommandList>
</Path>
</PathList>
<Inventory/>
<MobileList>
<MobRef id="Guardia orco"/>
</MobileList>
<RelationshipList>
<Relationship id="Orilla oeste del lago">
<PropertyList/>
</Relationship>
<Relationship id="Sala de combate">
<PropertyList/>
</Relationship>
<Relationship id="Guardia orco">
<PropertyList/>
</Relationship>
</RelationshipList>
</Room>
<Room name="Sala de combate">
<DescriptionList>
<Description>Una sala muy pequeña, de apenas dos metros por dos metros, que parece destinada al almacenaje de objetos.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<PropertyList/>
<PathList>
<Path destination="Sala del orco" direction="sur" exitTime="30" standard="true">
<PropertyList/>
<DescriptionList>
<Description>Sales de la pequeña sala a través del angosto túnel.</Description>
</DescriptionList>
<CommandList>
<Command name="fuera"/>
</CommandList>
</Path>
</PathList>
<Inventory>
<ItemRef id="Libro de magia de combate"/>
<ItemRef id="Poción de salud"/>
</Inventory>
<MobileList/>
<RelationshipList>
<Relationship id="Sala del orco">
<PropertyList/>
</Relationship>
<Relationship id="Libro de magia de combate">
<PropertyList/>
</Relationship>
<Relationship id="Poción de salud">
<PropertyList/>
</Relationship>
</RelationshipList>
</Room>
<Room name="Antesala">
<DescriptionList>
<Description>Te encuentras en una grandiosa antesala, de muros pulidos de piedra roja y arcos apuntados que se elevan hasta gran altura. Al norte está el pasillo ascendente que lleva al exterior. Al sur, un impresionante arco de dovelas ornamentadas conduce a lo que parece una enorme sala.</Description>
</DescriptionList>
<ExtraDescriptionList>
<ExtraDescription>
<Name>arcos</Name>
<Name>apuntados</Name>
<Name>ojivales</Name>
<DescriptionList>
<Description>Son altos arcos ojivales tallados en la piedra... te preguntas quién llevaría a cabo el inmenso trabajo de construirlos. Orcos o goblins, seguramente.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>arco</Name>
<Name>ornamentado</Name>
<Name>dovelas</Name>
<Name>dovela</Name>
<DescriptionList>
<Description>El arco que conduce hacia el sur está profusamente ornamentado con caras de horribles demonios.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>caras</Name>
<Name>demonios</Name>
<DescriptionList>
<Description>Escalofriantes rostros demoníacos tallados en la piedra.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>muros</Name>
<DescriptionList>
<Description>Los muros son pulidos, de una variedad roja de granito.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>pasillo</Name>
<DescriptionList>
<Description>El pasillo ascendente que conduce al exterior, al norte.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>sala</Name>
<DescriptionList>
<Description>Al sur hay una gran sala, de la que no puedes apreciar gran cosa desde aquí.</Description>
</DescriptionList>
</ExtraDescription>
</ExtraDescriptionList>
<PropertyList/>
<PathList>
<Path destination="Pasillo" direction="norte" exitTime="30" standard="true">
<PropertyList/>
<DescriptionList>
<Description>Subes unos metros por el pasillo hacia el norte.</Description>
</DescriptionList>
<CommandList>
<Command name="arriba"/>
<Command name="subir"/>
<Command name="fuera"/>
<Command name="pasillo"/>
</CommandList>
</Path>
<Path destination="Sala del trono" direction="sur" exitTime="30" standard="true">
<PropertyList>
<PropertyEntry name="closed" timeUnitsLeft="0" value="true"/>
</PropertyList>
<DescriptionList>
<Description>
<Condition language="BeanShell">self.isOpen()</Condition>Te diriges hacia el sur atravesando el arco...</Description>
<Description>
<Condition language="BeanShell">self.isClosed()</Condition>¡El capitán orco te bloquea el paso!</Description>
</DescriptionList>
<CommandList>
<Command name="arco"/>
<Command name="dentro"/>
</CommandList>
</Path>
</PathList>
<Inventory/>
<MobileList>
<MobRef id="Capitán orco"/>
</MobileList>
<RelationshipList>
<Relationship id="Pasillo">
<PropertyList/>
</Relationship>
<Relationship id="Sala del trono">
<PropertyList/>
</Relationship>
<Relationship id="Capitán orco">
<PropertyList/>
</Relationship>
</RelationshipList>
</Room>
<Room name="Sala del goblin">
<DescriptionList>
<Description>Un olor repugnante infesta este amplio túnel excavado en la roca, tenuemente iluminado. Al norte el túnel se estrecha, dirigiéndose hacia la salida hacia el mundo exterior. Hacia el sur, una enorme puerta de piedra</Description>
<Description>
<Condition language="BeanShell">get("Gran puerta de piedra").isClosed()</Condition>, cerrada, te bloquea el paso.</Description>
<Description>
<Condition language="BeanShell">get("Gran puerta de piedra").isOpen()</Condition>, abierta, conduce a las entrañas de la guarida.</Description>
</DescriptionList>
<ExtraDescriptionList>
<ExtraDescription>
<Name>salida</Name>
<Name>exterior</Name>
<DescriptionList>
<Description>La salida se encuentra hacia el norte; pero sería una deshonra salir hasta que no rescates a la hermosa Tamar.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>roca</Name>
<DescriptionList>
<Description>La roca granítica en la que están excavados estos horribles subterráneos.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>entrañas</Name>
<DescriptionList>
<Description>Los subterráneos internos de la guarida del malvado Morluck...</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>túnel</Name>
<Name>tunel</Name>
<DescriptionList>
<Description>Te encuentras en un túnel que discurre de norte a sur. Hacia el norte, se estrecha y se dirige al exterior. Hacia el sur, una pétrea puerta conduce a las entrañas de la guarida de Morluck.</Description>
</DescriptionList>
</ExtraDescription>
</ExtraDescriptionList>
<PropertyList/>
<Code language="BeanShell"><![CDATA[/*Método de análisis sintáctico de la entrada en una habitación*/

void parseCommand( Player aPlayer , String verb , String args )

{

	

	//aPlayer: jugador que introduce un comando.

	//verb: comando que introduce, por ejemplo "coger"

	//args: resto de la orden que introduce, por ejemplo "el cuchillo grande"

	

	

	//terminar con end(): interceptamos la frase, no se ejecuta lo que se tenga que ejecutar

	//por defecto ante ella

	//terminar normal: después de nuestro procesado, se lleva a cabo el análisis normal del

	//comando y ejecución de la acción correspondiente

	

}]]></Code>
<PathList>
<Path destination="Entrada" direction="norte" exitTime="30" standard="true">
<PropertyList/>
<DescriptionList>
<Description>Caminas unos metros hacia el norte, dirigiéndote hacia la entrada.</Description>
</DescriptionList>
<CommandList>
<Command name="fuera"/>
<Command name="entrada"/>
</CommandList>
</Path>
<Path destination="Encrucijada" direction="sur" exitTime="30" standard="true">
<AssociatedItem id="Gran puerta de piedra"/>
<PropertyList/>
<DescriptionList>
<Description>
<Condition language="BeanShell">get("Gran puerta de piedra").isClosed()</Condition>No puedes, porque la gran puerta de piedra está cerrada.</Description>
<Description>
<Condition language="BeanShell">get("Gran puerta de piedra").isOpen()</Condition>Te diriges hacia el sur, franqueando la gran puerta de piedra.</Description>
</DescriptionList>
<CommandList>
<Command name="dentro"/>
<Command name="puerta"/>
<Command name="puerta de piedra"/>
</CommandList>
</Path>
</PathList>
<Inventory>
<ItemRef id="Gran puerta de piedra"/>
<ItemRef id="Agujero circular"/>
</Inventory>
<MobileList>
<MobRef id="Guardia goblin"/>
</MobileList>
<RelationshipList>
<Relationship id="Entrada">
<PropertyList/>
</Relationship>
<Relationship id="Encrucijada">
<PropertyList/>
</Relationship>
<Relationship id="Gran puerta de piedra">
<PropertyList/>
</Relationship>
<Relationship id="Agujero circular">
<PropertyList/>
</Relationship>
<Relationship id="Guardia goblin">
<PropertyList/>
</Relationship>
</RelationshipList>
</Room>
<Room name="Sala del lago">
<DescriptionList>
<Description>
<Condition language="BeanShell">item("Lago").isOpen()</Condition>Te encuentras en la parte este de una caverna natural de alto techo que aloja un lago subterráneo cuya superficie está helada</Description>
<Description>
<Condition language="BeanShell">item("Lago").isClosed()</Condition>Te encuentras en la parte este de una caverna natural de alto techo que aloja un lago subterráneo de aguas negras</Description>
<Description>. Te hallas en la orilla este, de la cual sale el túnel de muros pulidos que desemboca en el vestíbulo. En la orilla oeste, sólo accesible cruzando el lago, se puede ver la entrada de otro túnel.</Description>
</DescriptionList>
<ExtraDescriptionList>
<ExtraDescription>
<Name>orilla oeste</Name>
<DescriptionList>
<Description>Desde aquí no puedes ver gran cosa en la orilla este, salvo la entrada de otro túnel.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>túnel</Name>
<Name>tunel</Name>
<DescriptionList>
<Description>Hacia el este arranca un túnel alto y estrecho, en la orilla oeste del lago ves la entrada de otro túnel más bajo.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>caverna</Name>
<DescriptionList>
<Description>Una caverna natural, amplia y de alto techo, que aloja un lago subterráneo.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>techo</Name>
<DescriptionList>
<Description>El techo de esta caverna es muy alto, y no ves nada en él que te llame la atención.</Description>
</DescriptionList>
</ExtraDescription>
</ExtraDescriptionList>
<PropertyList/>
<Code language="BeanShell"><![CDATA[/*Método de análisis sintáctico de la entrada en una habitación*/

void parseCommand( Player aPlayer , String verb , String args )

{

	

	//aPlayer: jugador que introduce un comando.

	//verb: comando que introduce, por ejemplo "coger"

	//args: resto de la orden que introduce, por ejemplo "el cuchillo grande"

	

    //dudo que vadear esté en la lista estándar de verbos, así que por si acaso meto todas las formas

    if ( equals(verb,"vadear") || equals(verb,"vadea") || equals(verb,"vadeo") || equals(verb,"nadar") || equals(verb,"nada") || equals(verb,"nado") )

    {

        aPlayer.forceCommand("ir al oeste");

        end();   

    }

	

	//terminar con end(): interceptamos la frase, no se ejecuta lo que se tenga que ejecutar

	//por defecto ante ella

	//terminar normal: después de nuestro procesado, se lleva a cabo el análisis normal del

	//comando y ejecución de la acción correspondiente

	

}





/*

Método que captura el evento lanzado cuando una criatura abandona una habitación

por un camino dado.

*/

void beforeExit ( Mobile creature , Path path )

{

 	

 	//creature: criatura que abandona la habitación.

 	//self: habitación que abandona (es decir, esta habitación).

 	//path: salida que utiliza para abandonarla.

 

    if ( path.equals ( self.getPath(true,Path.WEST) ) && item("Lago").isClosed() )

    {

        if ( get(creature,"piranhaAttacked") == null || get(creature,"piranhaAttacked") == false )

        {

            creature.writeStory("En cuanto te metes en el lago con la idea de vadearlo o nadar para llegar a la orilla oeste, notas un " + 

            "intenso dolor en tus piernas... ¡las aguas están llenas de voraces pirañas! Retrocedes al momento, dándote cuenta de que " + 

            "no conseguirías llegar de una pieza al otro lado.\n");

            set(creature,"piranhaAttacked",true);

            end();

        }

        else

        {

            creature.writeDenial("¿Con las pirañas ahí esperándote? ¡Ni de broma! Hay suicidios mucho menos dolorosos...\n");

            end();

        }

    }

 

 	//terminar con end() para que la criatura no consiga salir (se interrumpe la acción).						

  	//terminar normal para que la acción se lleve a cabo.

  

}]]></Code>
<PathList>
<Path destination="Encrucijada" direction="este" exitTime="30" standard="true">
<PropertyList/>
<DescriptionList>
<Description>Vuelves al vestíbulo, caminando unos metros por un alto y estrecho túnel de piedra.</Description>
</DescriptionList>
<CommandList>
<Command name="fuera"/>
</CommandList>
</Path>
<Path destination="Orilla oeste del lago" direction="oeste" exitTime="40" standard="true">
<AssociatedItem id="Lago"/>
<PropertyList/>
<DescriptionList>
<Description>
<Condition language="BeanShell">self.isClosed()</Condition>Entras en el lago, con la intención de vadearlo o nadar para continuar hacia el oeste... pero nada más meterte en las negras aguas, notas un intenso dolor en tus piernas... ¡las aguas están llenas de voraces pirañas! Retrocedes al momento, esos peces infernales te devorarían entero si insistieras en cruzar.</Description>
<Description>
<Condition language="BeanShell">!self.isClosed()</Condition>Caminas hacia el oeste sobre el lago helado, con cuidado de no resbalar.</Description>
</DescriptionList>
<CommandList>
<Command name="lago"/>
</CommandList>
</Path>
</PathList>
<Inventory>
<ItemRef id="Lago"/>
</Inventory>
<MobileList/>
<RelationshipList>
<Relationship id="Encrucijada">
<PropertyList/>
</Relationship>
<Relationship id="Orilla oeste del lago">
<PropertyList/>
</Relationship>
<Relationship id="Lago">
<PropertyList/>
</Relationship>
</RelationshipList>
</Room>
<Room name="Orilla oeste del lago">
<DescriptionList>
<Description>
<Condition language="BeanShell">item("Lago").isOpen()</Condition>Te encuentras en la parte oeste de una caverna natural de alto techo que aloja un lago subterráneo cuya superficie está helada</Description>
<Description>
<Condition language="BeanShell">item("Lago").isClosed()</Condition>Te encuentras en la parte oeste de una caverna natural de alto techo que aloja un lago subterráneo de aguas negras</Description>
<Description>. Un túnel de techo bajo, y del que proviene un olor nauseabundo, se dirige al oeste. Al otro lado del lago, al este, se halla el túnel de alto techo que conduce al vestíbulo.</Description>
</DescriptionList>
<ExtraDescriptionList>
<ExtraDescription>
<Name>túnel</Name>
<Name>tunel</Name>
<DescriptionList>
<Description>El túnel que se dirige hacia el oeste es de techo bajo y está infestado de un olor nauseabundo.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>caverna</Name>
<DescriptionList>
<Description>Una caverna natural, amplia y de alto techo, que aloja un lago subterráneo.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>techo</Name>
<DescriptionList>
<Description>El techo de la caverna es muy alto. No ves nada de interés en él.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>orilla este</Name>
<DescriptionList>
<Description>De la orilla este arranca el túnel alto por el que has venido.</Description>
</DescriptionList>
</ExtraDescription>
</ExtraDescriptionList>
<PropertyList/>
<Code language="BeanShell"><![CDATA[/*Método de análisis sintáctico de la entrada en una habitación*/

void parseCommand( Player aPlayer , String verb , String args )

{

	

	//aPlayer: jugador que introduce un comando.

	//verb: comando que introduce, por ejemplo "coger"

	//args: resto de la orden que introduce, por ejemplo "el cuchillo grande"

	

    //dudo que vadear esté en la lista estándar de verbos, así que por si acaso meto todas las formas

    if ( equals(verb,"vadear") || equals(verb,"vadea") || equals(verb,"vadeo") || equals(verb,"nadar") || equals(verb,"nada") || equals(verb,"nado") )

    {

        aPlayer.forceCommand("ir al este");  

        end(); 

    }

	

	//terminar con end(): interceptamos la frase, no se ejecuta lo que se tenga que ejecutar

	//por defecto ante ella

	//terminar normal: después de nuestro procesado, se lleva a cabo el análisis normal del

	//comando y ejecución de la acción correspondiente

	

}]]></Code>
<PathList>
<Path destination="Sala del lago" direction="este" exitTime="40" standard="true">
<AssociatedItem id="Lago"/>
<PropertyList/>
<DescriptionList>
<Description>
<Condition language="BeanShell">self.isClosed()</Condition>¿Con las aguas infestadas de pirañas? ¡Ni de broma!</Description>
<Description>
<Condition language="BeanShell">!self.isClosed()</Condition>Regresas hacia el este pisando con cuidado sobre el lago helado.</Description>
</DescriptionList>
<CommandList>
<Command name="lago"/>
</CommandList>
</Path>
<Path destination="Sala del orco" direction="oeste" exitTime="30" standard="true">
<PropertyList/>
<DescriptionList>
<Description>Te diriges al oeste a través de un túnel tan bajo que te obliga a agacharte un poquito.</Description>
</DescriptionList>
<CommandList>
<Command name="dentro"/>
</CommandList>
</Path>
</PathList>
<Inventory>
<ItemRef id="Lago"/>
</Inventory>
<MobileList/>
<RelationshipList>
<Relationship id="Sala del lago">
<PropertyList/>
</Relationship>
<Relationship id="Sala del orco">
<PropertyList/>
</Relationship>
<Relationship id="Lago">
<PropertyList/>
</Relationship>
</RelationshipList>
</Room>
<Room name="Sala del trono">
<DescriptionList>
<Description>
<Condition language="BeanShell">get(viewer,"hasBeenTo",self) != null &amp;&amp; get(viewer,"hasBeenTo",self) &amp;&amp; get(item("Lámpara de araña"),"fallen")</Condition>Te encuentras en una sala rectangular de decoración recargada y barroca. Tapices mostrando ejércitos de orcos y criaturas demoníacas cubren las paredes. Una enorme lámpara de araña iluminaba la estancia; pero ahora está destrozada en el suelo, donde ha caído aplastando al malvado Morluck. Al fondo se encuentra el negro trono del villano. Al norte, la salida al exterior.</Description>
<Description>
<Condition language="BeanShell">get(viewer,"hasBeenTo",self) != null &amp;&amp; get(viewer,"hasBeenTo",self) &amp;&amp; !get(item("Lámpara de araña"),"fallen")</Condition>Te encuentras en una sala rectangular de decoración recargada y barroca, a la que se entra desde el norte. Tapices mostrando ejércitos de orcos y criaturas demoníacas cubren las paredes. Una enorme lámpara de araña ilumina la estancia. Al fondo, sobre una tarima de piedra, hay un trono negro como la noche: ¡el trono del malvado Morluck!</Description>
</DescriptionList>
<ExtraDescriptionList>
<ExtraDescription>
<Name>tapices</Name>
<Name>tapiz</Name>
<DescriptionList>
<Description>Los tapices muestran grandes hordas de orcos y demonios alados venciendo a ejércitos de humanos y atacando ciudades.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>ejércitos</Name>
<Name>ejercitos</Name>
<DescriptionList>
<Description>Ejércitos de orcos y demonios luchan contra ejércitos de humanos en las escenas bélicas de los tapices.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>ciudades</Name>
<DescriptionList>
<Description>Ciudades que están siendo arrasadas por los ejércitos de criaturas del mal, que siembran la destrucción a diestro y siniestro.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>orcos</Name>
<DescriptionList>
<Description>Ejércitos de crueles orcos, fuertemente armados.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>demonios</Name>
<DescriptionList>
<Description>Demonios alados, de garras puntiagudas y aliento de fuego.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>trono</Name>
<DescriptionList>
<Description>Un trono de ébano decorado con figuras geométricas: un asiento digno de un rey... o de un megalómano.</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>decoración</Name>
<Name>decoracion</Name>
<DescriptionList>
<Description>Decoración muy recargada y extravagante: las paredes están cubiertas de tapices que muestran ejércitos malvados, y también hay una gran lámpara de araña.</Description>
</DescriptionList>
</ExtraDescription>
</ExtraDescriptionList>
<PropertyList/>
<Code language="BeanShell"><![CDATA[/*

Método que captura el evento lanzado cuando una criatura abandona una habitación

por un camino dado.

*/

void beforeExit ( Mobile creature , Path path )

{

    

    if ( equals(path , room("Sala del trono").getPath(true,Path.NORTH)) && !room("Sala del trono").hasMobile(mobile("Morluck")))

    {



            creature.writeStory("Tamar te sigue, y salís de la guarida de Morluck...\n");

            creature.writeStory("Unos minutos después, los dos aparecéis en el pueblo. Tamar les cuenta a todos lo buen mago que eres y lo valiente que has sido; y todos te muestran su admiración y organizan una fiesta en vuestro honor. Recibes muchos regalos y atenciones, y decides quedarte en el pueblo, perfeccionando tus habilidades mágicas... esta vez en serio.\n\nFIN\n\n");   

            set(creature,"winrar",true);

            creature.setRoom(room("Limbo"));

 	          end();

 

    }

 

 

 	//creature: criatura que abandona la habitación.

 	//self: habitación que abandona (es decir, esta habitación).

 	//path: salida que utiliza para abandonarla.

 

 	//terminar con end() para que la criatura no consiga salir (se interrumpe la acción).						

  	//terminar normal para que la acción se lleve a cabo.

  

}]]></Code>
<PathList>
<Path destination="Antesala" direction="norte" exitTime="30" standard="true">
<PropertyList>
<PropertyEntry name="closed" timeUnitsLeft="0" value="true"/>
</PropertyList>
<DescriptionList>
<Description>
<Condition language="BeanShell">self.isOpen()</Condition>Vuelves a la antesala, atravesando el arco.</Description>
<Description>
<Condition language="BeanShell">self.isClosed()</Condition>Te dispones a huir hacia el norte, pero un muro invisible te lo impide... Morluck se ríe: "¡Esta sala será tu tumba!"</Description>
</DescriptionList>
<CommandList>
<Command name="arco"/>
<Command name="fuera"/>
</CommandList>
</Path>
</PathList>
<Inventory>
<ItemRef id="Lámpara de araña"/>
<ItemRef id="cuerda"/>
</Inventory>
<MobileList>
<MobRef id="Morluck"/>
</MobileList>
<RelationshipList>
<Relationship id="Antesala">
<PropertyList/>
</Relationship>
<Relationship id="Lámpara de araña">
<PropertyList/>
</Relationship>
<Relationship id="cuerda">
<PropertyList/>
</Relationship>
<Relationship id="Morluck">
<PropertyList/>
</Relationship>
</RelationshipList>
</Room>
</Rooms>
<Items>
<Item canGet="false" closeable="false" gender="false" lockable="false" name="Garra derecha(copy)" openable="false" unlockable="false" volume="1" weight="1">
<SingularNames>
<Description>garra derecha</Description>
</SingularNames>
<PluralNames>
<Description>garra derecha</Description>
</PluralNames>
<SingularReferenceNames>
<Name>Garra derecha</Name>
<Name>derecha</Name>
<Name>garra</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>Garras derechas</Name>
<Name>derechas</Name>
<Name>garras</Name>
</PluralReferenceNames>
<DescriptionList/>
<ExtraDescriptionList/>
<PropertyList/>
<RelationshipList/>
</Item>
<Item canGet="false" closeable="false" gender="false" lockable="false" name="Garra izquierda(copy)" openable="false" unlockable="false" volume="1" weight="1">
<SingularNames>
<Description>garra izquierda</Description>
</SingularNames>
<PluralNames>
<Description>garra izquierda</Description>
</PluralNames>
<SingularReferenceNames>
<Name>Garra izquierda</Name>
<Name>izquierda</Name>
<Name>garra</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>Garras izquierdas</Name>
<Name>izquierdas</Name>
<Name>garras</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Es una afilada garra.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<PropertyList>
<PropertyEntry name="state" timeUnitsLeft="0" value="0"/>
</PropertyList>
<RelationshipList/>
</Item>
<Item canGet="false" closeable="false" gender="false" lockable="false" name="Mano derecha" openable="false" type="weapon" unlockable="false" volume="1" weight="1">
<SingularNames>
<Description>mano derecha</Description>
</SingularNames>
<PluralNames>
<Description>mano derecha</Description>
</PluralNames>
<SingularReferenceNames>
<Name>Mano derecha</Name>
<Name>derecha</Name>
<Name>mano</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>Manos derechas</Name>
<Name>derechas</Name>
<Name>manos</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Es una mano.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<WeaponSpecs>
<Attack minUsage="0">
<InvolvedSkills>
<Skill name="desarmado" relevance="1"/>
</InvolvedSkills>
<DamageList>
<Damage formula="1D3-1" type="1"/>
</DamageList>
<Probability steepness="0.0"/>
<Time starting="50" steepness="-1.0"/>
<RecoverTime starting="40" steepness="-1.0"/>
</Attack>
<Defense minUsage="0">
<InvolvedSkills>
<Skill name="desarmado" relevance="1"/>
</InvolvedSkills>
<DamageList>
<Damage formula="1d3-2" type="1"/>
</DamageList>
<Probability steepness="0.0"/>
<Time starting="35.0" steepness="-1.0"/>
<RecoverTime starting="40.0" steepness="-1.0"/>
</Defense>
</WeaponSpecs>
<PropertyList>
<PropertyEntry name="state" timeUnitsLeft="0" value="0"/>
</PropertyList>
<RelationshipList>
<Relationship id="Garrote tosco">
<PropertyList>
<PropertyEntry name="wields" timeUnitsLeft="0" value="true"/>
</PropertyList>
</Relationship>
</RelationshipList>
</Item>
<Item canGet="false" closeable="false" gender="false" lockable="false" name="Mano derecha del héroe" openable="false" type="weapon" unlockable="false" volume="1" weight="1">
<SingularNames>
<Description>mano derecha</Description>
</SingularNames>
<PluralNames>
<Description>mano derecha</Description>
</PluralNames>
<SingularReferenceNames>
<Name>Mano derecha</Name>
<Name>derecha</Name>
<Name>mano</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>Manos derechas</Name>
<Name>derechas</Name>
<Name>manos</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Es una mano.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<WeaponSpecs>
<Attack minUsage="0">
<InvolvedSkills>
<Skill name="combate sin armas" relevance="1"/>
</InvolvedSkills>
<DamageList>
<Damage formula="1D3-1" type="1"/>
</DamageList>
<Probability steepness="0.0"/>
<Time starting="30.0" steepness="0.0"/>
<RecoverTime starting="30.0" steepness="0.0"/>
</Attack>
<Defense minUsage="0">
<InvolvedSkills>
<Skill name="combate sin armas" relevance="1"/>
</InvolvedSkills>
<DamageList>
<Damage formula="1D3-2" type="1"/>
</DamageList>
<Probability steepness="0.0"/>
<Time starting="50.0" steepness="0.0"/>
<RecoverTime starting="50.0" steepness="0.0"/>
</Defense>
</WeaponSpecs>
<PropertyList>
<PropertyEntry name="state" timeUnitsLeft="0" value="0"/>
</PropertyList>
<RelationshipList>
<Relationship id="Bastón de combate">
<PropertyList>
<PropertyEntry name="wields" timeUnitsLeft="0" value="true"/>
</PropertyList>
</Relationship>
</RelationshipList>
</Item>
<Item canGet="false" closeable="false" gender="false" lockable="false" name="Mano izquierda del héroe" openable="false" type="weapon" unlockable="false" volume="1" weight="1">
<SingularNames>
<Description>mano izquierda</Description>
</SingularNames>
<PluralNames>
<Description>manos izquierdas</Description>
</PluralNames>
<SingularReferenceNames>
<Name>Mano izquierda</Name>
<Name>izquierda</Name>
<Name>mano</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>Manos izquierdas</Name>
<Name>izquierdas</Name>
<Name>manos</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Es una mano.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<WeaponSpecs>
<Attack minUsage="0">
<InvolvedSkills>
<Skill name="combate sin armas" relevance="1"/>
</InvolvedSkills>
<DamageList>
<Damage formula="1D3-1" type="1"/>
</DamageList>
<Probability steepness="0.0"/>
<Time starting="30.0" steepness="0.0"/>
<RecoverTime starting="30.0" steepness="0.0"/>
</Attack>
<Defense minUsage="0">
<InvolvedSkills>
<Skill name="combate sin armas" relevance="1"/>
</InvolvedSkills>
<DamageList>
<Damage formula="1D3-2" type="1"/>
</DamageList>
<Probability steepness="0.0"/>
<Time starting="50.0" steepness="0.0"/>
<RecoverTime starting="50.0" steepness="0.0"/>
</Defense>
</WeaponSpecs>
<PropertyList>
<PropertyEntry name="state" timeUnitsLeft="0" value="0"/>
</PropertyList>
<RelationshipList>
<Relationship id="Bastón de combate">
<PropertyList>
<PropertyEntry name="wields" timeUnitsLeft="0" value="true"/>
</PropertyList>
</Relationship>
</RelationshipList>
</Item>
<Item canGet="true" closeable="false" gender="true" lockable="false" name="Bastón de combate" openable="false" type="weapon" unlockable="false" volume="5" weight="10">
<SingularNames>
<Description>bastón de combate</Description>
</SingularNames>
<PluralNames>
<Description>bastones de combate</Description>
</PluralNames>
<SingularReferenceNames>
<Name>bastón de combate</Name>
<Name>bastón</Name>
<Name>arma</Name>
<Name>baston de combate</Name>
<Name>baston</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>bastones de combate</Name>
<Name>bastones</Name>
<Name>armas</Name>
<Name>todo</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Un bastón recto de madera dura, con los extremos revestidos de metal. Arma típica de magos, es muy versátil: permite asestar buenos golpes; pero también bloquear si se utiliza con destreza.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<WeaponSpecs>
<WieldableLimbs>
<Requirement>
<Name>mano derecha</Name>
<Name>mano</Name>
</Requirement>
<Requirement>
<Name>mano izquierda</Name>
<Name>mano</Name>
</Requirement>
</WieldableLimbs>
<Attack minUsage="0">
<InvolvedSkills>
<Skill name="bastón" relevance="1.0"/>
</InvolvedSkills>
<DamageList>
<Damage formula="1FUE+1D8-6" type="1"/>
</DamageList>
<Probability steepness="0.0"/>
<Time starting="30.0" steepness="-1.0"/>
<RecoverTime starting="30.0" steepness="-1.0"/>
</Attack>
<Defense minUsage="0">
<InvolvedSkills>
<Skill name="bastón" relevance="1.0"/>
</InvolvedSkills>
<DamageList>
<Damage formula="1D8+2" type="1"/>
</DamageList>
<Probability steepness="0.0"/>
<Time starting="20.0" steepness="-1.0"/>
<RecoverTime starting="30.0" steepness="-1.0"/>
</Defense>
</WeaponSpecs>
<PropertyList>
<PropertyEntry name="state" timeUnitsLeft="0" value="0"/>
</PropertyList>
<RelationshipList/>
</Item>
<Item canGet="false" closeable="true" gender="false" lockable="false" name="Gran puerta de piedra" openable="true" unlockable="false" volume="100" weight="100">
<SingularNames/>
<PluralNames/>
<SingularReferenceNames>
<Name>gran puerta de piedra</Name>
<Name>puerta de piedra</Name>
<Name>puerta</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>grandes puertas de piedra</Name>
<Name>puertas de piedra</Name>
<Name>puertas</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Una enorme puerta con dos hojas de sólida piedra. Una de las hojas tiene un agujero circular, rodeado de inscripciones rúnicas.</Description>
</DescriptionList>
<ExtraDescriptionList>
<ExtraDescription>
<Name>inscripciones rúnicas</Name>
<Name>runas</Name>
<Name>inscripciones</Name>
<Name>inscripción</Name>
<Name>runa</Name>
<DescriptionList>
<Description>Están en un alfabeto rúnico antiguo, no en el que se usa en la actualidad... sólo reconoces una runa que significa "abrir" o "apertura". Deberías haber prestado más atención a tus clases de escritura arcana antigua...</Description>
</DescriptionList>
</ExtraDescription>
<ExtraDescription>
<Name>hojas</Name>
<Name>hoja</Name>
<DescriptionList>
<Description>Las enormes hojas de la puerta son de piedra, y una de ellas tiene un agujero circular, rodeado de inscripciones rúnicas.</Description>
</DescriptionList>
</ExtraDescription>
</ExtraDescriptionList>
<OpenDescriptionList>
<Description>
<Condition language="BeanShell">self.isClosed()</Condition>FAIL:Imposible abrir por las buenas una puerta de piedra tan enorme... no sabes si está sellada de alguna manera; pero en cualquier caso no tendrías fuerza para empujar las hojas. Debe de haber alguna manera de abrirla que no sea por fuerza bruta.</Description>
<Description>
<Condition language="BeanShell">self.isOpen()</Condition>FAIL:La puerta de piedra ya está abierta.</Description>
</OpenDescriptionList>
<CloseDescriptionList>
<Description>
<Condition language="BeanShell">self.isClosed()</Condition>FAIL:La puerta de piedra ya está cerrada.</Description>
<Description>
<Condition language="BeanShell">self.isOpen()</Condition>FAIL:No tienes fuerza para mover las hojas de la puerta, deben de pesar toneladas cada una. Y el cilindro está encajado en el agujero y no ves manera de sacarlo... así que la puerta tendrá que quedar abierta.</Description>
</CloseDescriptionList>
<PropertyList>
<PropertyEntry name="closed" timeUnitsLeft="0" value="true"/>
<PropertyEntry name="locked" timeUnitsLeft="0" value="true"/>
</PropertyList>
<RelationshipList/>
</Item>
<Item canGet="false" closeable="false" gender="true" lockable="false" name="Cilindro de piedra incogible" openable="false" unlockable="false" volume="4" weight="4">
<SingularNames/>
<PluralNames/>
<SingularReferenceNames>
<Name>cilindro de piedra</Name>
<Name>cilindro</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>cilindros de piedra</Name>
<Name>cilindros</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Un cilindro de piedra, de unos diez centímetros de largo y cinco de diámetro, cubierto de runas. Está encajado en el agujero de la puerta, no ves manera de sacarlo.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<PropertyList/>
<Code language="BeanShell"><![CDATA[/*Método de análisis sintáctico de la entrada referida a una o dos cosas, que no están dentro de otras*/

/*Este método se ejecuta cuando el jugador invoca una orden sobre uno o dos objetos que no están dentro de un contenedor, uno de los cuales es éste.

*/

void parseCommandGeneric ( Mobile aCreature , String verb , String args1 , String args2 , Entity obj1 , Entity obj2 ,  boolean goesFirst )

{

	

	

	if ( equals(verb,"coger") || equals(verb,"sacar") || equals(verb,"desencajar") || equals(verb,"tirar") )

    {

        aCreature.writeDenial("Está encajado en el agujero, ya no hay quien lo saque de ahí.\n");

        end();   

    }

	

}]]></Code>
<RelationshipList/>
</Item>
<Item canGet="true" closeable="false" gender="true" lockable="false" name="Cilindro de piedra" openable="false" unlockable="false" volume="4" weight="4">
<SingularNames>
<Description>cilindro de piedra</Description>
</SingularNames>
<PluralNames>
<Description>cilindros de piedra</Description>
</PluralNames>
<SingularReferenceNames>
<Name>cilindro de piedra</Name>
<Name>cilindro</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>cilindros de piedra</Name>
<Name>cilindros</Name>
<Name>todo</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Un cilindro de piedra, de unos diez centímetros de largo y cinco de diámetro, cubierto de runas.</Description>
</DescriptionList>
<ExtraDescriptionList>
<ExtraDescription>
<Name>runas</Name>
<Name>runa</Name>
<DescriptionList>
<Description>Son runas antiguas, de una lenguaje arcano ahora en desuso. Sólo reconoces una que pone algo de "abrir". Deberías haber atendido más en tus clases de escritura arcana arcaica...</Description>
</DescriptionList>
</ExtraDescription>
</ExtraDescriptionList>
<PropertyList/>
<Code language="BeanShell"><![CDATA[/*Método de análisis sintáctico de la entrada referida a dos cosas, que no están dentro de otras*/

/*Este método se ejecuta cuando el jugador invoca una orden sobre dos objetos, que no están en contenedores, y el primero de los cuales es éste.

*/

void parseCommandObj1 ( Mobile aCreature , String verb , String args1 , String args2 , Entity obj2  )

{

	

	//aCreature: criatura que introduce un comando.

	//verb: comando que introduce, por ejemplo "afilar"

	//args1: parte de la orden que se refiere a un primer objeto (que es este objeto), por ejemplo "el cuchillo".

	//args2: parte de la orden que se refiere a un segundo objeto, por ejemplo "con el afilador"

	//obj2: segundo objeto al que se refiere la acción del jugador (en el ejemplo, el objeto afilador).



	

	//terminar con end(): interceptamos la frase, no se ejecuta lo que se tenga que ejecutar

	//por defecto ante ella

	//terminar normal: después de nuestro procesado, se lleva a cabo el análisis normal del

	//comando y ejecución de la acción correspondiente




    if ( verb.equalsIgnoreCase("poner") || verb.equalsIgnoreCase("meter") || verb.equalsIgnoreCase("encajar") || verb.equalsIgnoreCase("introducir") )

    {

        if ( get("Agujero circular").equals(obj2) )

        {

            aCreature.writeAction("Introduces el cilindro en el agujero de la puerta de piedra... ¡CLICK! ¡encaja perfectamente!\n");

            aCreature.writeStory("Se escucha un ruido sordo y constante...\n");

            aCreature.waitKeyPress();

            aCreature.writeStory("¡Las hojas de la pesada puerta de piedra se abren solas, deslizándose lentamente sobre el suelo, franqueándote el paso!\n");

            set(get("Gran puerta de piedra"),"locked",false);

            set(get("Gran puerta de piedra"),"closed",false);

            aCreature.removeItem(get("Cilindro de piedra"));

            set(get("Agujero circular"),"concilindro",true);

            get("Sala del goblin").addItem(get("Cilindro de piedra incogible"));

            get("Encrucijada").addItem(get("Cilindro de piedra incogible"));

            end();   

        }

    }

	

}]]></Code>
<RelationshipList/>
</Item>
<Item canGet="false" closeable="false" gender="true" lockable="false" name="Orbe de luz(copy)" openable="false" unlockable="false" volume="5" weight="10">
<SingularNames>
<Description>orbe de luz</Description>
</SingularNames>
<PluralNames>
<Description>orbes de luz</Description>
</PluralNames>
<SingularReferenceNames>
<Name>Orbe de luz</Name>
<Name>orbe</Name>
<Name>esfera</Name>
<Name>bola</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>Orbes de luz</Name>
<Name>orbes</Name>
<Name>esferas</Name>
<Name>bolas</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Se trata de una esfera de cristal de unos diez centímetros de diámetro.</Description>
<Description>
<Condition language="BeanShell">!self.getPropertyValueAsBoolean("light_enabled")</Condition>Muestra un aspecto opaco.</Description>
<Description>
<Condition language="BeanShell">self.getPropertyValueAsBoolean("light_enabled")</Condition>En estos momentos emite una potente luz blanquecina.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<PropertyList>
<PropertyEntry name="light_source" timeUnitsLeft="0" value="1"/>
<PropertyEntry name="light_enabled" timeUnitsLeft="0" value="0"/>
</PropertyList>
<RelationshipList>
<Relationship id="Zuno(copy)">
<PropertyList/>
</Relationship>
</RelationshipList>
</Item>
<Item canGet="false" closeable="false" gender="true" lockable="false" name="Arco" openable="false" unlockable="false" volume="0" weight="0">
<SingularNames/>
<PluralNames/>
<SingularReferenceNames>
<Name>arco</Name>
<Name>arcada</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>arcos</Name>
<Name>arcadas</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Un arco tapiado con grandes bloques de piedra. En la clave del arco hay una inscripción, escrita en runas doradas.</Description>
</DescriptionList>
<ExtraDescriptionList>
<ExtraDescription>
<Name>inscripción</Name>
<Name>runas</Name>
<Name>rúnica</Name>
<Name>runa</Name>
<Name>clave</Name>
<Name>runas doradas</Name>
<DescriptionList>
<Description>La inscripción rúnica de la clave del arco dice: "No todo es lo que parece".</Description>
</DescriptionList>
</ExtraDescription>
</ExtraDescriptionList>
<PropertyList>
<PropertyEntry name="identified" timeUnitsLeft="0" value="false"/>
<PropertyEntry name="enchanted" timeUnitsLeft="0" value="true"/>
<PropertyEntry name="passed" timeUnitsLeft="0" value="false"/>
</PropertyList>
<RelationshipList/>
</Item>
<Item canGet="false" closeable="false" gender="true" lockable="false" name="Agujero circular" openable="false" unlockable="false" volume="0" weight="0">
<SingularNames/>
<PluralNames/>
<SingularReferenceNames>
<Name>agujero circular de la puerta</Name>
<Name>agujero de la puerta</Name>
<Name>agujero de puerta</Name>
<Name>agujero circular</Name>
<Name>agujero</Name>
<Name>circular</Name>
<Name>hoyo</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>agujeros circulares</Name>
<Name>agujeros</Name>
<Name>circulares</Name>
<Name>hoyos</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Un agujero circular de unos cinco centímetros de diámetro, rodeado de inscripciones rúnicas</Description>
<Description>
<Condition language="BeanShell">get(self,"concilindro")</Condition>. En su interior hay encajado un cilindro de piedra.</Description>
<Description>
<Condition language="BeanShell">!get(self,"concilindro")</Condition>.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<PropertyList>
<PropertyEntry name="concilindro" timeUnitsLeft="0" value="false"/>
</PropertyList>
<RelationshipList/>
</Item>
<Item canGet="true" closeable="false" gender="false" lockable="false" name="Espada corta" openable="false" type="weapon" unlockable="false" volume="3" weight="7">
<SingularNames>
<Description>espada corta</Description>
</SingularNames>
<PluralNames>
<Description>espada corta</Description>
</PluralNames>
<SingularReferenceNames>
<Name>Espada corta</Name>
<Name>espada</Name>
<Name>arma</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>Espadas cortas</Name>
<Name>espadas</Name>
<Name>armas</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Es una espada corta equilibrada y bien afilada, de empuñadura tallada en marfil.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<WeaponSpecs>
<WieldableLimbs>
<Requirement>
<Name>mano derecha</Name>
<Name>mano</Name>
</Requirement>
</WieldableLimbs>
<Attack minUsage="0">
<InvolvedSkills>
<Skill name="espada" relevance="1.0"/>
</InvolvedSkills>
<DamageList>
<Damage formula="1FUE+1D8-4" type="1"/>
</DamageList>
<Probability steepness="0.0"/>
<Time starting="30.0" steepness="-1.0"/>
<RecoverTime starting="30.0" steepness="-1.0"/>
</Attack>
<Defense minUsage="0">
<InvolvedSkills>
<Skill name="espada" relevance="1.0"/>
</InvolvedSkills>
<DamageList>
<Damage formula="1D6" type="1"/>
</DamageList>
<Probability steepness="0.0"/>
<Time starting="20.0" steepness="-1.0"/>
<RecoverTime starting="30.0" steepness="-1.0"/>
</Defense>
</WeaponSpecs>
<PropertyList>
<PropertyEntry name="state" timeUnitsLeft="0" value="0"/>
</PropertyList>
<RelationshipList/>
</Item>
<Item canGet="true" closeable="true" gender="true" lockable="true" name="Arcón" openable="true" unlockable="true" volume="40" weight="1500">
<SingularNames>
<Description>arcón</Description>
</SingularNames>
<PluralNames>
<Description>arcones</Description>
</PluralNames>
<SingularReferenceNames>
<Name>Arcón</Name>
<Name>Arcon</Name>
<Name>Baúl</Name>
<Name>Baul</Name>
<Name>Caja</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>Arcones</Name>
<Name>Baúles</Name>
<Name>Cajas</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Se trata de un gran arcón de madera negra y brillante con extraños grabados</Description>
<Description>
<Condition language="BeanShell">self.isOpen()</Condition>. Está abierto, y en su interior hay %INVENTORY</Description>
<Description>
<Condition language="BeanShell">!self.isOpen()</Condition>. Está cerrado.</Description>
</DescriptionList>
<ExtraDescriptionList>
<ExtraDescription>
<Name>grabado</Name>
<Name>grabados</Name>
<DescriptionList>
<Description>
  					
  					Los grabados muestran extrañas criaturas de aspecto demoníaco. No te suena ninguna; pero entre todas tienen suficientes cuernos como para construir una torre de marfil.
  				</Description>
</DescriptionList>
</ExtraDescription>
</ExtraDescriptionList>
<OpenDescriptionList>
<Description>
<Condition language="BeanShell">self.isOpen()</Condition>FAIL:El arcón ya está abierto.</Description>
<Description>
<Condition language="BeanShell">!self.isOpen() &amp;&amp; self.isUnlocked()</Condition>SUCCESS:El arcón se abre suavemente.</Description>
<Description>
<Condition language="BeanShell">!self.isOpen() &amp;&amp; !self.isUnlocked()</Condition>FAIL:El arcón no se abre, parece cerrado con llave.</Description>
</OpenDescriptionList>
<CloseDescriptionList>
<Description>
<Condition language="BeanShell">self.isOpen()</Condition>SUCCESS:Cierras el arcón, cuya tapa emite un click al encajar.</Description>
<Description>
<Condition language="BeanShell">!self.isOpen()</Condition>FAIL:El arcón ya se encuentra cerrado.</Description>
</CloseDescriptionList>
<LockDescriptionList>
<Description>
<Condition language="BeanShell">self.isLocked()</Condition>FAIL:El arcón ya está cerrado con llave.</Description>
<Description>
<Condition language="BeanShell">!self.isLocked()</Condition>SUCCESS:Un click te indica que el arcón se ha cerrado con llave.</Description>
<Description>
<Condition language="BeanShell">!self.isLocked()</Condition>FAIL:No logras cerrar el arcón.</Description>
</LockDescriptionList>
<UnlockDescriptionList>
<Description>
<Condition language="BeanShell">self.isLocked()</Condition>FAIL:No parece que sea ésa la llave que abra el arcón.</Description>
<Description>
<Condition language="BeanShell">self.isLocked()</Condition>SUCCESS:Abres el arcón con la llave sin problemas.</Description>
<Description>
<Condition language="BeanShell">!self.isLocked()</Condition>FAIL:El arcón no está cerrado con llave.</Description>
</UnlockDescriptionList>
<PropertyList>
<PropertyEntry name="state" timeUnitsLeft="0" value="0"/>
<PropertyEntry name="closed" timeUnitsLeft="0" value="true"/>
<PropertyEntry name="locked" timeUnitsLeft="0" value="true"/>
</PropertyList>
<Inventory>
<ItemRef id="Libro de magia elemental"/>
</Inventory>
<RelationshipList>
<Relationship id="Libro de magia elemental">
<PropertyList/>
</Relationship>
<Relationship id="cierre mágico">
<PropertyList>
<PropertyEntry name="cast" timeUnitsLeft="0" value="true"/>
</PropertyList>
</Relationship>
</RelationshipList>
</Item>
<Item canGet="true" closeable="false" gender="true" lockable="false" name="Libro de magia elemental" openable="false" unlockable="false" volume="50" weight="50">
<SingularNames>
<Description>
<Condition language="BeanShell">!get(self,"identified")</Condition>libro gastado</Description>
<Description>
<Condition language="BeanShell">get(self,"identified")</Condition>libro de Magia Elemental</Description>
</SingularNames>
<PluralNames/>
<SingularReferenceNames>
<Name>libro de magia elemental</Name>
<Name>tomo de magia elemental</Name>
<Name>tomo gastado</Name>
<Name>tomo</Name>
<Name>libro gastado</Name>
<Name>libro</Name>
<Name>tomar</Name>
<Name>coger</Name>
<Name>elemental</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>libros de magia elemental</Name>
<Name>tomos de magia elemental</Name>
<Name>tomos gastados</Name>
<Name>libros gastados</Name>
<Name>tomos</Name>
<Name>libros</Name>
<Name>todo</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Un libro de cubiertas azules y lomo rojo, muy gastado por el uso.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<PropertyList>
<PropertyEntry name="identified" timeUnitsLeft="0" value="false"/>
<PropertyEntry name="flammable" timeUnitsLeft="0" value="true"/>
</PropertyList>
<Code language="BeanShell"><![CDATA[/*Método de análisis sintáctico de la entrada referida a una cosa*/
void parseCommand( Mobile aCreature , String verb , String args )
{

    if ( equals ( verb , "leer" ) )
    {
        
        if ( !aCreature.hasItem(self) )
        {
            aCreature.writeDenial("Primero tendrías que tenerlo en tus manos...\n");
            end();   
        }
        
        if ( !get(self,"identified") )
        {
            
            set(self,"identified",true);   
            
            aCreature.writeAction("Abres el gastado tomo dubitativamente... ¡la primera página anuncia que se trata de un libro sobre magia elemental!\n");
            aCreature.writeStory("Dedicas un tiempo a leerlo con detalle...\n");
            aCreature.waitKeyPress();
            aCreature.writeStory("Se denomina \"magia elemental\" a la que busca dominar los cuatro elementos de la naturaleza: tierra, agua, aire y fuego.\n");
            aCreature.writeStory("El libro es el primero de dos tomos sobre el tema, y enseña dos conjuros de magia elemental:\n");
            aCreature.writeStory("FUEGO, que se lanza sobre algo o alguien (conjurar fuego sobre X) y lanza una pequeña bola de fuego mágico sobre ese alguien.\n");
            aCreature.writeStory("HIELO, que se arroja sobre algo o alguien (conjurar hielo sobre X) y genera una bola de hielo que se dirige al objetivo.\n" );
            aCreature.addSpell(get("Fuego"));
            aCreature.addSpell(get("Hielo"));
            aCreature.setSkill("elemental",200);
            aCreature.writeStory("Bueno... no son los grandes conjuros de bola de fuego mayor de los que te jactabas en tus fantasías... pero suenan útiles.\n");
            end();
        }
        else
        {
            aCreature.writeInformation("Ya has aprendido toda la teoría de los hechizos de este libro, sólo la práctica puede ayudarte ahora a usarlos mejor.\n");
            aCreature.writeInformation("Repasas los usos de los hechizos:\n");
            aCreature.writeStory("FUEGO, que se lanza sobre algo o alguien (conjurar fuego sobre X) y lanza una pequeña bola de fuego mágico sobre ese alguien.\n");
            aCreature.writeStory("HIELO, que se arroja sobre algo o alguien (conjurar hielo sobre X) y genera una bola de hielo que se dirige al objetivo.\n" );
                
            end();
        }
        
    }

	

}]]></Code>
<RelationshipList/>
</Item>
<Item canGet="true" closeable="false" gender="true" lockable="false" name="Libro de magia de combate" openable="false" unlockable="false" volume="50" weight="50">
<SingularNames>
<Description>
<Condition language="BeanShell">!get(self,"identified")</Condition>libro nuevo</Description>
<Description>
<Condition language="BeanShell">get(self,"identified")</Condition>libro de Magia de Combate</Description>
</SingularNames>
<PluralNames/>
<SingularReferenceNames>
<Name>libro de magia de combate</Name>
<Name>tomo de magia de combate</Name>
<Name>tomo nuevo</Name>
<Name>tomo</Name>
<Name>libro nuevo</Name>
<Name>libro</Name>
<Name>tomar</Name>
<Name>coger</Name>
<Name>combate</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>libros de magia de combate</Name>
<Name>tomos de magia de combate</Name>
<Name>tomos nuevos</Name>
<Name>libros nuevos</Name>
<Name>tomos</Name>
<Name>libros</Name>
<Name>todo</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Un libro encuadernado en piel, que parece bastante nuevo.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<PropertyList>
<PropertyEntry name="identified" timeUnitsLeft="0" value="false"/>
<PropertyEntry name="flammable" timeUnitsLeft="0" value="true"/>
</PropertyList>
<Code language="BeanShell"><![CDATA[/*Método de análisis sintáctico de la entrada referida a una cosa*/
void parseCommand( Mobile aCreature , String verb , String args )
{

    if ( equals ( verb , "leer" ) )
    {
        
        if ( !aCreature.hasItem(self) )
        {
            aCreature.writeDenial("Primero tendrías que tenerlo en tus manos...\n");
            end();   
        }
        
        if ( !get(self,"identified") )
        {
            
            set(self,"identified",true);   
            
            aCreature.writeAction("Abres el libro, y ves que esta vez se trata de un tomo sobre... ¡magia de combate!\n");
            aCreature.writeStory("Dedicas un tiempo a leerlo con detalle...\n");
            aCreature.waitKeyPress();
            aCreature.writeStory("Se denomina \"magia de combate\" a toda aquélla que se ha desarrollado específicamente para su uso en combate.\n");
            aCreature.writeStory("Este libro enseña dos conjuros de magia de combate:\n");
            aCreature.writeStory("ENCANTAR ARMA, que se lanza sobre un arma (conjurar encantar arma sobre X) y la imbuye de energía mágica.\n");
            aCreature.writeStory("ATURDIR, que se arroja sobre un enemigo (conjurar aturdir sobre X) y lo deja aturdido, sin poder reaccionar, durante unos segundos.\n" );
            aCreature.addSpell(get("Encantar arma"));
            aCreature.addSpell(get("Aturdir"));
            aCreature.setSkill("combate",120);
            end();
        }
        else
        {
            aCreature.writeInformation("Ya has aprendido toda la teoría de los hechizos de este libro, sólo la práctica puede ayudarte ahora a usarlos mejor.\n");
            aCreature.writeInformation("Repasas los usos de los hechizos:\n");
            aCreature.writeStory("ENCANTAR ARMA, que se lanza sobre un arma (conjurar encantar arma sobre X) y la imbuye de energía mágica.\n");
            aCreature.writeStory("ATURDIR, que se arroja sobre un enemigo (conjurar aturdir sobre X) y lo deja aturdido, sin poder reaccionar, durante unos segundos.\n" );
                
            end();
        }
        
    }

	

}]]></Code>
<RelationshipList/>
</Item>
<Item canGet="true" closeable="false" gender="true" lockable="false" name="Escudo circular de madera(copy)" openable="false" type="weapon" unlockable="false" volume="4" weight="3">
<SingularNames>
<Description>escudo circular de madera</Description>
</SingularNames>
<PluralNames>
<Description>escudos circulares de madera</Description>
</PluralNames>
<SingularReferenceNames>
<Name>Escudo circular de madera</Name>
<Name>escudo circular</Name>
<Name>escudo de madera</Name>
<Name>escudo</Name>
<Name>arma</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>Escudos circulares de madera</Name>
<Name>escudos circulares</Name>
<Name>escudos de madera</Name>
<Name>escudos</Name>
<Name>armas</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Es un escudo goblin, apenas un trozo de madera toscamente tallado.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<WeaponSpecs>
<WieldableLimbs>
<Requirement>
<Name>mano izquierda</Name>
<Name>mano</Name>
</Requirement>
</WieldableLimbs>
<Attack minUsage="0">
<InvolvedSkills>
<Skill name="improvisado" relevance="1.0"/>
</InvolvedSkills>
<DamageList>
<Damage formula="1D3" type="1"/>
</DamageList>
<Probability steepness="-1.0"/>
<Time starting="40.0" steepness="-1.0"/>
<RecoverTime starting="32.0" steepness="-1.0"/>
</Attack>
<Defense minUsage="0">
<InvolvedSkills>
<Skill name="contundente" relevance="1.0"/>
</InvolvedSkills>
<DamageList>
<Damage formula="3D6" type="1"/>
</DamageList>
<Probability steepness="0.2"/>
<Time starting="18.0" steepness="-1.0"/>
<RecoverTime starting="26.0" steepness="-1.0"/>
</Defense>
</WeaponSpecs>
<PropertyList>
<PropertyEntry name="state" timeUnitsLeft="0" value="0"/>
</PropertyList>
<RelationshipList/>
</Item>
<Item canGet="false" closeable="false" gender="false" lockable="false" name="Mano derecha de guardia orco" openable="false" type="weapon" unlockable="false" volume="1" weight="1">
<SingularNames>
<Description>mano derecha</Description>
</SingularNames>
<PluralNames>
<Description>mano derecha</Description>
</PluralNames>
<SingularReferenceNames>
<Name>Mano derecha</Name>
<Name>derecha</Name>
<Name>mano</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>Manos derechas</Name>
<Name>derechas</Name>
<Name>manos</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Es una mano.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<WeaponSpecs>
<Attack minUsage="0">
<InvolvedSkills>
<Skill name="desarmado" relevance="1"/>
</InvolvedSkills>
<DamageList>
<Damage formula="1D3-1" type="1"/>
</DamageList>
<Probability steepness="0.0"/>
<Time starting="50" steepness="-1.0"/>
<RecoverTime starting="40" steepness="-1.0"/>
</Attack>
<Defense minUsage="0">
<InvolvedSkills>
<Skill name="desarmado" relevance="1"/>
</InvolvedSkills>
<DamageList>
<Damage formula="1d3-2" type="1"/>
</DamageList>
<Probability steepness="0.0"/>
<Time starting="35.0" steepness="-1.0"/>
<RecoverTime starting="40.0" steepness="-1.0"/>
</Defense>
</WeaponSpecs>
<PropertyList>
<PropertyEntry name="state" timeUnitsLeft="0" value="0"/>
</PropertyList>
<RelationshipList>
<Relationship id="Cimitarra">
<PropertyList>
<PropertyEntry name="wields" timeUnitsLeft="0" value="true"/>
</PropertyList>
</Relationship>
</RelationshipList>
</Item>
<Item canGet="false" closeable="false" gender="false" lockable="false" name="Mano izquierda de guardia orco" openable="false" type="weapon" unlockable="false" volume="1" weight="1">
<SingularNames>
<Description>mano izquierda</Description>
</SingularNames>
<PluralNames>
<Description>manos izquierdas</Description>
</PluralNames>
<SingularReferenceNames>
<Name>Mano izquierda</Name>
<Name>izquierda</Name>
<Name>mano</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>Manos izquierdas</Name>
<Name>izquierdas</Name>
<Name>manos</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Es una mano.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<WeaponSpecs>
<Attack minUsage="0">
<InvolvedSkills>
<Skill name="combate sin armas" relevance="1"/>
</InvolvedSkills>
<DamageList>
<Damage formula="1D3-1" type="1"/>
</DamageList>
<Probability steepness="0.0"/>
<Time starting="30.0" steepness="0.0"/>
<RecoverTime starting="30.0" steepness="0.0"/>
</Attack>
<Defense minUsage="0">
<InvolvedSkills>
<Skill name="combate sin armas" relevance="1"/>
</InvolvedSkills>
<DamageList>
<Damage formula="1D3-2" type="1"/>
</DamageList>
<Probability steepness="0.0"/>
<Time starting="50.0" steepness="0.0"/>
<RecoverTime starting="50.0" steepness="0.0"/>
</Defense>
</WeaponSpecs>
<PropertyList>
<PropertyEntry name="state" timeUnitsLeft="0" value="0"/>
</PropertyList>
<RelationshipList>
<Relationship id="Escudo circular metálico">
<PropertyList>
<PropertyEntry name="wields" timeUnitsLeft="0" value="true"/>
</PropertyList>
</Relationship>
</RelationshipList>
</Item>
<Item canGet="true" closeable="false" gender="true" lockable="false" name="Escudo circular metálico" openable="false" type="weapon" unlockable="false" volume="12" weight="10">
<SingularNames>
<Description>escudo circular metálico</Description>
</SingularNames>
<PluralNames>
<Description>escudos circulares metálicos</Description>
</PluralNames>
<SingularReferenceNames>
<Name>escudo circular metálico</Name>
<Name>escudo circular</Name>
<Name>escudo metálico</Name>
<Name>escudo</Name>
<Name>arma</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>Escudos circulares metálicos</Name>
<Name>escudos circulares</Name>
<Name>escudos metálicos</Name>
<Name>escudos</Name>
<Name>armas</Name>
<Name>todo</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Es un escudo orco, de forma redonda, negro con ribetes rojos sangre. En su centro hay un símbolo semejante a una letra "X" hecha con dos cuartos menguantes.</Description>
</DescriptionList>
<ExtraDescriptionList>
<ExtraDescription>
<Name>símbolo</Name>
<Name>simbolo</Name>
<DescriptionList>
<Description>Un símbolo que parece una letra "X" hecha con dos cuartos menguantes. Seguramente será el anagrama de alguna tribu orca.</Description>
</DescriptionList>
</ExtraDescription>
</ExtraDescriptionList>
<WeaponSpecs>
<WieldableLimbs>
<Requirement>
<Name>mano izquierda</Name>
<Name>mano</Name>
</Requirement>
</WieldableLimbs>
<Attack minUsage="0">
<InvolvedSkills>
<Skill name="improvisado" relevance="1.0"/>
</InvolvedSkills>
<DamageList>
<Damage formula="1D3" type="1"/>
</DamageList>
<Probability steepness="-1.0"/>
<Time starting="40.0" steepness="-1.0"/>
<RecoverTime starting="32.0" steepness="-1.0"/>
</Attack>
<Defense minUsage="0">
<InvolvedSkills>
<Skill name="escudo" relevance="1.0"/>
</InvolvedSkills>
<DamageList>
<Damage formula="5D6" type="1"/>
</DamageList>
<Probability steepness="0.2"/>
<Time starting="18.0" steepness="-1.0"/>
<RecoverTime starting="26.0" steepness="-1.0"/>
</Defense>
</WeaponSpecs>
<PropertyList>
<PropertyEntry name="state" timeUnitsLeft="0" value="0"/>
</PropertyList>
<RelationshipList/>
</Item>
<Item canGet="true" closeable="false" gender="false" lockable="false" name="Poción de salud" openable="false" unlockable="false" volume="10" weight="10">
<SingularNames>
<Description>poción verde</Description>
</SingularNames>
<PluralNames>
<Description>pociones verdes</Description>
</PluralNames>
<SingularReferenceNames>
<Name>poción verde</Name>
<Name>pocion verde</Name>
<Name>poción</Name>
<Name>pocion</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>pociones verdes</Name>
<Name>pociones</Name>
<Name>todo</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Una botella que contiene un líquido verde y viscoso.</Description>
</DescriptionList>
<ExtraDescriptionList>
<ExtraDescription>
<Name>líquido</Name>
<Name>liquido</Name>
<DescriptionList>
<Description>Un líquido verde y viscoso.</Description>
</DescriptionList>
</ExtraDescription>
</ExtraDescriptionList>
<PropertyList/>
<Code language="BeanShell"><![CDATA[/*Método de análisis sintáctico de la entrada referida a una cosa*/

void parseCommand( Mobile aCreature , String verb , String args )

{

	

	if ( verb.equalsIgnoreCase("beber") || verb.equalsIgnoreCase("tragar") || verb.equalsIgnoreCase("consumir") || verb.equalsIgnoreCase("usar") )

    {

        if ( !aCreature.hasItem(self) )

        {

            aCreature.writeDenial("Primero tendrías que tenerla en tus manos.\n");

        }

        else

        {

            aCreature.write("Te bebes la poción de un trago... puagh, sabe muy mal... ¡pero te hace sentirte mucho mejor!");

            aCreature.setHP(aCreature.getMaxHP());   

            aCreature.setNewState(Mobile.IDLE,5);

            self.moveTo(get("Limbo"));

            aCreature.addItem(get("Botella vacía"));

        }

    }

	

}]]></Code>
<RelationshipList/>
</Item>
<Item canGet="true" closeable="false" gender="true" lockable="false" name="Botella vacía" openable="false" type="weapon" unlockable="false" volume="10" weight="5">
<SingularNames>
<Description>botella de poción vacía</Description>
</SingularNames>
<PluralNames/>
<SingularReferenceNames>
<Name>botella de poción vacía</Name>
<Name>botella de pocion vacia</Name>
<Name>botella de poción vacia</Name>
<Name>botella de pocion vacía</Name>
<Name>botella vacía</Name>
<Name>botella vacia</Name>
<Name>botella de poción</Name>
<Name>botella de pocion</Name>
<Name>botella</Name>
<Name>poción</Name>
<Name>pocion</Name>
<Name>vacía</Name>
<Name>vacia</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>botellas</Name>
<Name>pociones</Name>
<Name>vacías</Name>
<Name>vacias</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Una botella que antes contuvo una poción, pero ahora está vacía.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<WeaponSpecs>
<WieldableLimbs>
<Requirement>
<Name>mano derecha</Name>
<Name>mano</Name>
</Requirement>
</WieldableLimbs>
<Attack minUsage="0">
<InvolvedSkills>
<Skill name="improvisado" relevance="1"/>
</InvolvedSkills>
<DamageList>
<Damage formula="1D3" type="1"/>
</DamageList>
<Probability steepness="0"/>
<Time starting="40" steepness="-1"/>
<RecoverTime starting="40" steepness="-1"/>
</Attack>
<Defense minUsage="0">
<InvolvedSkills>
<Skill name="improvisado" relevance="1"/>
</InvolvedSkills>
<DamageList>
<Damage formula="1D2" type="1"/>
</DamageList>
<Probability steepness="0"/>
<Time starting="30" steepness="-1"/>
<RecoverTime starting="40" steepness="-1"/>
</Defense>
</WeaponSpecs>
<PropertyList/>
<RelationshipList/>
</Item>
<Item canGet="false" closeable="false" gender="false" lockable="false" name="Mano izquierda de capitán orco" openable="false" type="weapon" unlockable="false" volume="1" weight="1">
<SingularNames>
<Description>mano izquierda</Description>
</SingularNames>
<PluralNames>
<Description>manos izquierdas</Description>
</PluralNames>
<SingularReferenceNames>
<Name>Mano izquierda</Name>
<Name>izquierda</Name>
<Name>mano</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>Manos izquierdas</Name>
<Name>izquierdas</Name>
<Name>manos</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Es una mano.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<WeaponSpecs>
<Attack minUsage="0">
<InvolvedSkills>
<Skill name="combate sin armas" relevance="1"/>
</InvolvedSkills>
<DamageList>
<Damage formula="1D3-1" type="1"/>
</DamageList>
<Probability steepness="0.0"/>
<Time starting="30.0" steepness="0.0"/>
<RecoverTime starting="30.0" steepness="0.0"/>
</Attack>
<Defense minUsage="0">
<InvolvedSkills>
<Skill name="combate sin armas" relevance="1"/>
</InvolvedSkills>
<DamageList>
<Damage formula="1D3-2" type="1"/>
</DamageList>
<Probability steepness="0.0"/>
<Time starting="50.0" steepness="0.0"/>
<RecoverTime starting="50.0" steepness="0.0"/>
</Defense>
</WeaponSpecs>
<PropertyList>
<PropertyEntry name="state" timeUnitsLeft="0" value="0"/>
</PropertyList>
<RelationshipList>
<Relationship id="Escudo cuadrado metálico">
<PropertyList>
<PropertyEntry name="wields" timeUnitsLeft="0" value="true"/>
</PropertyList>
</Relationship>
</RelationshipList>
</Item>
<Item canGet="true" closeable="false" gender="true" lockable="false" name="Escudo cuadrado metálico" openable="false" type="weapon" unlockable="false" volume="12" weight="10">
<SingularNames>
<Description>escudo cuadrado metálico</Description>
</SingularNames>
<PluralNames>
<Description>escudos cuadrados metálicos</Description>
</PluralNames>
<SingularReferenceNames>
<Name>escudo cuadrado metálico</Name>
<Name>escudo cuadrado</Name>
<Name>escudo metálico</Name>
<Name>escudo</Name>
<Name>arma</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>Escudos cuadrados metálicos</Name>
<Name>escudos cuadrados</Name>
<Name>escudos metálicos</Name>
<Name>escudos</Name>
<Name>armas</Name>
<Name>todo</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Es un escudo orco rectangular, de color granate, con un rombo negro en el centro.</Description>
</DescriptionList>
<ExtraDescriptionList>
<ExtraDescription>
<Name>rombo</Name>
<DescriptionList>
<Description>Un rombo negro decora el escudo. No sabes lo que significará.</Description>
</DescriptionList>
</ExtraDescription>
</ExtraDescriptionList>
<WeaponSpecs>
<WieldableLimbs>
<Requirement>
<Name>mano izquierda</Name>
<Name>mano</Name>
</Requirement>
</WieldableLimbs>
<Attack minUsage="0">
<InvolvedSkills>
<Skill name="improvisado" relevance="1.0"/>
</InvolvedSkills>
<DamageList>
<Damage formula="1D3" type="1"/>
</DamageList>
<Probability steepness="-1.0"/>
<Time starting="40.0" steepness="-1.0"/>
<RecoverTime starting="32.0" steepness="-1.0"/>
</Attack>
<Defense minUsage="0">
<InvolvedSkills>
<Skill name="escudo" relevance="1.0"/>
</InvolvedSkills>
<DamageList>
<Damage formula="6D6" type="1"/>
</DamageList>
<Probability steepness="0.2"/>
<Time starting="15.0" steepness="-1.0"/>
<RecoverTime starting="18.0" steepness="-1.0"/>
</Defense>
</WeaponSpecs>
<PropertyList>
<PropertyEntry name="state" timeUnitsLeft="0" value="0"/>
</PropertyList>
<RelationshipList/>
</Item>
<Item canGet="false" closeable="false" gender="false" lockable="false" name="Mano derecha de capitán orco" openable="false" type="weapon" unlockable="false" volume="1" weight="1">
<SingularNames>
<Description>mano derecha</Description>
</SingularNames>
<PluralNames>
<Description>mano derecha</Description>
</PluralNames>
<SingularReferenceNames>
<Name>Mano derecha</Name>
<Name>derecha</Name>
<Name>mano</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>Manos derechas</Name>
<Name>derechas</Name>
<Name>manos</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Es una mano.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<WeaponSpecs>
<Attack minUsage="0">
<InvolvedSkills>
<Skill name="desarmado" relevance="1"/>
</InvolvedSkills>
<DamageList>
<Damage formula="1D3-1" type="1"/>
</DamageList>
<Probability steepness="0.0"/>
<Time starting="50" steepness="-1.0"/>
<RecoverTime starting="40" steepness="-1.0"/>
</Attack>
<Defense minUsage="0">
<InvolvedSkills>
<Skill name="desarmado" relevance="1"/>
</InvolvedSkills>
<DamageList>
<Damage formula="1d3-2" type="1"/>
</DamageList>
<Probability steepness="0.0"/>
<Time starting="35.0" steepness="-1.0"/>
<RecoverTime starting="40.0" steepness="-1.0"/>
</Defense>
</WeaponSpecs>
<PropertyList>
<PropertyEntry name="state" timeUnitsLeft="0" value="0"/>
</PropertyList>
<RelationshipList>
<Relationship id="Hacha de guerra">
<PropertyList>
<PropertyEntry name="wields" timeUnitsLeft="0" value="true"/>
</PropertyList>
</Relationship>
</RelationshipList>
</Item>
<Item canGet="true" closeable="false" gender="false" lockable="false" name="Cimitarra" openable="false" type="weapon" unlockable="false" volume="3" weight="7">
<SingularNames>
<Description>cimitarra</Description>
</SingularNames>
<PluralNames>
<Description>cimitarra</Description>
</PluralNames>
<SingularReferenceNames>
<Name>cimitarra</Name>
<Name>espada</Name>
<Name>arma</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>cimitarras</Name>
<Name>espadas</Name>
<Name>armas</Name>
<Name>todo</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Es una espada bien equilibrada y afilada, de empuñadura negra, cuya hoja de acero describe una línea curva.</Description>
</DescriptionList>
<ExtraDescriptionList>
<ExtraDescription>
<Name>hoja</Name>
<DescriptionList>
<Description>Es de acero, curvilínea y letal.</Description>
</DescriptionList>
</ExtraDescription>
</ExtraDescriptionList>
<WeaponSpecs>
<WieldableLimbs>
<Requirement>
<Name>mano derecha</Name>
<Name>mano</Name>
</Requirement>
</WieldableLimbs>
<Attack minUsage="0">
<InvolvedSkills>
<Skill name="espada" relevance="1.0"/>
</InvolvedSkills>
<DamageList>
<Damage formula="1FUE+1D8-4" type="1"/>
</DamageList>
<Probability steepness="0.0"/>
<Time starting="30.0" steepness="-1.0"/>
<RecoverTime starting="30.0" steepness="-1.0"/>
</Attack>
<Defense minUsage="0">
<InvolvedSkills>
<Skill name="espada" relevance="1.0"/>
</InvolvedSkills>
<DamageList>
<Damage formula="1D6" type="1"/>
</DamageList>
<Probability steepness="0.0"/>
<Time starting="20.0" steepness="-1.0"/>
<RecoverTime starting="30.0" steepness="-1.0"/>
</Defense>
</WeaponSpecs>
<PropertyList>
<PropertyEntry name="state" timeUnitsLeft="0" value="0"/>
</PropertyList>
<RelationshipList/>
</Item>
<Item canGet="true" closeable="false" gender="false" lockable="false" name="Garra derecha de demonio" openable="false" type="weapon" unlockable="false" volume="0" weight="0">
<SingularNames>
<Description>garra derecha</Description>
</SingularNames>
<PluralNames/>
<SingularReferenceNames/>
<PluralReferenceNames/>
<DescriptionList/>
<ExtraDescriptionList/>
<WeaponSpecs>
<Attack minUsage="0">
<InvolvedSkills>
<Skill name="garra" relevance="1"/>
</InvolvedSkills>
<DamageList>
<Damage formula="3FUE+1D10" type="1"/>
</DamageList>
<Probability steepness="0"/>
<Time starting="10" steepness="0"/>
<RecoverTime starting="10" steepness="0"/>
</Attack>
<Defense minUsage="0">
<InvolvedSkills>
<Skill name="garra" relevance="1"/>
</InvolvedSkills>
<DamageList>
<Damage formula="3D8" type="1"/>
</DamageList>
<Probability steepness="0"/>
<Time starting="20" steepness="0"/>
<RecoverTime starting="20" steepness="0"/>
</Defense>
</WeaponSpecs>
<PropertyList/>
<RelationshipList/>
</Item>
<Item canGet="true" closeable="false" gender="true" lockable="false" name="Garra izquierda de demonio" openable="false" type="weapon" unlockable="false" volume="0" weight="0">
<SingularNames>
<Description>garra izquierda</Description>
</SingularNames>
<PluralNames/>
<SingularReferenceNames/>
<PluralReferenceNames/>
<DescriptionList/>
<ExtraDescriptionList/>
<WeaponSpecs>
<Attack minUsage="0">
<InvolvedSkills>
<Skill name="garra" relevance="1"/>
</InvolvedSkills>
<DamageList>
<Damage formula="2FUE+1D5" type="1"/>
</DamageList>
<Probability steepness="0"/>
<Time starting="20" steepness="0"/>
<RecoverTime starting="20" steepness="0"/>
</Attack>
<Defense minUsage="0">
<InvolvedSkills>
<Skill name="garra" relevance="1"/>
</InvolvedSkills>
<DamageList>
<Damage formula="5D8" type="1"/>
</DamageList>
<Probability steepness="0"/>
<Time starting="15" steepness="0"/>
<RecoverTime starting="15" steepness="0"/>
</Defense>
</WeaponSpecs>
<PropertyList/>
<RelationshipList/>
</Item>
<Item canGet="false" closeable="false" gender="false" lockable="false" name="cuerda" openable="false" unlockable="false" volume="100" weight="100">
<SingularNames/>
<PluralNames/>
<SingularReferenceNames>
<Name>cuerda</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>cuerdas</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>
<Condition language="BeanShell">!get(item("Lámpara de araña"),"fallen")</Condition>Una gruesa cuerda de la que cuelga la lámpara de araña. Tiene que ser muy fuerte para aguantar ese peso</Description>
<Description>
<Condition language="BeanShell">get(self,"veryveryhot")</Condition>. Pero ahora, las llamas la están consumiendo... ¡y parece que Morluck no se está dando cuenta!</Description>
<Description>
<Condition language="BeanShell">!get(self,"veryveryhot")</Condition>.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<PropertyList>
<PropertyEntry name="veryhot" timeUnitsLeft="-1" value="false"/>
<PropertyEntry name="veryveryhot" timeUnitsLeft="-1" value="false"/>
</PropertyList>
<Code language="BeanShell"><![CDATA[void update ( PropertyEntry pe , World w )

{

    if ( pe.getName().equals("veryhot"))

    {

        //el lago se congela y por lo tanto se "abre".

        self.informActionAuto(self,null,null,"Te das cuenta de que la cuerda que sostiene la araña comienza a arder...\n",false);
        set(self,"veryveryhot",true);
        setTime(self,"veryveryhot",40);
        setTime(self,"veryhot",-1);
        
    }
    
    if ( pe.getName().equals("veryveryhot") )
    {
        self.informActionAuto(self,null,null,"El fuego parte en dos la cuerda que sostiene la araña... ¡La pesada lámpara cae sobre el malvado Morluck!\n",false);
        mobile("Héroe").waitKeyPress();
        mobile("Héroe").writeStory("El brujo, que no se había dado cuenta de lo que se preparaba encima de su cabeza, es aplastado por el peso del gigantesco artefacto... ¡se oye un ahogado grito de dolor, mezclado con el estruendo metálico de la araña al chocar contra el suelo, y Morluck cae aplastado!\n");
        mobile("Morluck").die();
        mobile("Morluck").setRoom(room("Limbo"));
        setTime(self,"veryveryhot",-1);
        set(self,"burnt",true);
        setTime(self,"burnt",-1);
        set(item("Lámpara de araña"),"fallen",true);
    }
      
    

}]]></Code>
<RelationshipList/>
</Item>
<Item canGet="true" closeable="false" gender="true" lockable="false" name="Ramo de flores" openable="false" unlockable="false" volume="1" weight="1">
<SingularNames>
<Description>ramo de rosas</Description>
</SingularNames>
<PluralNames/>
<SingularReferenceNames>
<Name>ramo</Name>
<Name>flores</Name>
<Name>rosas</Name>
<Name>rosa</Name>
<Name>flor</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>todo</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Un ramo de bonitas y olorosas rosas rojas. Muy útil en la guarida de un malvado brujo, sí señor. Utilísimo.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<PropertyList>
<PropertyEntry name="flammable" timeUnitsLeft="0" value="true"/>
</PropertyList>
<Code language="BeanShell"><![CDATA[/*Método de análisis sintáctico de la entrada referida a dos cosas, que no están dentro de otras*/

/*Este método se ejecuta cuando el jugador invoca una orden sobre dos objetos, que no están en contenedores, y el primero de los cuales es éste.

*/

void parseCommandObj1 ( Mobile aCreature , String verb , String args1 , String args2 , Entity obj2  )

{

    

    if ( equals(verb,"dar") )

    {

        if ( equals(obj2, mobile("Tamar")) )

        {

            aCreature.writeStory("Ruborizándote un poco, le das el ramo de flores a la bella Tamar...\n");

            mobile("Tamar").say("¡Ohh... qué bonito, qué detalle!");

            aCreature.waitKeyPress();

            aCreature.writeStory("Tamar te besa apasionadamente...\n");

            aCreature.waitKeyPress();

            aCreature.writeStory("Unas horas después, los dos aparecéis en el pueblo, cogidos de la mano. Tamar les cuenta a todos lo buen mago que eres y lo valiente que has sido; y todos te muestran su admiración y organizan una fiesta en vuestro honor. Poco tiempo después, te casas con Tamar. Sois felices y coméis perdices y bogavante.\n\nFIN\n\n");   

            set(aCreature,"winrar",true);

            aCreature.setRoom(room("Limbo"));

        }

    }

	

	//aCreature: criatura que introduce un comando.

	//verb: comando que introduce, por ejemplo "afilar"

	//args1: parte de la orden que se refiere a un primer objeto (que es este objeto), por ejemplo "el cuchillo".

	//args2: parte de la orden que se refiere a un segundo objeto, por ejemplo "con el afilador"

	//obj2: segundo objeto al que se refiere la acción del jugador (en el ejemplo, el objeto afilador).



	

	//terminar con end(): interceptamos la frase, no se ejecuta lo que se tenga que ejecutar

	//por defecto ante ella

	//terminar normal: después de nuestro procesado, se lleva a cabo el análisis normal del

	//comando y ejecución de la acción correspondiente

	

}]]></Code>
<RelationshipList/>
</Item>
<Item canGet="true" closeable="false" gender="true" lockable="false" name="Libro de magia antimagia" openable="false" unlockable="false" volume="50" weight="50">
<SingularNames>
<Description>
<Condition language="BeanShell">!get(self,"originalPos") &amp;&amp; !get(self,"identified")</Condition>libro raído</Description>
<Description>
<Condition language="BeanShell">!get(self,"originalPos") &amp;&amp; get(self,"identified")</Condition>libro de Magia Antimagia</Description>
</SingularNames>
<PluralNames/>
<SingularReferenceNames>
<Name>libro de antimagia</Name>
<Name>tomo de antimagia</Name>
<Name>tomo raído</Name>
<Name>tomo</Name>
<Name>libro raído</Name>
<Name>libro</Name>
<Name>tomar</Name>
<Name>coger</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>libros de antimagia</Name>
<Name>tomos de antimagia</Name>
<Name>tomos raídos</Name>
<Name>libros raídos</Name>
<Name>tomos</Name>
<Name>libros</Name>
<Name>todo</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Un libro marrón, grueso, polvoriento y de portada raída, sin título ni otra información visible en ella.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<PropertyList>
<PropertyEntry name="originalPos" timeUnitsLeft="0" value="true"/>
<PropertyEntry name="identified" timeUnitsLeft="0" value="false"/>
<PropertyEntry name="flammable" timeUnitsLeft="0" value="true"/>
</PropertyList>
<Code language="BeanShell"><![CDATA[/*Método de análisis sintáctico de la entrada referida a una o dos cosas, que no están dentro de otras*/
/*Este método se ejecuta cuando el jugador invoca una orden sobre uno o dos objetos que no están dentro de un contenedor, uno de los cuales es éste.
*/
void parseCommandGeneric ( Mobile aCreature , String verb , String args1 , String args2 , Entity obj1 , Entity obj2 ,  boolean goesFirst )
{
	
	//aCreature: criatura que introduce un comando.
	//verb: comando que introduce, por ejemplo "afilar"
	//args1: parte de la orden que se refiere a un primer objeto, por ejemplo "el cuchillo"
	//args2: parte de la orden que se refiere a un segundo objeto, por ejemplo "con el afilador". La cadena vacía si no hay segundo objeto.
	//obj1: primer objeto al que se refiere la acción del jugador (en el ejemplo, el objeto cuchillo).
	//obj2: segundo objeto al que se refiere la acción del jugador (en el ejemplo, el objeto afilador). Valdrá null si no hay segundo objeto.
	//goesFirst: si vale true, es que el primer objeto (obj1) es éste (self) o está contenido en éste.
		//Si vale false, es que el segundo objeto (obj2) es éste (self) o está contenido en éste.
	
    if ( equals(verb,"empujar") || equals(verb,"mover") || equals(verb,"desplazar") || equals(verb,"acercar") || equals(verb,"alejar") || equals(verb,"apartar") )
    {
        if ( !get(self,"originalPos") )
        {
            aCreature.writeDenial("Ya no es necesario empujar más el libro.\n");
            end();
        }
        if ( obj2 == null )
        {
            aCreature.writeDenial("¿Con qué quieres " + verb + " el libro?\n");
            end();
        }
        else
        {
            if ( equals(obj2,get("Bastón de combate")) && aCreature.hasItem(get("Bastón de combate")) )
            {
                aCreature.writeAction("Utilizando tu bastón, mueves el libro sin tocar la sospechosa losa, hasta quitarlo de la misma.\n");
                set(self,"originalPos",false);
                end();
            }
            else if ( aCreature.hasItem(obj2) )
            {
                aCreature.writeDenial("Para empujar el libro sin tocar la losa necesitarías un objeto más largo.\n");
                end();
            }
        }
        
    }

	
	//terminar con end(): interceptamos la frase, no se ejecuta lo que se tenga que ejecutar
	//por defecto ante ella
	//terminar normal: después de nuestro procesado, se lleva a cabo el análisis normal del
	//comando y ejecución de la acción correspondiente
	
}






/*Método de análisis sintáctico de la entrada referida a una cosa*/

void parseCommand( Mobile aCreature , String verb , String args )

{

	

	if ( equals ( verb , "coger" ) )

    {

        if ( get(self,"originalPos") )

        {
            
            if ( args.indexOf("sin") >= 0 && args.indexOf("losa") >= 0 )
            {
                aCreature.writeDenial("La losa sobre la que reposa el libro es demasiado grande para poder cogerlo sin pisarla. Tal vez si pudieras mover el libro desde más lejos...\n");
                end();
            }
            else
            {
                aCreature.writeAction("Te dispones a coger el libro, pero en cuanto pisas la gran losa sobre la que se encuentra, ésta se hunde en el suelo con un ruido sordo...\n");

                aCreature.waitKeyPress();

                aCreature.writeAction("¡El techo entero de la sala se derrumba sobre ti, golpeándote violentamente en la cabeza!\n");

                aCreature.die();
                
                aCreature.setRoom(room("Limbo"));

                end();   
            }
        }

    }
    
    if ( equals ( verb , "leer" ) )
    {
        
        if ( !aCreature.hasItem(self) )
        {
            aCreature.writeDenial("Primero tendrías que tenerlo en tus manos...\n");
            end();   
        }
        
        if ( !get(self,"identified") )
        {
            
            set(self,"identified",true);   
            
            aCreature.writeAction("Al abrir el raído tomo, una nube de polvo te hace toser. ¡Según la primera página, se trata de un libro sobre hechizos de magia antimagia!\n");
            aCreature.writeStory("Tal vez esto te pueda enseñar algunos conjuros útiles... dedicas un tiempo a leerlo con detalle...\n");
            aCreature.waitKeyPress();
            aCreature.writeStory("Te das cuenta de que, al fin y al cabo, los hechizos mágicos son bastante interesantes. ¡Ay, si hubieses atendido más en las clases!\n");
            aCreature.writeStory("Se denomina \"magia antimagia\" a toda aquella que trate de detectar, analizar o anular magia ajena.\n");
            aCreature.writeStory("El libro te enseña cómo conjurar los siguientes hechizos de magia antimagia:\n");
            aCreature.writeStory("DETECTAR MAGIA, que se puede lanzar al aire (conjurar detectar magia) o bien sobre algo (conjurar detectar magia sobre X) y permite"
                + " conocer los efectos mágicos que estén actuando sobre una zona u objeto.\n");
            aCreature.writeStory("DESENCANTAR, que se lanza siempre sobre algo (conjurar desencantar sobre X) y permite"
                + " anular los encantamientos y efectos mágicos que haya sobre ese objeto... siempre que no sean conjuros demasiado poderosos para el mago que" +
                " desencanta, claro.\n" );
            aCreature.writeStory("CONTRAHECHIZO, que se lanza sobre un mago (conjurar contrahechizo sobre X), y sirve para anular un conjuro que el mago está lanzando. Es un hechizo que debe lanzarse"
                + " rápidamente, mientras el rival está en trance de ejecutar el suyo, para que llegue a tiempo a contrarrestarlo.\n");
            aCreature.addSpell(get("Detectar magia"));
            aCreature.addSpell(get("Desencantar"));
            aCreature.addSpell(get("Contrahechizo"));
            aCreature.setSkill("antimagia",190);
            
            end();
        }
        else
        {
            aCreature.writeInformation("Ya has aprendido toda la teoría de los hechizos de este libro, sólo la práctica puede ayudarte ahora a usarlos mejor.\n");
            aCreature.writeInformation("Repasas los usos de los hechizos:\n");
            aCreature.writeStory("DETECTAR MAGIA, que se puede lanzar al aire (conjurar detectar magia) o bien sobre algo (conjurar detectar magia sobre X) y permite"
                + " conocer los efectos mágicos que estén actuando sobre una zona u objeto.\n");
            aCreature.writeStory("DESENCANTAR, que se lanza siempre sobre algo (conjurar desencantar sobre X) y permite"
                + " anular los encantamientos y efectos mágicos que haya sobre ese objeto... siempre que no sean conjuros demasiado poderosos para el mago que" +
                " desencanta, claro.\n" );
            aCreature.writeStory("CONTRAHECHIZO, que se lanza sobre un mago (conjurar contrahechizo sobre X), y sirve para anular un conjuro que el mago está lanzando. Es un hechizo que debe lanzarse"
                + " rápidamente, mientras el rival está en trance de ejecutar el suyo, para que llegue a tiempo a contrarrestarlo.\n");
                
            end();
        }
        
    }

	

}]]></Code>
<RelationshipList/>
</Item>
<Item canGet="false" closeable="false" gender="true" lockable="false" name="Lago" openable="false" unlockable="false" volume="0" weight="0">
<SingularNames/>
<PluralNames/>
<SingularReferenceNames>
<Name>lago</Name>
<Name>agua</Name>
<Name>río</Name>
<Name>ríos</Name>
<Name>lago subterráneo</Name>
<Name>lago subterraneo</Name>
<Name>superficie</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>lagos</Name>
<Name>aguas</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>
<Condition language="BeanShell">self.isClosed()</Condition>Un lago subterráneo de aguas negras, que divide la caverna de norte a sur. Tiene una anchura de unos diez metros, que tendrías que nadar o vadear para cruzar al otro lado.</Description>
<Description>
<Condition language="BeanShell">self.isOpen()</Condition>Un lago subterráneo completamente helado, de unos diez metros de anchura, que divide la caverna de norte a sur.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<PropertyList>
<PropertyEntry name="closed" timeUnitsLeft="0" value="true"/>
</PropertyList>
<Code language="BeanShell"><![CDATA[void update ( PropertyEntry pe , World w )

{

    

    if ( pe.getName().equals("verycold"))

    {

        //el lago se congela y por lo tanto se "abre".

        

        if ( get(self,"closed") == true )

        {

            self.informActionAuto(self,null,null,"¡El lago subterráneo se congela, volviéndose hielo sólido!\n",false);

            set(self,"closed",false);

            setTime(self,"closed",10000);

        }

        else

        {

            self.informActionAuto(self,null,null,"El hielo del lago parece ahora algo más sólido.\n",false);

            set(self,"closed",false);

            setTime(self,"closed",10000);  

        }

    }

    

    if ( pe.getName().equals("closed") )

    {

        self.informActionAuto(self,null,null,"El hielo del lago termina de derretirse y resquebrajarse, dando paso de nuevo a las negras aguas.\n",false);

        set(self,"closed",true);

        //setTime(self,"closed",-1);

    }

    

}]]></Code>
<RelationshipList/>
</Item>
<Item canGet="false" closeable="false" gender="false" lockable="false" name="Lámpara de araña" openable="false" unlockable="false" volume="1000" weight="1500">
<SingularNames/>
<PluralNames/>
<SingularReferenceNames>
<Name>lámpara de araña</Name>
<Name>lámpara</Name>
<Name>araña</Name>
<Name>lampara</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>lámparas de araña</Name>
<Name>lámparas</Name>
<Name>arañas</Name>
<Name>lamparas</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>
<Condition language="BeanShell">!get(self,"fallen")</Condition>Una enorme lámpara de araña, metálica, que debe de pesar una tonelada, unida al techo por una gruesa cuerda. Está justo encima de donde se encuentra Morluck.</Description>
<Description>
<Condition language="BeanShell">get(self,"fallen")</Condition>Una enorme lámpara de araña, metálica, que debe de pesar una tonelada. Se encuentra en el suelo, rota, sobre los sanguinolentos restos de Morluck.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<PropertyList>
<PropertyEntry name="fallen" timeUnitsLeft="-1" value="false"/>
</PropertyList>
<RelationshipList/>
</Item>
<Item canGet="true" closeable="false" gender="true" lockable="false" name="Garrote tosco" openable="false" type="weapon" unlockable="false" volume="3" weight="7">
<SingularNames>
<Description>garrote tosco</Description>
</SingularNames>
<PluralNames>
<Description>garrote tosco</Description>
</PluralNames>
<SingularReferenceNames>
<Name>Garrote tosco</Name>
<Name>garrote</Name>
<Name>arma</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>Garrotes toscos</Name>
<Name>garrotes</Name>
<Name>armas</Name>
<Name>todo</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Es uno de los típicos garrotes rudimentarios con pinchos que utilizan los goblins.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<WeaponSpecs>
<WieldableLimbs>
<Requirement>
<Name>mano derecha</Name>
<Name>mano</Name>
</Requirement>
</WieldableLimbs>
<Attack minUsage="0">
<InvolvedSkills>
<Skill name="contundente" relevance="1.0"/>
</InvolvedSkills>
<DamageList>
<Damage formula="1D8-1" type="1"/>
</DamageList>
<Probability steepness="0.0"/>
<Time starting="25.0" steepness="-1.0"/>
<RecoverTime starting="25.0" steepness="-1.0"/>
</Attack>
<Defense minUsage="0">
<InvolvedSkills>
<Skill name="contundente" relevance="1.0"/>
</InvolvedSkills>
<DamageList>
<Damage formula="1D6" type="1"/>
</DamageList>
<Probability steepness="0.0"/>
<Time starting="25.0" steepness="-1.0"/>
<RecoverTime starting="30.0" steepness="-1.0"/>
</Defense>
</WeaponSpecs>
<PropertyList>
<PropertyEntry name="state" timeUnitsLeft="0" value="0"/>
</PropertyList>
<RelationshipList/>
</Item>
<Item canGet="true" closeable="false" gender="true" lockable="false" name="Hacha de guerra" openable="false" type="weapon" unlockable="false" volume="10" weight="20">
<SingularNames>
<Description>hacha de guerra</Description>
</SingularNames>
<PluralNames>
<Description>hachas de guerra</Description>
</PluralNames>
<SingularReferenceNames>
<Name>hacha de guerra</Name>
<Name>hacha</Name>
<Name>arma</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>hachas de guerra</Name>
<Name>hachas</Name>
<Name>armas</Name>
<Name>todo</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Un hacha con mango de metro y medio de largo, y una grande y pesada hoja de acero. Está hecha para uso de alguien mucho más grande y corpulento que un ser humano corriente.</Description>
</DescriptionList>
<ExtraDescriptionList>
<ExtraDescription>
<Name>hoja</Name>
<DescriptionList>
<Description>Una pesada hoja de acero.</Description>
</DescriptionList>
</ExtraDescription>
</ExtraDescriptionList>
<WeaponSpecs>
<WieldableLimbs>
<Requirement>
<Name>mano derecha</Name>
<Name>mano</Name>
</Requirement>
</WieldableLimbs>
<Attack minUsage="0">
<InvolvedSkills>
<Skill name="hacha" relevance="1.0"/>
</InvolvedSkills>
<DamageList>
<Damage formula="1FUE+2D8-4" type="1"/>
</DamageList>
<Probability steepness="0.0"/>
<Time starting="30.0" steepness="-1.0"/>
<RecoverTime starting="30.0" steepness="-1.0"/>
</Attack>
<Defense minUsage="0">
<InvolvedSkills>
<Skill name="hacha" relevance="1.0"/>
</InvolvedSkills>
<DamageList>
<Damage formula="1D6" type="1"/>
</DamageList>
<Probability steepness="0.0"/>
<Time starting="20.0" steepness="-1.0"/>
<RecoverTime starting="30.0" steepness="-1.0"/>
</Defense>
</WeaponSpecs>
<PropertyList>
<PropertyEntry name="state" timeUnitsLeft="0" value="0"/>
</PropertyList>
<RelationshipList/>
</Item>
</Items>
<Mobiles>
<Mobile gender="true" hp="100" maxhp="100" maxmp="0" mp="0" name="Zuno(copy)">
<SingularNames>
<Description>zuno</Description>
</SingularNames>
<PluralNames>
<Description>zunos</Description>
</PluralNames>
<SingularReferenceNames>
<Name>zuno joven</Name>
<Name>zuno</Name>
<Name>simio</Name>
<Name>mono</Name>
<Name>bicho</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>zunos jóvenes</Name>
<Name>zunos</Name>
<Name>simios</Name>
<Name>monos</Name>
<Name>bichos</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Un simio pequeño y ágil, de pelaje naranja. Los zunos son una de las especies de monos más peligrosas que existen, inteligentes y despiadados. Este ejemplar parece más bien joven.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<PropertyList>
<PropertyEntry name="state" timeUnitsLeft="1" value="1"/>
</PropertyList>
<Code language="BeanShell"><![CDATA[//nay! source("world.getWorldPath()"+"entrenador.bsh");
  			
  				void infoIntentoAtaque ( Mobile objetivo )
  				{
  					Weapon w = self.getCurrentWeapon();
  					String wName = w.constructName2OneItem();
  					//System.out.println("Weapon name: " + wName);
  					//System.out.println("Weapon ID: " + w.getID());
  					Random r = self.getRandom();
  					int k = r.nextInt() % 4;
  					if ( ( k % 4 ) == 0 )
  					{
  						self.getRoom().informAction(self,null,"$1 gruñe salvajemente.\n","$1 gruñe salvajemente.\n","Gruñes salvajemente.\n",true);
  					}
  					self.getRoom().informAction(self,objetivo,"$1 salta furiosamente sobre $2...\n","$1 salta furiosamente sobre ti...\n","Saltas furiosamente sobre $2...\n",true);
  					end();
  				}
  			
  				void infoAcierto ( Mobile objetivo , int danyo )
  				{
  					//where did autoboxing go?
  					//int danyo = danyoWrap.intValue();
  					Weapon w = self.getCurrentWeapon();
  					String wName = w.constructName2OneItem();
  					if ( wName.indexOf("garra")>= 0 )
  					{
	  					if ( danyo > 0 )
	  					{
		  					self.getRoom().informAction ( self , objetivo ,
		  									"$1 clava " + wName + " en la carne de $2, infligiéndole " + objetivo.estimateDamage(danyo) + "...\n" ,
		  									"$1 te clava " + wName + " en la carne, desgarrando e infligiéndote " + objetivo.estimateDamage(danyo) + "...\n" ,
		  									"Clavas " + wName + " en la carne de $2, infligiéndole " + objetivo.estimateDamage(danyo) + "...\n" ,
											true );
	  					}
	  					else
	  					{
	  					
	  					
	  						  self.getRoom().informAction ( self , objetivo ,
								"$1 acierta a $2 con " + wName + " sin dañarlo" + "...\n" ,
								"$1 te acierta con " + wName + "; pero no consigue hacerte daño" + "...\n" ,
								"Aciertas a $2 con " + wName + "; pero no consigues hacerle daño" + "...\n" ,
								true );
	  					}
	  					if ( danyo*10 > objetivo.getMaxHP()  )
	  					{
	  						Random r = self.getRandom();
	  						
	  						int rint = r.nextInt() % 3;
	  						switch ( rint )
	  						{
	  							case 0:
	  								self.say("¡Grrrrrrrrrr!");
	  								break;
	  							case 1:
	  								self.say("¡Rrrrrr!");
	  								break;
	  							case 2:
	  								self.say("¡Ghrrrrhrrr!");
	  								break;
	  						}
	  						
	  					}
	  					if ( objetivo.getHP() <= 0 )
	  						  self.getRoom().informAction(self,null,"$1 gruñe, satisfecho.\n","$1 gruñe, satisfecho.\n","Emites un gruñido de satisfacción.\n",true);				
	  					else if ( objetivo.getHP() * 5 < objetivo.getMaxHP()  )
	  						  self.getRoom().informAction(self,null,"$1 gruñe, excitado.\n","$1 gruñe, excitado.\n","Emites un gruñido de excitación.\n",true);		
	  					end();
  					}
  				}
  				
  				void beforeDie()
  				{
  					
  					//award vencioZuno to all present Mobiles (players,etc.)
  					
  					Room r = self.getRoom();
  					MobileList m = r.getMobiles();
  					for ( int i = 0 ; i < m.size() ; i++ )
  					{
  						Mobile mob = m.elementAt(i);
  						mob.setProperty ( "vencioZuno" , true );
  					}
  					
  				}]]></Code>
<Traits>
<SkillList>
<Skill name="garra" value="1000"/>
<Skill name="cuerpo a cuerpo" value="1000"/>
</SkillList>
</Traits>
<Inventory/>
<RelationshipList/>
</Mobile>
<Mobile gender="true" hp="100" maxhp="100" maxmp="0" mp="0" name="Bestia menor(copy)">
<SingularNames>
<Description>bestia menor</Description>
</SingularNames>
<PluralNames>
<Description>bestia menor</Description>
</PluralNames>
<SingularReferenceNames>
<Name>bestia menor</Name>
<Name>bestia</Name>
<Name>bicho</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>bestias menores</Name>
<Name>bestias</Name>
<Name>bichos</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Una pequeña criatura peluda, de horribles y puntiagudas garras y penetrantes ojos rojos. Nada agradable de ver.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<PropertyList>
<PropertyEntry name="state" timeUnitsLeft="1" value="1"/>
</PropertyList>
<Code language="BeanShell"><![CDATA[//nay! source(world.getWorldPath()+"entrenador.bsh");
  			
  				void infoIntentoAtaque ( Mobile objetivo )
  				{
  					Weapon w = self.getCurrentWeapon();
  					String wName = w.constructName2OneItem();
  					//System.out.println("Weapon name: " + wName);
  					//System.out.println("Weapon ID: " + w.getID());
  					Random r = self.getRandom();
  					int k = r.nextInt() % 4;
  					if ( ( k % 4 ) == 0 )
  					{
  						self.getRoom().informAction(self,null,"$1 lanza un rugido estremecedor.\n","$1 lanza un rugido estremecedor.\n","Lanzas un rugido estremecedor.\n",true);
  					}
  					self.getRoom().informAction(self,objetivo,"$1 se abalanza babeando sobre $2...\n","$1 se abalanza babeando sobre ti...\n","Te abalanzas babeando sobre $2...\n",true);
  					end();
  				}
  			
  				void infoAcierto ( Mobile objetivo , int danyo )
  				{
  					Weapon w = self.getCurrentWeapon();
  					String wName = w.constructName2OneItem();
  					if ( wName.indexOf("garra")>= 0 )
  					{
	  					if ( danyo > 0 )
	  					{
		  					self.getRoom().informAction ( self , objetivo ,
		  									"$1 clava " + wName + " en la carne de $2, infligiéndole " + objetivo.estimateDamage(danyo) + "...\n" ,
		  									"$1 te clava " + wName + " en la carne, desgarrando e infligiéndote " + objetivo.estimateDamage(danyo) + "...\n" ,
		  									"Clavas " + wName + " en la carne de $2, infligiéndole " + objetivo.estimateDamage(danyo) + "...\n" ,
											true );
	  					}
	  					else
	  					{
	  					
	  					
	  						  self.getRoom().informAction ( self , objetivo ,
								"$1 acierta a $2 con " + wName + " sin dañarlo" + "...\n" ,
								"$1 te acierta con " + wName + "; pero no consigue hacerte daño" + "...\n" ,
								"Aciertas a $2 con " + wName + "; pero no consigues hacerle daño" + "...\n" ,
								true );
	  					}
	  					if ( danyo*10 > objetivo.getMaxHP()  )
	  					{
	  						Random r = self.getRandom();
	  						
	  						int rint = r.nextInt() % 3;
	  						switch ( rint )
	  						{
	  							case 0:
	  								self.say("¡GRRRAHHHH!");
	  								break;
	  							case 1:
	  								self.say("¡ARRRGHNGHRR!");
	  								break;
	  							case 2:
	  								self.say("¡GNAAAHRRRR!");
	  								break;
	  						}
	  						
	  					}
	  					if ( objetivo.getHP() <= 0 )
	  						  self.getRoom().informAction(self,null,"$1 mira al cielo y aúlla, satisfecha.\n","$1 mira al cielo y aúlla, satisfecha.\n","Miras al cielo y aúllas, satisfecha.\n",true);				
	  					else if ( objetivo.getHP() * 5 < objetivo.getMaxHP()  )
	  						  self.getRoom().informAction(self,null,"$1 brilla con un aura verde...\n","$1 brilla con un aura verde...\n","Brillas con un aura verde...\n",true);		
	  					end();
  					}
  				}
  				
  				void afterDie ( Item cadaver )
  				{
  					cadaver.getRoomReferences().get(0).removeItem(cadaver);
  					cadaver.getRoomReferences().get(0).informActionAuto(cadaver,null,null,"$1 se va volviendo transparente rápidamente hasta que desaparece.",false);
  					this.setNewState(Mobile.IDLE,1);
  					this.setRoom(world.getRoom("Limbo"));	
  				}]]></Code>
<Traits>
<SkillList>
<Skill name="garra" value="600"/>
<Skill name="cuerpo a cuerpo" value="600"/>
</SkillList>
</Traits>
<Inventory/>
<RelationshipList/>
</Mobile>
<Mobile gender="true" hp="15" maxhp="15" maxmp="0" mp="0" name="Guardia goblin">
<SingularNames>
<Description>guardia goblin</Description>
</SingularNames>
<PluralNames>
<Description>guardias goblin</Description>
</PluralNames>
<SingularReferenceNames>
<Name>Guardia goblin</Name>
<Name>goblin</Name>
<Name>guardia</Name>
<Name>trasgo</Name>
<Name>bicho</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>Guardias goblin</Name>
<Name>goblins</Name>
<Name>guardias</Name>
<Name>trasgos</Name>
<Name>bichos</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Un repugnante goblin: se trata de una criatura humanoide de poco más de un metro de alto, verde y muy fea.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<PropertyList>
<PropertyEntry name="state" timeUnitsLeft="1" value="1"/>
</PropertyList>
<Code language="BeanShell"><![CDATA[include("lib/attacker.bsh");
include(world.getResource("pursuer.bsh"));

void afterDie ( Item corpse )
{
    Mobile player = get("Héroe");
    if ( player.getHP() * 3 > player.getMaxHP()*2 )
    {
        player.writeStory("Por un momento, te alivias pensando que has salido vivo del primer combate: y no ha sido tan difícil...\n");
        player.waitKeyPress();
        player.writeStory("...pero era sólo un goblin, una criatura pequeña y débil. Te estremeces"
        +" sólo de pensar en los orcos que sirven a Morluck.\n");   
    }
    else
    {
        player.writeStory("Por un momento, te alivias pensando que has salido vivo del primer combate: pero no sin heridas...\n"); 
        player.waitKeyPress();
        player.writeStory("...y era sólo un goblin, una criatura pequeña y débil. Te estremeces sólo de pensar en los orcos que te esperan en lo " +
        "más profundo de la guarida de Morluck.\n");
    }
    corpse.getContents().addItem(get("Cilindro de piedra"));
    corpse.getContents().addItem(get("Garrote tosco"));
}

void infoOnAttack ( Mobile target )
{
    Random r = self.getRandom();
    int k = r.nextInt() % 3;
    if ( k % 3 == 0 )
    {
        self.getRoom().informAction(self,null,"$1 lanza un gruñido de rabia.\n","$1 lanza un gruñido de rabia.\n","Lanzas un gruñido de rabia.\n",true);
    }
    else if ( k % 3 == 1 )
    {
        self.getRoom().informAction(self,null,"$1 grita con voz grimosa y aguda.\n","$1 grita con voz grimosa y aguda.\n","Lanzas un grito de guerra.\n",true);
    }
}

void infoOnHit ( Mobile target , int damage )
{
    Random r = self.getRandom();
    int k = r.nextInt() % 3;
    if ( k % 3 == 0 )
    {
        self.getRoom().informAction(self,null,"$1 hace una repugnante mueca burlona.\n","$1 hace una repugnante mueca burlona.\n","Haces una mueca burlona.\n",true);
    }   
}]]></Code>
<Traits>
<SkillList>
<Skill name="contundente" value="60"/>
</SkillList>
</Traits>
<Inventory>
<ItemRef id="Garrote tosco"/>
</Inventory>
<Parts>
<Inventory>
<ItemRef id="Mano derecha"/>
</Inventory>
</Parts>
<RelationshipList>
<Relationship id="Garrote tosco">
<PropertyList>
<PropertyEntry name="wields" timeUnitsLeft="0" value="true"/>
</PropertyList>
</Relationship>
<Relationship id="Mano derecha">
<PropertyList/>
</Relationship>
</RelationshipList>
<CurrentRoom id="Sala del goblin"/>
<LastRoom id="Sala del goblin"/>
</Mobile>
<Mobile gender="true" hp="100" maxhp="100" maxmp="0" mp="0" name="Soldado goblin(copy)">
<SingularNames>
<Description>Soldado goblin</Description>
</SingularNames>
<PluralNames>
<Description>Soldados goblin</Description>
</PluralNames>
<SingularReferenceNames>
<Name>Soldado goblin</Name>
<Name>goblin</Name>
<Name>soldado</Name>
<Name>trasgo</Name>
<Name>bicho</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>Soldados goblin</Name>
<Name>goblins</Name>
<Name>soldados</Name>
<Name>trasgos</Name>
<Name>bichos</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Un goblin verde y feo. Ugh.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<PropertyList>
<PropertyEntry name="state" timeUnitsLeft="1" value="1"/>
</PropertyList>
<Code language="BeanShell"><![CDATA[void infoIntentoAtaque ( Mobile objetivo )
  				{
  					self.getRoom().informAction(self,null,"$1 emite un rugido de furia.\n","$1 emite un rugido de furia.\n","Emites un rugido de furia.\n",false);
  				}]]></Code>
<Traits>
<SkillList>
<Skill name="contundente" value="1000"/>
</SkillList>
</Traits>
<Inventory/>
<RelationshipList/>
</Mobile>
<Mobile gender="true" hp="150" maxhp="150" maxmp="0" mp="0" name="Capitán orco">
<SingularNames>
<Description>capitán orco</Description>
</SingularNames>
<PluralNames>
<Description>capitanes orcos</Description>
</PluralNames>
<SingularReferenceNames>
<Name>capitán orco</Name>
<Name>capitan orco</Name>
<Name>capitán</Name>
<Name>capitan</Name>
<Name>orco</Name>
<Name>ogro</Name>
<Name>bicho</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>capitanes orcos</Name>
<Name>orcos</Name>
<Name>capitanes</Name>
<Name>ogros</Name>
<Name>bichos</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Un gigantesco orco: una criatura humanoide verdosa, enormemente corpulenta, de afilados dientes, y con mirada asesina. Una máquina de matar.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<PropertyList>
<PropertyEntry name="state" timeUnitsLeft="1" value="1"/>
</PropertyList>
<Code language="BeanShell"><![CDATA[include("lib/attacker.bsh");

void afterDie ( Item corpse )
{
    corpse.getContents().addItem(get("Cimitarra"));
    corpse.getContents().addItem(get("Escudo cuadrado metálico"));
    set(get("Antesala").getPath(true,Path.SOUTH),"closed",false);
}

void infoOnAttack ( Mobile target )
{
    Random r = self.getRandom();
    int k = r.nextInt() % 3;
    if ( k % 3 == 0 )
    {
        self.getRoom().informAction(self,null,"$1 grita con atronadora voz: ¡Vas a morir, bastardo!\n","$1 grita con atronadora voz: ¡Vas a morir, bastardo!\n","Gritas con atronadora voz: ¡Vas a morir, bastardo!\n",true);
    }
    else if ( k % 3 == 1 )
    {
        self.getRoom().informAction(self,null,"$1 lanza un agresivo grito: ¡RRRAAAAAHH!\n","$1 lanza un agresivo grito: ¡RRRAAAAAHH!\n","Lanzas un agresivo grito: ¡RRRAAAAAHH!\n",true);
    }
}

void infoOnHit ( Mobile target , int damage )
{
    Random r = self.getRandom();
    int k = r.nextInt() % 3;
    if ( k % 3 == 0 )
    {
        self.getRoom().informAction(self,null,"$1 se regodea en el sabor de la sangre...\n","$1 se regodea en el sabor de la sangre...\n","Te regodeas en el sabor de la sangre.\n",true);
    }   
}]]></Code>
<Traits>
<SkillList>
<Skill name="escudo" value="200"/>
<Skill name="STR" value="30"/>
<Skill name="espada" value="200"/>
<Skill name="hacha" value="200"/>
</SkillList>
</Traits>
<Inventory/>
<Parts>
<Inventory>
<ItemRef id="Mano derecha de capitán orco"/>
<ItemRef id="Mano izquierda de capitán orco"/>
</Inventory>
</Parts>
<RelationshipList>
<Relationship id="Mano derecha de capitán orco">
<PropertyList/>
</Relationship>
<Relationship id="Mano izquierda de capitán orco">
<PropertyList/>
</Relationship>
</RelationshipList>
<CurrentRoom id="Antesala"/>
<LastRoom id="Antesala"/>
</Mobile>
<Mobile gender="true" hp="100" maxhp="100" maxmp="0" mp="0" name="Guardia orco">
<SingularNames>
<Description>guardia orco</Description>
</SingularNames>
<PluralNames>
<Description>guardias orcos</Description>
</PluralNames>
<SingularReferenceNames>
<Name>guardia orco</Name>
<Name>orco</Name>
<Name>guardia</Name>
<Name>ogro</Name>
<Name>bicho</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>guardias orcos</Name>
<Name>orcos</Name>
<Name>guardias</Name>
<Name>ogros</Name>
<Name>bichos</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Un corpulento y repugnante orco: un ser humanoide de piel verdosa, anchos hombros y feo rostro; con afilados dientes y ojos inyectados en sangre.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<PropertyList>
<PropertyEntry name="state" timeUnitsLeft="1" value="1"/>
</PropertyList>
<Code language="BeanShell"><![CDATA[include("lib/attacker.bsh");

void afterDie ( Item corpse )
{
    corpse.getContents().addItem(get("Cimitarra"));
    corpse.getContents().addItem(get("Escudo circular metálico"));
    set(get("Sala del orco").getPath(true,Path.NORTH),"closed",false);
}

void infoOnAttack ( Mobile target )
{
    Random r = self.getRandom();
    int k = r.nextInt() % 3;
    if ( k % 3 == 0 )
    {
        self.getRoom().informAction(self,null,"$1 lanza un escalofriante grito de guerra: ¡WAAARRRGHL!\n","$1 lanza un escalofriante grito de guerra: ¡WAAARRRGHL!\n","Lanzas un escalofriante grito de guerra: ¡WAAAARRRGHL!\n",true);
    }
    else if ( k % 3 == 1 )
    {
        self.getRoom().informAction(self,null,"$1 gruñe como un cerdo.\n","$1 gruñe como un cerdo.\n","Gruñes como un cerdo.\n",true);
    }
}

void infoOnHit ( Mobile target , int damage )
{
    Random r = self.getRandom();
    int k = r.nextInt() % 3;
    if ( k % 3 == 0 )
    {
        self.getRoom().informAction(self,null,"$1 se burla con una tosca risa animal.\n","$1 se burla con una tosca risa animal.\n","Te burlas.\n",true);
    }   
}]]></Code>
<Traits>
<SkillList>
<Skill name="escudo" value="200"/>
<Skill name="STR" value="25"/>
<Skill name="espada" value="200"/>
</SkillList>
</Traits>
<Inventory/>
<Parts>
<Inventory>
<ItemRef id="Mano izquierda de guardia orco"/>
<ItemRef id="Mano derecha de guardia orco"/>
</Inventory>
</Parts>
<RelationshipList>
<Relationship id="Mano izquierda de guardia orco">
<PropertyList/>
</Relationship>
<Relationship id="Mano derecha de guardia orco">
<PropertyList/>
</Relationship>
</RelationshipList>
<CurrentRoom id="Sala del orco"/>
<LastRoom id="Sala del orco"/>
</Mobile>
<Mobile gender="true" hp="500" maxhp="500" maxmp="0" mp="0" name="Demonio alado">
<SingularNames>
<Description>demonio alado</Description>
</SingularNames>
<PluralNames>
<Description>demonio alado</Description>
</PluralNames>
<SingularReferenceNames>
<Name>demonio alado</Name>
<Name>demonio</Name>
<Name>bicho</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>demonios alados</Name>
<Name>demonios</Name>
<Name>bichos</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Un terrorífico demonio negro de alas membranosas y puntiagudos cuernos.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<PropertyList>
<PropertyEntry name="state" timeUnitsLeft="1" value="1"/>
</PropertyList>
<Code language="BeanShell"><![CDATA[void infoOnHit ( Mobile objetivo , int danyo )
  				{
  					Weapon w = self.getCurrentWeapon();
  					String wName = w.constructName2OneItem();
  					if ( wName.indexOf("garra")>= 0 )
  					{
	  					if ( danyo > 0 )
	  					{
		  					self.getRoom().informAction ( self , objetivo ,
		  									"$1 clava " + wName + " en la carne de $2, infligiéndole " + objetivo.estimateDamage(danyo) + "...\n" ,
		  									"$1 te clava " + wName + " en la carne, desgarrando e infligiéndote " + objetivo.estimateDamage(danyo) + "...\n" ,
		  									"Clavas " + wName + " en la carne de $2, infligiéndole " + objetivo.estimateDamage(danyo) + "...\n" ,
											true );
	  					}
	  					else
	  					{
	  					
	  					
	  						  self.getRoom().informAction ( self , objetivo ,
								"$1 acierta a $2 con " + wName + " sin dañarlo" + "...\n" ,
								"$1 te acierta con " + wName + "; pero no consigue hacerte daño" + "...\n" ,
								"Aciertas a $2 con " + wName + "; pero no consigues hacerle daño" + "...\n" ,
								true );
	  					}
	  					if ( danyo*10 > objetivo.getMaxHP()  )
	  					{
	  						Random r = self.getRandom();
	  						
	  						int rint = r.nextInt() % 3;
	  						switch ( rint )
	  						{
	  							case 0:
	  								self.say("¡Tu alma será mía!");
	  								break;
	  							case 1:
	  								self.say("¡Eres mío! ¡Míooo!");
	  								break;
	  							case 2:
	  								self.say("¡Muere, humano!");
	  								break;
	  						}
	  						
	  					}
	  					if ( objetivo.getHP() <= 0 )
	  						  self.getRoom().informAction(self,null,"$1 mira al techo y aúlla, satisfecho.\n","$1 mira al techo y aúlla, satisfecho.\n","Miras al techo y aúllas, satisfecho.\n",true);				
	  					else if ( objetivo.getHP() * 5 < objetivo.getMaxHP()  )
	  						  self.getRoom().informAction(self,null,"$1 brilla con un aura verde...\n","$1 brilla con un aura verde...\n","Brillas con un aura verde...\n",true);		
	  					end();
  					}
  				}
  				
  				void afterDie ( Item cadaver )
  				{
  					cadaver.getRoomReferences().get(0).removeItem(cadaver);
  					cadaver.getRoomReferences().get(0).informActionAuto(cadaver,null,null,"$1 se va volviendo transparente rápidamente hasta que desaparece.",false);
  					this.setNewState(Mobile.IDLE,1);
  					this.setRoom(world.getRoom("Limbo"));	
  				}
  				
  				//es agresivo, el tipejo.		
  				void onEnterRoom ( Mobile m )
				{
				
					if ( m != self && !self.hasEnemy(m) && !self.getRelationshipPropertyValueAsBoolean ( m , "caster" ) )
					{
						self.addEnemy(m);
						self.sayTo(m,"¡Te destruiré, patético humano!");
					}

		
				}]]></Code>
<Traits>
<SkillList>
<Skill name="garra" value="1600"/>
<Skill name="cuerpo a cuerpo" value="600"/>
</SkillList>
</Traits>
<Inventory/>
<Parts>
<Inventory>
<ItemRef id="Garra derecha de demonio"/>
<ItemRef id="Garra izquierda de demonio"/>
</Inventory>
</Parts>
<RelationshipList>
<Relationship id="Garra derecha de demonio">
<PropertyList/>
</Relationship>
<Relationship id="Garra izquierda de demonio">
<PropertyList/>
</Relationship>
</RelationshipList>
<CurrentRoom id="Limbo"/>
<LastRoom id="Limbo"/>
</Mobile>
<Mobile gender="true" hp="50" maxhp="50" maxmp="50" mp="50" name="Héroe">
<SingularNames/>
<PluralNames/>
<SingularReferenceNames>
<Name>héroe</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>héroes</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>No ganarías un concurso de belleza; pero por el momento tienes pinta de seguir vivo. Que no es poco.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<PropertyList>
<PropertyEntry name="piranhaAttacked" timeUnitsLeft="0" value="false"/>
<PropertyEntry name="winrar" timeUnitsLeft="-1" value="false"/>
</PropertyList>
<Code language="BeanShell"><![CDATA[void parseCommand ( String verb , String args )

{


    
    if ( equals(verb,"estado") || equals(verb,"status") )

    {

       

        self.write("ESTADO DE SALUD Y ENERGÍA MÁGICA:\n");

        outputDamageStatus();
        outputManaStatus();

        self.write("INVENTARIO:\n");

        self.showInventory();

        self.write("HECHIZOS CONOCIDOS:\n");

        showSpells();

        self.write("HABILIDADES:\n");

        outputSkills();

        end();

        

    }
    
    if ( equals(verb,"conjuros") )
    {
        self.forceCommand("hechizos");
        end();
    }
    
    if ( equals(verb,"guardar") || equals(verb,"guarda") || equals(verb,"guardo") )
    {
        self.forceCommand("enfundar " + args);
        end();
    }
    



}


void showSpells()
{
    SpellList spellRefs = self.getSpells();
	for ( int i = 0 ; i < spellRefs.size() ; i++ )
	{
		Spell current = (Spell)spellRefs.get(i);
		self.writeInformation( current.getTitle() + "\n" );
	}
}



String skillValueToString ( long val )
{

    if ( val > 1000 ) return "gran maestro";

    if ( val > 800 ) return "maestro";

    if ( val > 600 ) return "excelente";

    if ( val > 400 ) return "bueno";

    if ( val > 300 ) return "decente";

    if ( val > 200 ) return "medio";

    if ( val > 100 ) return "aprendiz";

    if ( val > 50 ) return "aficionado";

    if ( val > 25 ) return "principiante";

    if ( val > 1 ) return "novato";

    return "sin habilidad";

       

}



void outputSkills ( )

{

    

    String[][] skills = { {"bastón" , "Combate con bastón"} , {"contundente" , "Combate con armas contundentes"} , { "espada" , "Combate con espada"} , { "hacha" , "Combate con hacha"} , {"antimagia" , "Magia antimagia"} , { "elemental" , "Magia elemental" } , {"invocacion" , "Magia de invocación"} , { "combate" , "Magia de combate"} };

    

    for ( int i = 0 ; i < skills.length ; i++ )

    {

        String[] theSkill = skills[i];

        long skillVal = self.getSkill ( theSkill[0] );

        if ( skillVal > 0 )

        {

            self.writeInformation(theSkill[1] + ": " + skillValueToString(skillVal) + "\n");   

        }

    }

    

}



void outputDamageStatus (  )

{



    int hp = self.getHP();

    int maxhp = self.getMaxHP();



	//percent = % de daño recibido

	double percent = (double)(maxhp-hp) * 100.0 / (double)maxhp;

		

	String result;

		

	if ( percent <= 0.1 )

		result = "Estás como una rosa.";

	else if ( percent < 5.1 )

		result = "Tienes algún rasguño.";

	else if ( percent < 10 )

		result = "Tienes ligeras heridas.";	

	else if ( percent < 18 )

		result = "Tienes heridas poco graves.";	

	else if ( percent < 25 )

		result = "Tienes heridas de cierta consideración.";

	else if ( percent < 33 )

		result = "Tienes heridas importantes.";

	else if ( percent < 40 )

		result = "Tienes heridas graves.";

	else if ( percent < 50 )

		result = "Tienes heridas preocupantes.";

	else if ( percent < 60 )

		result = "Estás gravemente herido.";

	else if ( percent < 70 )

		result = "Estás muy gravemente herido.";

	else if ( percent < 80 )

		result = "Estás críticamente herido.";

	else if ( percent < 90 )

		result = "Estás en las últimas.";	

	else if ( percent < 100 )

		result = "Estás a un paso de la tumba.";	

	else

		result = "Estás mortalmente herido.";

	

	self.writeInformation(result+"\n");

	

}



void outputManaStatus (  )

{

    int mp = self.getMP();

    int maxmp = self.getMaxMP();

	//percent = % de daño recibido

	double percent = (double)(maxmp-mp) * 100.0 / (double)maxmp;


	String result;

		
	if ( percent <= 0.1 )
		result = "Tienes toda tu energía mágica intacta.";
	else if ( percent < 20 )
		result = "Tienes disponible la gran mayoría de tu energía mágica.";	
	else if ( percent < 40 )
		result = "Tienes disponible la mayoría de tu energía mágica.";
	else if ( percent < 60 )
		result = "Tienes disponible más o menos la mitad de tu energía mágica.";
	else if ( percent < 80 )
		result = "No te queda mucha energía mágica.";
	else if ( percent < 100 )
		result = "Te queda muy poquita energía mágica.";	
	else
		result = "Te has gastado absolutamente toda tu energía mágica.";

	
	self.writeInformation(result+"\n");

}


void update ( PropertyEntry pe , World w )
{
    if ( equals(self.getRoom() , room("Sala del trono")) )
    {
        set(self,"hasBeenTo",room("Sala del trono"),true);   
    }
}

/*
void onEnterRoom ( Mobile m )
{
     if ( equals(self.getRoom() , room("Sala del trono")) )
    {
        set(self,"hasBeenTo",room("Sala del trono"),true);   
        end();
    }
}
*/]]></Code>
<Traits>
<SkillList>
<Skill name="invocacion" value="100"/>
<Skill name="bastón" value="50"/>
</SkillList>
</Traits>
<Inventory>
<ItemRef id="Bastón de combate"/>
</Inventory>
<Parts>
<Inventory>
<ItemRef id="Mano derecha del héroe"/>
<ItemRef id="Mano izquierda del héroe"/>
</Inventory>
</Parts>
<SpellList>
<SpellRef id="Invocar flores"/>
</SpellList>
<RelationshipList>
<Relationship id="Bastón de combate">
<PropertyList/>
</Relationship>
<Relationship id="Mano derecha del héroe">
<PropertyList/>
</Relationship>
<Relationship id="Mano izquierda del héroe">
<PropertyList/>
</Relationship>
<Relationship id="Invocar flores">
<PropertyList/>
</Relationship>
<Relationship id="Sala del trono">
<PropertyList>
<PropertyEntry name="hasBeenTo" timeUnitsLeft="0" value="false"/>
</PropertyList>
</Relationship>
</RelationshipList>
<CurrentRoom id="Entrada"/>
<LastRoom id="Entrada"/>
</Mobile>
<Mobile gender="true" hp="10" maxhp="10" maxmp="10" mp="10" name="Tamar">
<SingularNames>
<Description properName="true">Tamar</Description>
</SingularNames>
<PluralNames/>
<SingularReferenceNames>
<Name>Tamar</Name>
<Name>bella</Name>
<Name>mujer</Name>
</SingularReferenceNames>
<PluralReferenceNames/>
<DescriptionList>
<Description>La bella Tamar. Siempre fue la mujer más guapa del pueblo, y sigue siendo preciosa, a pesar de la cara pálida por las privaciones que habrá sufrido. No se puede decir que Morluck tuviese mal gusto a la hora de elegir a quién raptar.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<PropertyList/>
<Code language="BeanShell"><![CDATA[void defendFrom ( Player p )

{

	self.getRoom().informActionAuto(null,null,null,"Tamar te pega una buena bofetada en la cara.\n",false);

	p.write("¡Te quedas aturdido!\n");

	p.setProperty("delay",true,40);

}







void onSay ( Mobile m , String text )

{



	String lText = text.toLowerCase();



		

	if ( lText.indexOf("que tal") >= 0 || lText.indexOf("qué tal") >= 0 || lText.indexOf("cómo va") >= 0 || lText.indexOf("cómo estás") >= 0 || lText.indexOf("como estas") >= 0 || lText.indexOf("como estás") >= 0 || lText.indexOf("te sientes") >= 0 )

	{

		self.say("Bueno, tengo miedo pero estoy bien. Menos mal que ese horrible Morluck ya está muerto. ¡Ahora quiero volver al pueblo!");

	}

		

	else if ( lText.indexOf("hola") >= 0 || lText.indexOf("buenas") >= 0 || lText.indexOf("saludo") >= 0 || lText.indexOf("buenos d") >= 0 )

	{

		self.say("Hola... muchas gracias por venir a rescatarme. ¿Nos vamos de aquí?");



	}

		

	else if ( ( lText.indexOf("te llama") >= 0 ) || ( lText.indexOf("tu nombre") >= 0 ) )

	{

			self.say("Yo soy Tamar, pensé que te acordarías de mí.");

	}

		

	else if ( lText.indexOf("me llamo ") >= 0 || lText.indexOf("nombre es ") >= 0 || lText.indexOf("uedes llamarme ") >= 0 || lText.indexOf("soy ") >= 0  )

	{

		Vector posibilidades = new Vector();

		posibilidades.add("me llamo "); posibilidades.add("nombre es "); posibilidades.add("uedes llamarme "); posibilidades.add("soy ");

		Vector tokenios = StringMethods.tokenizeWithComplexSeparators ( lText , posibilidades );	

		if ( tokenios.size() > 1 )

		{

			//System.out.println("Tokenios: " + tokenios);

			String nombre = (String) tokenios.get(1);

			//hacer que el nombre empiece por mayúscula

			if ( !Character.isUpperCase(nombre.charAt(0)) )

				nombre = Character.toUpperCase(nombre.charAt(0)) + nombre.substring(1);

			self.setRelationshipProperty ( m , "nombre" , nombre );

			self.setRelationshipProperty ( m , "esperandonombre" , false );

			self.say("Encantado, " 	+ self.getRelationshipPropertyValueAsString ( m , "nombre" ) + ". Yo soy Tamar." );

		}

	}



	else if ( ( lText.indexOf("folla") >= 0 || lText.indexOf("virgen") >= 0 || lText.indexOf("sexo") >= 0 ) )

	{

		self.say("Serás guarro... intenta aprovecharte de mí y verás.");

	}	



	else if ( ( lText.indexOf("novio") >= 0 ) )

	{

		self.say("¿Y a ti qué te importa?");

	}	



	else if ( ( lText.indexOf("morluck") >= 0 ) || ( lText.indexOf("brujo") >= 0 ) || ( lText.indexOf("secuestro") >= 0 ) )

	{

		self.say("No sé exactamente qué quería hacer conmigo ese malvado... tal vez sea mejor que no me haya enterado.");

	}	



	else

	{

		

			java.util.Random generador = self.getRandom();

			int numero = Math.abs( generador.nextInt() % 4 );

			switch ( numero )

			{

				case 0 :

					self.say("Lo siento, estoy bastante cansada y asustada... deberíamos concentrarnos en salir de este sitio...");

					break;

				case 1 :

					self.say("¿Podemos salir de aquí, por favor? No tengo ganas de hablar mucho ahora, estoy cansada...");

					break;

				case 2 :

					self.say("Por favor, llévame al pueblo... quiero salir de aquí, ya podremos hablar después.");

					break;

				case 3 :

					self.say("Creo que es mejor que nos concentremos en salir de aquí, y ya hablaremos en otro momento... ¡quiero ver a mi familia!");

					break;

				case 4 :

					self.say("¿Salimos de aquí, por favor? Ya hablaremos cuando estemos de vuelta en el pueblo sanos y salvos...");

					break;

			}		

	}



}]]></Code>
<Traits>
<SkillList/>
</Traits>
<Inventory/>
<RelationshipList/>
<CurrentRoom id="Limbo"/>
<LastRoom id="Limbo"/>
</Mobile>
<Mobile gender="true" hp="1200" maxhp="1200" maxmp="100000" mp="100000" name="Morluck">
<SingularNames>
<Description properName="true">Morluck</Description>
</SingularNames>
<PluralNames/>
<SingularReferenceNames>
<Name>morluck</Name>
<Name>mago</Name>
<Name>brujo</Name>
<Name>malvado</Name>
<Name>villano</Name>
</SingularReferenceNames>
<PluralReferenceNames>
<Name>magos</Name>
<Name>brujos</Name>
<Name>malvados</Name>
<Name>villanos</Name>
</PluralReferenceNames>
<DescriptionList>
<Description>Un hombre alto, enjuto, de facciones angulosas, embutido en una túnica granate y negra... sus ojos son rojos, brillantes y malvados, y te miran fijamente, despreciándote como a un insecto.</Description>
</DescriptionList>
<ExtraDescriptionList/>
<PropertyList/>
<Code language="BeanShell"><![CDATA[void onEnterRoom ( Mobile m )

{

    

    if ( equals(m , get("Héroe") ) )   
    {

        m.writeAction("Entras en una gran sala rectangular de decoración recargada y barroca.\n");
        m.writeDescription("Tapices mostrando ejércitos de orcos y criaturas demoníacas cubren las paredes.\n");
        m.writeDescription("Una enorme lámpara de araña ilumina la estancia.\n");
        m.waitKeyPress();
        m.writeDescription("Al fondo, sobre una tarima de piedra, hay un trono negro como la noche... y delante de ti, de pie, esperándote... está su dueño...\n");
        m.waitKeyPress();
        m.writeStory("¡Te encuentras con el malvado Morluck!\n\n");   
        self.say("Ja, ja, ja... te estaba esperando, aprendiz de pacotilla... debes de creerte muy valiente por haber llegado hasta aquí.");
        self.say("Pero ahora, tu aventura ha terminado.");
        self.cast(spell("Invocar demonio"),null);
        
    }

   
    

}


void onRoomText ( String text )
{
    //System.err.println("The text: " + text);
    if ( text.indexOf("contrarrestándolo") >= 0 && text.indexOf("dice") < 0 )
    {
        self.say("Muy ingenioso, pequeño... pero mi poder es muy grande. Puedo volver a empezar mi hechizo, y tú ni siquiera podrás tocarme, gusano.");   
        set(self,"castAgain",true);
        setTime(self,"castAgain",50);
        self.getRoom().informAction(self,null,null,"$1 alza los brazos, como recobrando energía para un nuevo conjuro...\n","$1 alza los brazos, como recobrando energía para un nuevo conjuro...\n","Alzas los brazos, recobrando energía para un nuevo conjuro...\n",true);	
    }
}


void update ( PropertyEntry pe , World w )
{
    if ( pe.getName().equals("castAgain") && !equals(get(self,"state"),Mobile.DEAD) )
    {
        setTime(self,"castAgain",-1);  
        self.cast(spell("Invocar demonio"),null);
    }
}


void afterDie ( Item corpse )
{
    set(room("Sala del trono").getPath(true,Path.NORTE),"closed",false);
    mobile("Héroe").writeStory("Segundos después, ves a una figura que se acerca corriendo desde un rincón oscuro de la habitación... ¡es la bella Tamar!\n");
    mobile("Tamar").setRoom(room("Sala del trono"));
    mobile("Tamar").say("¡Has venido a rescatarme! Oh... ¡muchas gracias! ¡Nunca pensé que fueras tan valiente!");
    mobile("Héroe").writeStory("Tamar llega hasta ti y te abraza con fuerza.\n");
}]]></Code>
<Traits>
<SkillList>
<Skill name="invocación" value="10000"/>
</SkillList>
</Traits>
<Inventory/>
<SpellList>
<SpellRef id="Invocar demonio"/>
</SpellList>
<RelationshipList>
<Relationship id="Invocar demonio">
<PropertyList/>
</Relationship>
</RelationshipList>
<CurrentRoom id="Sala del trono"/>
<LastRoom id="Sala del trono"/>
</Mobile>
</Mobiles>
<Spells>
<Spell name="Cierre mágico">
<InvolvedSkills>
<Skill name="encantamiento"/>
</InvolvedSkills>
<CastProbability steepness="0"/>
<CastTime starting="10" steepness="0"/>
<Duration starting="100" steepness="0"/>
<ManaCost starting="10" steepness="0"/>
<Intensity starting="4" steepness="0"/>
<SingularReferenceNames/>
<PluralReferenceNames/>
<PropertyList/>
<Code language="BeanShell"><![CDATA[void beforeCast ( Entity caster , Entity target )
			{
					if ( target == null )
					{
						caster.escribir("¿Qué es lo que quieres cerrar?\n");
						end();
					}
					else if ( !(target instanceof Item) || !((Item)target).isLockable() )
					{
						caster.escribir("Eso no es algo que tenga sentido cerrar.\n");
						end();
					}
					else if ( target.getRelationshipPropertyValueAsBoolean(self,"cast") )
					{
						caster.escribir("Ya está bajo el efecto de ese hechizo.\n");
						end();
					}
					else
					{
						caster.say ( "¡Klatze erszka zon!" );
					}
			}
			void beforeFail ( Entity caster , Entity target )
			{
					if ( target == null )
					{
						caster.escribir("¿Qué es lo que quieres cerrar?\n");
						end();
					}
					else if ( !(target instanceof Item) || !((Item)target).isLockable() )
					{
						caster.escribir("Eso no es algo que tenga sentido cerrar.\n");
						end();
					}
					else if ( target.getRelationshipPropertyValueAsBoolean(self,"cast") )
					{
						caster.escribir("Ya está bajo el efecto de ese hechizo.\n");
						end();
					}
					else
					{
						caster.say ( "¡Klatze erszka zon!" );
					}
			}]]></Code>
<EffectList>
<EffectRef id="cierre mágico"/>
</EffectList>
<RelationshipList>
<Relationship id="cierre mágico">
<PropertyList/>
</Relationship>
</RelationshipList>
</Spell>
<Spell name="Invocar bestia(copy)">
<InvolvedSkills>
<Skill name="invocación"/>
</InvolvedSkills>
<CastProbability steepness="0"/>
<CastTime starting="10" steepness="0"/>
<Duration starting="10" steepness="0"/>
<ManaCost starting="10" steepness="0"/>
<Intensity starting="4" steepness="0"/>
<SingularReferenceNames/>
<PluralReferenceNames/>
<PropertyList/>
<Code language="BeanShell"><![CDATA[void prepare ( Entity caster , Entity target )
				{
					((Mobile)caster).getRoom().informAction(caster,target,null,"$1 mueve los brazos arriba y abajo...\n","$1 mueve los brazos arriba y abajo...\n","Mueves las manos arriba y abajo...\n",true);	
				}
				void beforeCast ( Entity caster , Entity target )
				{
					caster.say("¡Inzelda zontar nunil!");
					if ( world.getMobile("Bestia menor").getRoom() != world.getRoom("Limbo") )
					{
						caster.escribir("Parece que no hay ninguna bestia en las dimensiones oscuras que pueda venir.\n");
						end();
					}
				}
				void beforeFail ( Entity caster , Entity target )
				{
					caster.say("¡Inzelda zontar nunil!");
				}]]></Code>
<EffectList/>
<RelationshipList/>
</Spell>
<Spell name="Desencantar">
<InvolvedSkills>
<Skill name="antimagia"/>
</InvolvedSkills>
<CastProbability steepness="0"/>
<CastTime starting="15" steepness="0"/>
<Duration starting="0" steepness="0"/>
<ManaCost starting="15" steepness="0"/>
<Intensity starting="4" steepness="0"/>
<SingularReferenceNames/>
<PluralReferenceNames/>
<PropertyList/>
<Code language="BeanShell"><![CDATA[void beforeCast ( Entity caster , Entity target )
			{
					if ( target == null )
					{
						caster.escribir("¿Qué es lo que quieres desencantar?\n");
						end();
					}
					else
					{
						caster.say ( "¡An nezlik nuglim!" );
					}
			}
			void beforeFail ( Entity caster , Entity target )
			{
					if ( target == null )
					{
						caster.escribir("¿Qué es lo que quieres desencantar?\n");
						end();
					}
					else
					{
						caster.say ( "¡An nezlik nuglim!" );
					}
			}]]></Code>
<EffectList>
<EffectRef id="desencantar"/>
</EffectList>
<RelationshipList>
<Relationship id="desencantar">
<PropertyList/>
</Relationship>
</RelationshipList>
</Spell>
<Spell name="Iluminar">
<InvolvedSkills>
<Skill name="encantamiento"/>
</InvolvedSkills>
<CastProbability steepness="0"/>
<CastTime starting="10" steepness="0"/>
<Duration starting="300" steepness="0"/>
<ManaCost starting="10" steepness="0"/>
<Intensity starting="4" steepness="0"/>
<SingularReferenceNames/>
<PluralReferenceNames/>
<PropertyList/>
<Code language="BeanShell"><![CDATA[void beforeCast ( Entity caster , Entity target )
			{
					if ( target == null )
					{
						caster.escribir("¿Qué es lo que quieres encender?\n");
						end();
					}
					else if ( !( target instanceof Item ) )
					{
						caster.escribir("Sólo puedes iluminar objetos.\n");
						end();
					}
					else if ( !(target.getPropertyValueAsBoolean("light_source")) )
					{
						caster.escribir("Eso no es algo que pueda dar luz.\n");
						end();
					}
					else if ( !caster.hasItem((Item)target) )
					{
						caster.escribir("Sólo puedes iluminar objetos que llevas.\n");
						end();
					}
					else if ( target.getRelationshipPropertyValueAsBoolean(self,"cast") )
					{
						caster.escribir("Ya está bajo el efecto de ese hechizo.\n");
						end();
					}
					else
					{
						caster.say ( "¡Illinanzanti!" );
					}
			}
			void beforeFail ( Entity caster , Entity target )
			{
					if ( target == null )
					{
						caster.escribir("¿Qué es lo que quieres entender?\n");
						end();
					}
					else if ( !( target instanceof Item ) )
					{
						caster.escribir("Sólo puedes iluminar objetos.\n");
						end();
					}
					else if ( !(target.getPropertyValueAsBoolean("light_source")) )
					{
						caster.escribir("Eso no es algo que pueda dar luz.\n");
						end();
					}
					else if ( !caster.hasItem((Item)target) )
					{
						caster.escribir("Sólo puedes iluminar objetos que llevas.\n");
						end();
					}
					else if ( target.getRelationshipPropertyValueAsBoolean(self,"cast") )
					{
						caster.escribir("Ya está bajo el efecto de ese hechizo.\n");
						end();
					}
					else
					{
						caster.say ( "¡Illinanzanti!" );
					}
			}]]></Code>
<EffectList>
<EffectRef id="iluminar"/>
</EffectList>
<RelationshipList>
<Relationship id="iluminar">
<PropertyList/>
</Relationship>
</RelationshipList>
</Spell>
<Spell name="Hielo">
<InvolvedSkills>
<Skill name="elemental"/>
</InvolvedSkills>
<CastProbability steepness="0"/>
<CastTime starting="22" steepness="0"/>
<Duration starting="0" steepness="0"/>
<ManaCost starting="10" steepness="0"/>
<Intensity starting="4" steepness="0"/>
<SingularReferenceNames/>
<PluralReferenceNames/>
<PropertyList/>
<Code language="BeanShell"><![CDATA[void prepare ( Entity caster , Entity target )
			{
				caster.say ( "¡Azh kanzani metarah..." );
				((Mobile)caster).getRoom().informAction(caster,target,null,"$1 comienza a formar una bola de hielo con sus manos...\n","$1 comienza a formar una bola de hielo con sus manos...\n","Comienzas a formar una bola de hielo con tus manos...\n",true);	
			}
			void beforeCast ( Entity caster , Entity target )
			{
					if ( target == null )
					{
						caster.escribir("¿A quién o qué quieres apuntar?\n");
						end();
					}
                    /*
					else if ( !(target instanceof Mobile) )
					{
						caster.escribir("Eso no es una criatura.\n");
						end();
					}
                    */
					else if ( target.getRelationshipPropertyValueAsBoolean(self,"cast") )
					{
						//absurd
						//caster.escribir("Ya está bajo el efecto de ese hechizo.\n");
						end();
					}
					else if ( ( target instanceof Mobile && !((Mobile)caster).getRoom().hasMobile(target) )
                        || ( target instanceof Item && !((Mobile)caster).getRoom().hasItem(target) && !((Mobile)caster).hasItem(target) ) )
					{
						caster.escribir( target.constructName2OneItem(caster) + " no está a tu alcance.\n" );
						end();
					}
					else
					{
						caster.say ( "...Teniakar uniakilis re!" );
					}
			}
			void beforeFail ( Entity caster , Entity target )
			{
					if ( target == null )
					{
						caster.escribir("¿A quién o qué quieres apuntar?\n");
						end();
					}
                    /*
					else if ( !(target instanceof Mobile) )
					{
						caster.escribir("Eso no es una criatura.\n");
						end();
					}
                    */
					else if ( target.getRelationshipPropertyValueAsBoolean(self,"cast") )
					{
						//absurd
						//caster.escribir("Ya está bajo el efecto de ese hechizo.\n");
						end();
					}
					else if ( ( target instanceof Mobile && !((Mobile)caster).getRoom().hasMobile(target) )
                        || ( target instanceof Item && !((Mobile)caster).getRoom().hasItem(target) && !((Mobile)caster).hasItem(target) ) )
					{
						caster.escribir( target.constructName2OneItem(caster) + " no está a tu alcance.\n" );
						end();
					}
					else
					{
						caster.say ( "...Teniakar unakilis re!" );
					}
			}]]></Code>
<EffectList>
<EffectRef id="daño de hielo"/>
</EffectList>
<RelationshipList>
<Relationship id="daño de hielo">
<PropertyList/>
</Relationship>
</RelationshipList>
</Spell>
<Spell name="Encantar arma">
<InvolvedSkills>
<Skill name="combate"/>
</InvolvedSkills>
<CastProbability steepness="0"/>
<CastTime starting="10" steepness="0"/>
<Duration starting="100" steepness="0"/>
<ManaCost starting="10" steepness="0"/>
<Intensity starting="4" steepness="0"/>
<SingularReferenceNames/>
<PluralReferenceNames/>
<PropertyList/>
<Code language="BeanShell"><![CDATA[void beforeCast ( Entity caster , Entity target )
			{
					if ( target == null )
					{
						caster.escribir("¿Qué arma quieres encantar?\n");
						end();
					}
					else if ( !(target instanceof Weapon) )
					{
						caster.escribir("Eso no es un arma.\n");
						end();
					}
					else if ( !caster.hasItem((Item)target) )
					{
						caster.escribir("Sólo puedes encantar las armas que llevas.\n");
						end();
					}
					else if ( target.getRelationshipPropertyValueAsBoolean(self,"cast") )
					{
						caster.escribir("Ya está bajo el efecto de ese hechizo.\n");
						end();
					}
					else
					{
						caster.say ( "¡Zugh anzik wogah!" );
					}
			}
			void beforeFail ( Entity caster , Entity target )
			{
					if ( target == null )
					{
						caster.escribir("¿Qué arma quieres encantar?\n");
						end();
					}
					else if ( !(target instanceof Weapon) )
					{
						caster.escribir("Eso no es un arma.\n");
						end();
					}
					else if ( !caster.hasItem((Item)target) )
					{
						caster.escribir("Sólo puedes encantar las armas que llevas.\n");
						end();
					}
					else if ( target.getRelationshipPropertyValueAsBoolean(self,"cast") )
					{
						caster.escribir("Ya está bajo el efecto de ese hechizo.\n");
						end();
					}
					else
					{
						caster.say ( "¡Zugh anzik wogah!" );
					}
			}]]></Code>
<EffectList>
<EffectRef id="encantar arma"/>
</EffectList>
<RelationshipList>
<Relationship id="encantar arma">
<PropertyList/>
</Relationship>
</RelationshipList>
</Spell>
<Spell name="Gran bola de fuego(copy)">
<InvolvedSkills>
<Skill name="destrucción"/>
</InvolvedSkills>
<CastProbability steepness="0"/>
<CastTime starting="4000" steepness="0"/>
<Duration starting="0" steepness="0"/>
<ManaCost starting="100" steepness="0"/>
<Intensity starting="4" steepness="0"/>
<SingularReferenceNames/>
<PluralReferenceNames/>
<PropertyList/>
<Code language="BeanShell"><![CDATA[void prepare ( Entity caster , Entity target )
			{
				caster.say ( "¡Azh anzik umgah..." );
				((Mobile)caster).getRoom().informAction(caster,target,null,"$1 comienza a formar una bola de fuego con sus manos...\n","$1 comienza a formar una bola de fuego con sus manos...\n","Comienzas a formar una bola de fuego con tus manos...\n",true);	
			}
			void beforeCast ( Entity caster , Entity target )
			{
					if ( target == null )
					{
						caster.escribir("¿A quién quieres apuntar?\n");
						end();
					}
					else if ( !(target instanceof Mobile) )
					{
						caster.escribir("Eso no es una criatura.\n");
						end();
					}
					else if ( target.getRelationshipPropertyValueAsBoolean(self,"cast") )
					{
						//absurd
						//caster.escribir("Ya está bajo el efecto de ese hechizo.\n");
						end();
					}
					else if ( !((Mobile)caster).getRoom().hasMobile(target) )
					{
						caster.escribir( target.constructName2OneItem(caster) + " no está a tu alcance.\n" );
						end();
					}
					else
					{
						caster.say ( "...Annon Rodisnik Ferkzanli!" );
					}
			}
			void beforeFail ( Entity caster , Entity target )
			{
					if ( target == null )
					{
						caster.escribir("¿A quién quieres apuntar?\n");
						end();
					}
					else if ( !(target instanceof Mobile) )
					{
						caster.escribir("Eso no es una criatura.\n");
						end();
					}
					else if ( target.getRelationshipPropertyValueAsBoolean(self,"cast") )
					{
						//absurd
						//caster.escribir("Ya está bajo el efecto de ese hechizo.\n");
						end();
					}
					else if ( !((Mobile)caster).getRoom().hasMobile(target) )
					{
						caster.escribir( target.constructName2OneItem(caster) + " no está a tu alcance.\n" );
						end();
					}
					else
					{
						caster.say ( "...Annon Rodisnik Ferkzanli!" );
					}
			}]]></Code>
<EffectList/>
<RelationshipList/>
</Spell>
<Spell name="Invocar flores">
<InvolvedSkills>
<Skill name="invocacion"/>
</InvolvedSkills>
<CastProbability steepness="0"/>
<CastTime starting="10" steepness="0"/>
<Duration starting="10" steepness="0"/>
<ManaCost starting="10" steepness="0"/>
<Intensity starting="4" steepness="0"/>
<SingularReferenceNames/>
<PluralReferenceNames/>
<PropertyList/>
<Code language="BeanShell"><![CDATA[void prepare ( Entity caster , Entity target )
{
	((Mobile)caster).getRoom().informAction(caster,target,null,"$1 mueve los brazos arriba y abajo...\n","$1 mueve los brazos arriba y abajo...\n","Mueves las manos arriba y abajo...\n",true);	
}

void beforeCast ( Entity caster , Entity target )
{
	caster.say("¡Onistris zerestriakis mukhr kunothar thokis!");
	if ( !room("Limbo").hasItem(item("Ramo de flores")) )
	{
		caster.escribir("Sólo puedes tener conjurado un ramo de flores a la vez.\n");
		end();
	}
}
void beforeFail ( Entity caster , Entity target )
{
	caster.say("¡Onistris zerestriakis mukhr kunothar thokis!");
}]]></Code>
<EffectList>
<EffectRef id="invocar flores"/>
</EffectList>
<RelationshipList>
<Relationship id="invocar flores">
<PropertyList/>
</Relationship>
</RelationshipList>
</Spell>
<Spell name="Invocar demonio">
<InvolvedSkills>
<Skill name="invocación"/>
</InvolvedSkills>
<CastProbability steepness="0"/>
<CastTime starting="1000" steepness="0"/>
<Duration starting="100" steepness="0"/>
<ManaCost starting="10" steepness="0"/>
<Intensity starting="4" steepness="0"/>
<SingularReferenceNames/>
<PluralReferenceNames/>
<PropertyList/>
<Code language="BeanShell"><![CDATA[void prepare ( Entity caster , Entity target )
				{
					((Mobile)caster).getRoom().informAction(caster,target,null,"$1 mueve los brazos arriba y abajo, y sus manos brillan con una extraña luz negra...\n","$1 mueve los brazos arriba y abajo, y sus manos brillan con una extraña luz negra...\n","Mueves las manos arriba y abajo, y tus manos brillan con luz negra...\n",true);	
				}
				void beforeCast ( Entity caster , Entity target )
				{
					//System.out.println("3-DEMON CAST");
					caster.say("¡Inzelda kasothar zanetis mukhr kidamn zah!");
					if ( world.getMobile("Demonio alado").getRoom() != world.getRoom("Limbo") )
					{
						caster.escribir("Parece que no hay ningún demonio en las dimensiones oscuras que pueda venir.\n");
						end();
					}
				}
				void beforeFail ( Entity caster , Entity target )
				{
					//System.out.println("3-DEMON FAILURE");
					caster.say("¡Inzelda kasothar zanetis mukhr kidamn zah!");
				}]]></Code>
<EffectList>
<EffectRef id="invocar demonio"/>
</EffectList>
<RelationshipList>
<Relationship id="invocar demonio">
<PropertyList/>
</Relationship>
</RelationshipList>
</Spell>
<Spell name="Aturdir">
<InvolvedSkills>
<Skill name="combate"/>
</InvolvedSkills>
<CastProbability steepness="0"/>
<CastTime starting="10" steepness="0"/>
<Duration starting="70" steepness="0"/>
<ManaCost starting="10" steepness="0"/>
<Intensity starting="4" steepness="0"/>
<SingularReferenceNames/>
<PluralReferenceNames/>
<PropertyList/>
<Code language="BeanShell"><![CDATA[void prepare ( Entity caster , Entity target )
			{
				caster.say ( "¡Innen jaiz orreit..." );
				((Mobile)caster).getRoom().informAction(caster,target,null,"$1 hace unos extraños gestos con las manos...\n","$1 hace unos extraños gestos con las manos...\n","Haces unos extraños gestos con las manos...\n",true);	
			}
			void beforeCast ( Entity caster , Entity target )
			{
					if ( target == null )
					{
						caster.escribir("¿A quién quieres apuntar?\n");
						end();
					}
					else if ( !(target instanceof Mobile) )
					{
						caster.escribir("Eso no es una criatura.\n");
						end();
					}
					else if ( target.getRelationshipPropertyValueAsBoolean(self,"cast") )
					{
						//absurd
						//caster.escribir("Ya está bajo el efecto de ese hechizo.\n");
						end();
					}
					else if ( !((Mobile)caster).getRoom().hasMobile(target) )
					{
						caster.escribir( target.constructName2OneItem(caster) + " no está a tu alcance.\n" );
						end();
					}
					else
					{
						caster.say ( "...Kaist zinnernat morisnil!" );
					}
			}
			void beforeFail ( Entity caster , Entity target )
			{
					if ( target == null )
					{
						caster.escribir("¿A quién quieres apuntar?\n");
						end();
					}
					else if ( !(target instanceof Mobile) )
					{
						caster.escribir("Eso no es una criatura.\n");
						end();
					}
					else if ( target.getRelationshipPropertyValueAsBoolean(self,"cast") )
					{
						//absurd
						//caster.escribir("Ya está bajo el efecto de ese hechizo.\n");
						end();
					}
					else if ( !((Mobile)caster).getRoom().hasMobile(target) )
					{
						caster.escribir( target.constructName2OneItem(caster) + " no está a tu alcance.\n" );
						end();
					}
					else
					{
						caster.say ( "...Kaist zinnernat morisnil!" );
					}
			}]]></Code>
<EffectList>
<EffectRef id="aturdir"/>
</EffectList>
<RelationshipList>
<Relationship id="aturdir">
<PropertyList/>
</Relationship>
</RelationshipList>
</Spell>
<Spell name="Detectar magia">
<InvolvedSkills>
<Skill name="antimagia"/>
</InvolvedSkills>
<CastProbability steepness="0"/>
<CastTime starting="10" steepness="0"/>
<Duration starting="0" steepness="0"/>
<ManaCost starting="2" steepness="0"/>
<Intensity starting="4" steepness="0"/>
<SingularReferenceNames/>
<PluralReferenceNames/>
<PropertyList/>
<Code language="BeanShell"><![CDATA[void prepare ( Entity caster , Entity target )
			{
				((Mobile)caster).getRoom().informAction(caster,target,null,"$1 alza las manos y mira hacia el infinito...\n","$1 alza las manos y mira hacia el infinito...\n","Alzas las manos y miras hacia el infinito...\n",true);	
			}
			void beforeCast ( Entity caster , Entity target )
			{
				if ( target == null )
					caster.say("¡Ach Zig Mernikla Farnerikla!");
				else
					caster.say("¡Ach Zig Mernikla Partarlskarn!");
				//continue
			}
			void beforeFail ( Entity caster , Entity target )
			{
				if ( target == null )
					caster.say("¡Ach Zig Mernikla Farnerikla!");
				else
					caster.say("¡Ach Zig Mernikla Partarlskarn!");
				//continue
			}]]></Code>
<EffectList>
<EffectRef id="detectar magia"/>
</EffectList>
<RelationshipList>
<Relationship id="detectar magia">
<PropertyList/>
</Relationship>
</RelationshipList>
</Spell>
<Spell name="Contrahechizo">
<InvolvedSkills>
<Skill name="antimagia"/>
</InvolvedSkills>
<CastProbability steepness="1"/>
<CastTime starting="4" steepness="0"/>
<Duration starting="0" steepness="0"/>
<ManaCost starting="5" steepness="0"/>
<Intensity starting="4" steepness="0"/>
<SingularReferenceNames/>
<PluralReferenceNames/>
<PropertyList/>
<Code language="BeanShell"><![CDATA[void prepare ( Entity caster , Entity target )
			{
				caster.say ( "¡An ulamdi..." );
				((Mobile)caster).getRoom().informAction(caster,target,null,"$1 cruza sus manos frente a su cara...\n","$1 cruza sus manos frente a su cara...\n","Cruzas tus manos frente a tu cara...\n",true);	
			}
			void beforeCast ( Entity caster , Entity target )
			{
					if ( target == null )
					{
						caster.escribir("¿A quién quieres contrarrestarle un hechizo?\n");
						end();
					}
					else if ( !(target instanceof Mobile) )
					{
						caster.escribir("Eso no es una criatura. El contrahechizo ha de ir dirigido a alguien que esté conjurando un hechizo.\n");
						end();
					}
					else if ( !((Mobile)caster).getRoom().hasMobile(target) )
					{
						caster.escribir( target.constructName2OneItem(caster) + " no está a tu alcance.\n" );
						end();
					}
					else
					{
						caster.say ( "...An zirkondi!" );
					}
			}
			void beforeFail ( Entity caster , Entity target )
			{
					if ( target == null )
					{
						caster.escribir("¿A quién quieres contrarrestarle un hechizo?\n");
						end();
					}
					else if ( !(target instanceof Mobile) )
					{
						caster.escribir("Eso no es una criatura. El contrahechizo ha de ir dirigido a alguien que esté conjurando un hechizo.\n");
						end();
					}
					else if ( !((Mobile)caster).getRoom().hasMobile(target) )
					{
						caster.escribir( target.constructName2OneItem(caster) + " no está a tu alcance.\n" );
						end();
					}
					else
					{
						caster.say ( "...An zirkondi!" );
					}
			}]]></Code>
<EffectList>
<EffectRef id="contrahechizo"/>
</EffectList>
<RelationshipList>
<Relationship id="contrahechizo">
<PropertyList/>
</Relationship>
</RelationshipList>
</Spell>
<Spell name="Fuego">
<InvolvedSkills>
<Skill name="elemental"/>
</InvolvedSkills>
<CastProbability steepness="0"/>
<CastTime starting="32" steepness="0"/>
<Duration starting="0" steepness="0"/>
<ManaCost starting="20" steepness="0"/>
<Intensity starting="4" steepness="0"/>
<SingularReferenceNames/>
<PluralReferenceNames/>
<PropertyList/>
<Code language="BeanShell"><![CDATA[void prepare ( Entity caster , Entity target )
			{
				caster.say ( "¡Azh anzik umgah..." );
				((Mobile)caster).getRoom().informAction(caster,target,null,"$1 comienza a formar una bola de fuego con sus manos...\n","$1 comienza a formar una bola de fuego con sus manos...\n","Comienzas a formar una bola de fuego con tus manos...\n",true);	
			}
			void beforeCast ( Entity caster , Entity target )
			{
					if ( target == null )
					{
						caster.escribir("¿A quién o qué quieres apuntar?\n");
						end();
					}
                    /*
					else if ( !(target instanceof Mobile) )
					{
						caster.escribir("Eso no es una criatura.\n");
						end();
					}
                    */
					else if ( target.getRelationshipPropertyValueAsBoolean(self,"cast") )
					{
						//absurd
						//caster.escribir("Ya está bajo el efecto de ese hechizo.\n");
						end();
					}
					else if ( ( target instanceof Mobile && !((Mobile)caster).getRoom().hasMobile(target) )
                        || ( target instanceof Item && !((Mobile)caster).getRoom().hasItem(target) && !((Mobile)caster).hasItem(target) ) )
					{
						caster.escribir( target.constructName2OneItem(caster) + " no está a tu alcance.\n" );
						end();
					}
					else
					{
						caster.say ( "...Annon Rodisnik Ferkzanli!" );
					}
			}
			void beforeFail ( Entity caster , Entity target )
			{
					if ( target == null )
					{
						caster.escribir("¿A quién o qué quieres apuntar?\n");
						end();
					}
                    /*
					else if ( !(target instanceof Mobile) )
					{
						caster.escribir("Eso no es una criatura.\n");
						end();
					}
                    */
					else if ( target.getRelationshipPropertyValueAsBoolean(self,"cast") )
					{
						//absurd
						//caster.escribir("Ya está bajo el efecto de ese hechizo.\n");
						end();
					}
					else if ( ( target instanceof Mobile && !((Mobile)caster).getRoom().hasMobile(target) )
                        || ( target instanceof Item && !((Mobile)caster).getRoom().hasItem(target) && !((Mobile)caster).hasItem(target) ) )
					{
						caster.escribir( target.constructName2OneItem(caster) + " no está a tu alcance.\n" );
						end();
					}
					else
					{
						caster.say ( "...Annon Rodisnik Ferkzanli!" );
					}
			}]]></Code>
<EffectList>
<EffectRef id="daño de fuego"/>
</EffectList>
<RelationshipList>
<Relationship id="daño de fuego">
<PropertyList/>
</Relationship>
</RelationshipList>
</Spell>
</Spells>
<AbstractEntities>
<AbstractEntity name="invocar flores" type="effect">
<PropertyList/>
<Code language="BeanShell"><![CDATA[boolean cast ( Entity caster , Entity target , int intensity )
{
	//target doesn't do anything.
	
    room("Limbo").removeItem(item("Ramo de flores"));
	( ((Mobile)caster).getRoom() ).addItem(item("Ramo de flores"));
	((Mobile)caster).getRoom().informActionAuto(world.getItem("Ramo de flores"),null,null,"¡De repente, un ramo de flores aparece en medio del aire! "
     + "Intentas cogerlo, pero se cae al suelo. Siempre fallas en lo más fácil...\n",true);	
	item("Ramo de flores").setRelationshipProperty(caster,"caster",true);	
	return true;
	
}
void fade ( Entity target )
{
    List rooms = item("Ramo de flores").getRoomReferences();
    for ( int i = 0 ; i < rooms.size() ; i++ )
    {
        Room r = (Room) rooms.get(i);
        r.informActionAuto( item("Ramo de flores"),null,null,"¡$1 desaparece súbitamente!\n",true );
        r.removeItem(item("Ramo de flores"));
    }
    List mobs = item("Ramo de flores").getMobileReferences();
    for ( int i = 0 ; i < mobs.size() ; i++ )
    {
        Mobile m = (Mobile) mobs.get(i);
        m.getRoom().informActionAuto( item("Ramo de flores"),null,null,"¡$1 desaparece de repente!\n",true );
        m.removeItem(item("Ramo de flores"));
    }   
    room("Limbo").addItem(item("Ramo de flores"));
}
void fail ( Entity caster , Entity target  )
{
	caster.escribir("Tu hechizo de invocación falla.\n");
}]]></Code>
<RelationshipList/>
</AbstractEntity>
<AbstractEntity name="desencantar" type="effect">
<PropertyList/>
<Code language="BeanShell"><![CDATA[boolean cast ( Entity caster , Entity target , int intensity )
				{						
    
    
                    //begin HARDCODED no simulacionista (prisa)
                    if ( equals(target,get("Arco")) )
                    {
                           ((Mobile)caster).escribir("Un encantamiento emite un fugaz destello al dejar el arco. ¡Las piedras que aparentemente lo tapiaban desaparecen!\n");
                           set(get("Arco"),"enchanted",false);
                           return true;
                    }
                    
                    //end HARDCODED
    
					List effects = target.getRelatedEntitiesByValue("cast",true);
					int i;
					for ( i = 0 ; i < effects.size() ; i++ )
					{
						Effect currentEffect = (Effect) effects.get(i);
						int currentIntensity = target.getRelationshipPropertyValueAsInteger(currentEffect,"intensity");
						if ( currentIntensity > intensity )
						{
							continue;
						}
						else
						{
							if ( target instanceof Nameable )	
							{
								((Mobile)caster).escribir("Un encantamiento emite un fugaz destello al dejar " + ((Nameable)target).constructName2(1,caster) + ".\n");
							}
							else
							{
								((Mobile)caster).escribir("Un encantamiento emite un fugaz destello al dejar el objeto.\n");
							}
							currentEffect.disable(target);	
							return true;
						}
					}
					if ( i > 0 )
					{
						((Mobile)caster).escribir("El hechizo es demasiado potente. Haría falta una magia más poderosa para deshacerlo.\n");
					}
					else
					{
						((Mobile)caster).escribir("El único conjuro que podrías intentar deshacer aquí es el que da luz a la cueva... no parece buena idea.\n");
					}
					return true;
				}
				void fail ( Entity caster , Entity target )
				{
						((Mobile)caster).escribir("Pierdes la concentración y tu hechizo antimágico falla.\n");
						return;
	
				}

				//zero duration -> no fade]]></Code>
<RelationshipList/>
</AbstractEntity>
<AbstractEntity name="cierre mágico" type="effect">
<PropertyList/>
<Code language="BeanShell"><![CDATA[boolean cast ( Entity caster , Entity target , int intensity )
				{
						Item targetW = (Item) target;
						((Mobile)caster).getRoom().informActionAuto(targetW,null,null,"$1 brilla durante una décima de segundo.\n",false);
						target.setProperty("waslocked",target.getPropertyValueAsBoolean("locked"));
						target.setProperty("locked",true);
						return true;
				}
				void fail ( Entity caster , Entity target )
				{		
						Item targetW = (Item) target;
						((Mobile)caster).escribir("Tu mano emite un leve sonido chisporroteante; pero tu hechizo falla.\n");
						return;
	
				}
				void fade ( Entity target )
				{
					//System.out.println("Gonna set locked property to " + target.getPropertyValueAsBoolean("waslocked"));
					Item targetW = (Item) target;
					//List propiet = targetW.getMobileReferences();
					//Mobile prop = (Mobile) propiet.get(0);
					//prop.getRoom().informActionAuto(targetW,null,null,"$1 parece oscurecerse durante una décima de segundo.\n",false);
					targetW.informActionAuto(target,null,null,"Se oye un pequeño click en $1.\n",false);
					//System.out.println("Setting locked property to " + target.getPropertyValueAsBoolean("waslocked"));
					target.setProperty("locked",target.getPropertyValueAsBoolean("waslocked"));
				}]]></Code>
<RelationshipList/>
</AbstractEntity>
<AbstractEntity name="detectar magia" type="effect">
<PropertyList/>
<Code language="BeanShell"><![CDATA[boolean cast ( Entity caster , Entity target , int intensity )
				{
					//target nullable
                    if ( target == null && equals(caster.getRoom(),get("Pasillo")) )					
                        target = get("Arco");
                        
                    //begin hardcoding for Morluck
                    if ( caster.getRoom().hasMobile(mobile("Morluck")) )
                    {
                        caster.write("Hay tal nube de encantamientos diferentes en torno al cuerpo de Morluck, que su energía inunda la sala entremezclándose y te resulta imposible detectar hechizos concretos.\n");
                        return true;   
                    }
                    
                    //end hardcoding for Morluck    
                        
					if ( target == null )
					{
						//detectar magia in room
						
						EntityList el = caster.getReachableEntities();
					
						boolean detected = false;
					
						for ( int i = 0 ; i < el.size() ; i++ )
						{
							Entity current = el.get(i);
							List effects = current.getRelatedEntitiesByValue("cast",true);
							if ( effects.size() > 0 )
							{
								if ( current instanceof Nameable )
								{
									detected = true;
									caster.escribir("Detectas magia en torno a " + ((Nameable)current).constructName2(1,caster) + ".\n");
								}
							}
						}
						
						if ( !detected )
						{
							caster.escribir("No detectas influencias mágicas por aquí, aparte del conjuro de fondo que da luz a la cueva.\n");
						}
						
						return true;
					
					}
					else
					{
                        
                        //hard-coding para el arco: nótese que esto es muy poco simulacionista, hecho por las prisas.
                        //el hechizo "de verdad" sería lo de abajo.
                        if ( equals(target,get("Arco")) )
                        {
                            if ( get(get("Arco"),"enchanted") )
                            {
                                caster.write("Parece que las piedras que tapian el arco... ¡son una ilusión! Son el producto de un conjuro de ilusión mágica, no tienen existencia real.\n");
                                set(get("Arco"),"identified",true);
                                set(get("Pasillo").getPath(true,Path.EAST),"closed",false);
                                return true;  
                            }
                        }
    
						
						//target not null: details about target
					
						List effects = target.getRelatedEntitiesByValue("cast",true);
						
						//System.out.println("Actually, the size of the effects-compendium of the arcon comes to be " + effects.size());
						//System.out.println("Effects: " + effects.size());
						//System.out.println("JArl.");
						
						if ( effects.size() > 0 )
						{
							caster.escribir("Parece que " + ((Nameable)target).constructName2(1,caster) + " está bajo la influencia de un efecto de " + ((Effect)effects.get(0)).getTitle() + ".\n" );	
						}
						else if ( target instanceof Nameable )
						{
							caster.escribir("No detectas influencias mágicas en " + ((Nameable)target).constructName2(1,caster) + ".\n");
						}
				
						return true;
					}
				}
				void fail ( Entity caster , Entity target )
				{
					caster.escribir("Tu hechizo falla y no consigues detectar nada.\n");
				}
				/* nonsense, duration is zero
				void fade ( Entity target )
				{
					//((Mobile)caster).getRoom().informActionAuto(targetW,null,null,"$1 brilla con un aura azulada.\n",false);
					//System.out.println("El brillo se apaga.\n");
					//target.addDamageBonus(-2);
				}
				*/]]></Code>
<RelationshipList/>
</AbstractEntity>
<AbstractEntity name="Zorgloj">
<PropertyList/>
<Code language="BeanShell"><![CDATA[boolean debug = false;

void onInit()

{

    set(self,"zorgl.tick",true);

    setTime(self,"zorgl.tick",1); 

    set(self,"zorgl.oj",1);
    
    //System.err.println("Zorgloj init");

}



void update ( PropertyEntry pe , World w )

{

    //System.out.println("Zorgloj update");

    if ( equals ( pe.getName() , "zorgl.tick") )

    {

        if ( debug )
        w.write("El zorgloj dice: " + get(self,"zorgl.oj") + " " + world.getMobile("Héroe").getRoom() + ":" 
         + world.getMobile("Héroe").getState() + " gob " + world.getMobile("Guardia goblin").getRoom() +
         ":" + world.getMobile("Guardia goblin").getState() + "\n");

        set( self , "zorgl.oj" , get( self , "zorgl.oj" ) + 1 );

        setTime ( self,"zorgl.tick",1 );

    }

       

    

}]]></Code>
<RelationshipList/>
</AbstractEntity>
<AbstractEntity name="invocar bestia menor(copy)" type="effect">
<PropertyList/>
<Code language="BeanShell"><![CDATA[boolean cast ( Entity caster , Entity target , int intensity )
				{
					//target doesn't do anything.
					
					world.getMobile("Bestia menor").setRoom( ((Mobile)caster).getRoom() );
					((Mobile)caster).getRoom().informActionAuto(world.getMobile("Bestia menor"),null,null,"¡De repente, una amenazadora bestia aparece de la nada!\n",true);	
					world.getMobile("Bestia menor").setRelationshipProperty(caster,"caster",true);
					return true;
					
				}
				void fade ( Entity target )
				{
					world.getMobile("Bestia menor").getRoom().informActionAuto( world.getMobile("Bestia menor"),null,null,"¡$1 desaparece súbitamente!\n",true );
					world.getMobile("Bestia menor").setRoom( world.getRoom("Limbo") );
				}
				void fail ( Entity caster , Entity target  )
				{
					caster.escribir("Tu hechizo de invocación falla.\n");
				}]]></Code>
<RelationshipList/>
</AbstractEntity>
<AbstractEntity name="iluminar" type="effect">
<PropertyList/>
<Code language="BeanShell"><![CDATA[boolean cast ( Entity caster , Entity target , int intensity )
				{
					//{target is Light Source}
						Item targetW = (Item) target;
						((Mobile)caster).getRoom().informActionAuto(targetW,null,null,"$1 se ilumina.\n",false);
						target.setProperty("light_enabled",true);
						return true;
				}
				void fail ( Entity caster , Entity target )
				{
						
					//{target is Weapon}
						
						Item targetW = (Item) target;
						((Mobile)caster).escribir("Unos tímidos destellos de luz salen de tus manos; pero tu hechizo falla.\n");
						return;
	
				}
				void fade ( Entity target )
				{
					Item targetW = (Item) target;
					List propiet = target.getMobileReferences();
					Mobile prop = (Mobile) propiet.get(0);
					prop.getRoom().informActionAuto(targetW,null,null,"El brillo de $1 se debilita hasta desvanecerse.\n",false);
					//System.out.println("El brillo se apaga.\n");
					target.setProperty("light_enabled",false);
				}]]></Code>
<RelationshipList/>
</AbstractEntity>
<AbstractEntity name="daño de hielo" type="effect">
<PropertyList/>
<Code language="BeanShell"><![CDATA[boolean cast ( Entity caster , Entity target , int intensity )
{


    if ( target instanceof Mobile )
    {
	   Mobile targetM = (Mobile) target;
	   ArrayList damList = new ArrayList();
	   damList.add ( new Integer(0) );
	   damList.add ( new Integer(1+intensity) );
	   int danoHecho = target.tryToDealDamage ( damList , false );
	   ((Mobile)caster).getRoom().informAction(caster,target,null,"Una bola de hielo sale de las manos de $1 y golpea a $2.\n","Una bola de hielo sale de las manos de $1 y te golpea.\n","Una bola de hielo sale de tus manos y golpea a $2.\n",true);
	   ((Mobile)caster).getRoom().informActionAuto ( target , null , null , "$1 " + target.estimateStatus() + ".\n" , true );
        if ( target.getHP() > 0 )
            target.setNewState ( Mobile.DAMAGE_RECOVER , target.generateRecoverFromUnblockedHitTime() );
       return true;
    }
    else if (target instanceof Item)
    {
        String targetName = target.constructName2True(1,caster);   
        ((Mobile)caster).getRoom().informAction(caster,target,null,"¡El hielo mágico que emana de las manos de $1 enfría "+ targetName+"!\n","El hielo mágico que sale de las manos de $1 te enfría.\n","¡El hielo mágico que sale de tus manos enfría "+targetName+"!\n",true);
        //((Mobile)caster).getRoom().informAction(caster,target,null,"¡El hielo mágico que emana de las manos de $1 enfría $2!\n","El hielo mágico que sale de las manos de $1 te enfría.\n","¡El hielo mágico que sale de tus manos enfría $2!\n",true);
        set(target,"verycold",1);
        setTime(target,"verycold",1);
        return true;
    }

}
				

void fail ( Entity caster , Entity target )
{
					
	((Mobile)caster).getRoom().informAction(caster,target,null,"La bola de hielo flaquea y se apaga.\n","La bola de hielo flaquea y se apaga.\n","La bola de hielo flaquea y se apaga.\n", true);
	return;
}]]></Code>
<RelationshipList/>
</AbstractEntity>
<AbstractEntity name="aturdir" type="effect">
<PropertyList/>
<Code language="BeanShell"><![CDATA[boolean cast ( Entity caster , Entity target , int intensity )
				{
    
                    //begin Morluck hardcoding
                    if ( equals(target,mobile("Morluck")))
                    {
                        ((Mobile)caster).getRoom().informAction(caster,target,null,"$2 no se inmuta ante el hechizo de $1...\n","No te inmutas ante el hechizo de $1.\n","Tu hechizo parece impactar a $2 con éxito; ¡pero el brujo ni siquiera pestañea!\n",true);
                        return true;
                    }
                    //end Morluck hardcoding
				
					//don't worry about the 10.000: state'll be re-changed by fade()
					target.setNewState(Mobile.SURPRISE_RECOVER,10000);
					((Mobile)caster).getRoom().informAction(caster,target,null,"$2 queda aturdido por el hechizo de $1...\n","Quedas aturdido por el hechizo de $1.\n","Tu hechizo aturde a $2.\n",true);
					return true;
				}
				void fail ( Entity caster , Entity target )
				{
					Double aleat = ((Mobile)caster).getRandom().nextDouble();
					if ( aleat < 0.7 )
						((Mobile)caster).escribir("Tu hechizo de aturdimiento falla, " + ((Mobile)target).constructName2OneItem(caster) + " no parece afectado.\n");
					else
					{
						((Mobile)caster).escribir("¡Tu hechizo de aturdimiento falla y se vuelve contra ti, dejándote confuso!\n");
						((Mobile)caster).setNewState(Mobile.SURPRISE_RECOVER,50);
					}
				}
				void fade ( Entity target )
				{
					if ( target.getState() == Mobile.SURPRISE_RECOVER ) //podría no tener ya este estado, tal vez porque algo (un golpe...) lo sacara de su aturdimiento.
						target.setNewState(Mobile.IDLE,1);
				}]]></Code>
<RelationshipList/>
</AbstractEntity>
<AbstractEntity name="daño de fuego(copy)" type="effect">
<PropertyList/>
<Code language="BeanShell"><![CDATA[boolean cast ( Entity caster , Entity target , int intensity )
				{
					//preCD: target is Mobile
					//System.out.println("JAAAAAAAARL");
					//System.out.println("Intensity of fireball: " + intensity);

					Mobile targetM = (Mobile) target;
					ArrayList damList = new ArrayList();
					damList.add ( new Integer(0) );
					damList.add ( new Integer(20+intensity) );
					int danoHecho = target.tryToDealDamage ( damList , false );
					((Mobile)caster).getRoom().informAction(caster,target,null,"La bola de fuego sale de las manos de $1 y golpea a $2.\n","La bola de fuego sale de las manos de $1 y te golpea.\n","La bola de fuego sale de tus manos y golpea a $2.\n",true);
					return true;
				}
				void fail ( Entity caster , Entity target )
				{
					
					((Mobile)caster).getRoom().informAction(caster,target,null,"La bola de fuego flaquea y se apaga.\n","La bola de fuego flaquea y se apaga.\n","La bola de fuego flaquea y se apaga.\n", true);
					return;
				}
				/* nonsense, duration is zero
				void fade ( Entity target )
				{
					//((Mobile)caster).getRoom().informActionAuto(targetW,null,null,"$1 brilla con un aura azulada.\n",false);
					//System.out.println("El brillo se apaga.\n");
					//target.addDamageBonus(-2);
				}
				*/]]></Code>
<RelationshipList/>
</AbstractEntity>
<AbstractEntity name="encantar arma" type="effect">
<PropertyList/>
<Code language="BeanShell"><![CDATA[boolean cast ( Entity caster , Entity target , int intensity )
				{
					//{target is Weapon}
						Weapon targetW = (Weapon) target;
						((Mobile)caster).getRoom().informActionAuto(targetW,null,null,"$1 brilla con un aura azulada.\n",false);
						target.addDamageBonus(40);
						return true;
				}
				void fail ( Entity caster , Entity target )
				{
						
					//{target is Weapon}
						
						Weapon targetW = (Weapon) target;
						((Mobile)caster).escribir("Unos tímidos destellos azules salen de tus manos; pero tu hechizo falla.\n");
						return;
	
				}
				void fade ( Entity target )
				{
					Weapon targetW = (Weapon) target;
					List propiet = target.getMobileReferences();
					Mobile prop = (Mobile) propiet.get(0);
					prop.getRoom().informActionAuto(targetW,null,null,"El brillo de $1 se debilita hasta desvanecerse.\n",false);
					//System.out.println("El brillo se apaga.\n");
					target.addDamageBonus(-40);
				}]]></Code>
<RelationshipList/>
</AbstractEntity>
<AbstractEntity name="Regeneración Magia">
<PropertyList>
<PropertyEntry name="regen" timeUnitsLeft="10" value="true"/>
</PropertyList>
<Code language="BeanShell"><![CDATA[void update ( PropertyEntry pe , World w )

{

 

    if ( equals(pe.getName() , "regen" ) )

    {

        int curMP = get("Héroe").getMP();

        int newMP = java.lang.Math.min(curMP+1,get("Héroe").getMaxMP());

        get("Héroe").setMP(newMP);

        setTime(self,"regen",10);

    }

    

    

}]]></Code>
<RelationshipList/>
</AbstractEntity>
<AbstractEntity name="invocar demonio" type="effect">
<PropertyList/>
<Code language="BeanShell"><![CDATA[boolean cast ( Entity caster , Entity target , int intensity )
				{
					//target doesn't do anything.
					
					//System.out.println("3-DEMON EFFECT");
					
					world.getMobile("Demonio alado").setRoom( ((Mobile)caster).getRoom() );
					((Mobile)caster).getRoom().informActionAuto(world.getMobile("Demonio alado"),null,null,"¡De repente, un horroroso demonio aparece de la nada!\n",true);	
					world.getMobile("Demonio alado").setRelationshipProperty(caster,"caster",true);
					
					//el demonio ataca automáticamente a todo lo que no sea el caster
					
					MobileList potencialesEnemigos = world.getMobile("Demonio alado").getRoom().getMobiles();
					for ( int i = 0 ; i < potencialesEnemigos.size() ; i++ )
					{
						Mobile thisOne = potencialesEnemigos.get(i);
						if ( thisOne != caster && thisOne != world.getMobile("Demonio alado") )
						{
							world.getMobile("Demonio alado").addEnemy ( thisOne );
							world.getMobile("Demonio alado").sayTo(thisOne,"¡Prepárate para morir!");
						}
					}
					
					world.getMobile("Demonio alado").setNewState ( Mobile.IDLE,1 );
					
					return true;
					
				}
				void fade ( Entity target )
				{
					world.getMobile("Demonio alado").getRoom().informActionAuto( world.getMobile("Demonio alado"),null,null,"¡$1 desaparece súbitamente!\n",true );
					world.getMobile("Demonio alado").setRoom( world.getRoom("Limbo") );
				}
				void fail ( Entity caster , Entity target  )
				{
					caster.escribir("Tu hechizo de invocación falla.\n");
				}]]></Code>
<RelationshipList/>
</AbstractEntity>
<AbstractEntity name="contrahechizo" type="effect">
<PropertyList/>
<Code language="BeanShell"><![CDATA[boolean cast ( Mobile caster , Entity target , int intensity )
			{
				//Entity is a Mobile.
				Mobile targetMob = (Mobile) target;
				int state = caster.getPropertyValueAsInteger("state");
				if ( state != Mobile.CASTING )
				{
					caster.escribir(targetMob.constructName2OneItem(caster) + " no está conjurando ningún hechizo.\n");
				}
				else
				{
					targetMob.setNewState ( Mobile.SURPRISE_RECOVER , 1 );
					//caster.escribir("Tu hechizo absorbe la energía del de " + targetMob.constructName2OneItem(caster) + ", contrarrestándolo.\n");
                    ((Mobile)caster).getRoom().informAction(caster,target,null,"El hechizo de $1 absorbe la energía del de $2, contrarrestándolo.\n","El hechizo de $1 absorbe la energía del tuyo, contrarrestándolo.\n","Tu hechizo absorbe la energía del de $2, contrarrestándolo.\n",true);
	   
				}
				return true;
			}
			void fail ( Mobile caster , Entity target )
			{
				Mobile targetMob = (Mobile) target;
				caster.escribir("Tu contrahechizo falla, no consigues interceptar el conjuro de " + targetMob.constructName2OneItem(caster) + ".\n");
			}]]></Code>
<RelationshipList/>
</AbstractEntity>
<AbstractEntity name="Notas">
<PropertyList/>
<Code language="BeanShell"><![CDATA[/*

food, etc. in game

monigote de entrenamiento



fireball: unaturd bichs -> done



bonus to hit leaving enemies

*/]]></Code>
<RelationshipList/>
</AbstractEntity>
<AbstractEntity name="daño de fuego" type="effect">
<PropertyList/>
<Code language="BeanShell"><![CDATA[boolean cast ( Entity caster , Entity target , int intensity )
{


    if ( target instanceof Mobile )
    {
	   Mobile targetM = (Mobile) target;
	   ArrayList damList = new ArrayList();
	   damList.add ( new Integer(0) );
	   damList.add ( new Integer(20+intensity) );
	   int danoHecho = target.tryToDealDamage ( damList , false );
	   ((Mobile)caster).getRoom().informAction(caster,target,null,"Una bola de fuego sale de las manos de $1 y golpea a $2.\n","Una bola de fuego sale de las manos de $1 y te golpea.\n","Una bola de fuego sale de tus manos y golpea a $2.\n",true);
	   ((Mobile)caster).getRoom().informActionAuto ( target , null , null , "$1 " + target.estimateStatus() + ".\n" , true );
        if ( target.getHP() > 0 )
             target.setNewState ( Mobile.DAMAGE_RECOVER , target.generateRecoverFromUnblockedHitTime() );
        return true;
    }
    else if ( target instanceof Item )
    {
        String targetName = target.constructName2True(1,caster);
        if ( target.getPropertyValueAsBoolean("flammable") )
        {   
            ((Mobile)caster).getRoom().informAction(caster,target,null,"¡El fuego mágico que emana de las manos de $1 reduce "+ targetName+" a cenizas!\n","El fuego mágico que sale de las manos de $1 te reduce a cenizas.\n","¡El fuego mágico que sale de tus manos reduce "+targetName+" a cenizas!\n",true);
            //((Mobile)caster).getRoom().informAction(caster,target,null,"¡El fuego mágico que emana de las manos de $1 reduce $2 a cenizas!\n","El fuego mágico que sale de las manos de $1 te reduce a cenizas.\n","¡El fuego mágico que sale de tus manos reduce $2 a cenizas!\n",true);
            target.moveTo(room("Limbo"));
        }
        else
        {
            ((Mobile)caster).getRoom().informAction(caster,target,null,"¡El fuego mágico que emana de las manos de $1 calienta "+ targetName+"!\n","El fuego mágico que sale de las manos de $1 te calienta.\n","¡El fuego mágico que sale de tus manos calienta "+targetName+"!\n",true);
            //((Mobile)caster).getRoom().informAction(caster,target,null,"¡El fuego mágico que emana de las manos de $1 calienta $2!\n","El fuego mágico que sale de las manos de $1 te calienta.\n","¡El fuego mágico que sale de tus manos calienta $2!\n",true);
            set(target,"veryhot",1);
            setTime(target,"veryhot",1);
        }
        return true;
    }

}
				

void fail ( Entity caster , Entity target )
{
					
	((Mobile)caster).getRoom().informAction(caster,target,null,"La bola de fuego flaquea y se apaga.\n","La bola de fuego flaquea y se apaga.\n","La bola de fuego flaquea y se apaga.\n", true);
	return;
}]]></Code>
<RelationshipList/>
</AbstractEntity>
</AbstractEntities>
</World>
