// Decompiled by DJ v2.9.9.60 Copyright 2000 Atanas Neshkov  Date: 21/10/02 16:11:11
// Home Page : http://members.fortunecity.com/neshkov/dj.html  - Check often for new version!
// Decompiler options: packimports(3) 

package bsh;

import java.io.Serializable;
import java.lang.reflect.Field;
import java.util.Hashtable;

// Referenced classes of package bsh:
//            EvalError, ReflectError, InterpreterError, Primitive, 
//            TargetError, ParserConstants, NameSpace, Reflect, 
//            Interpreter

class LHS
    implements ParserConstants, Serializable
{

    LHS(NameSpace namespace, String s)
    {
        type = 0;
        varName = s;
        nameSpace = namespace;
    }

    LHS(Field field1)
    {
        type = 1;
        object = null;
        field = field1;
    }

    LHS(Object obj, Field field1)
    {
        if(obj == null)
        {
            throw new NullPointerException("constructed empty LHS");
        } else
        {
            type = 1;
            object = obj;
            field = field1;
            return;
        }
    }

    LHS(Object obj, String s)
    {
        if(obj == null)
        {
            throw new NullPointerException("constructed empty LHS");
        } else
        {
            type = 2;
            object = obj;
            propName = s;
            return;
        }
    }

    LHS(Object obj, int i)
    {
        if(obj == null)
        {
            throw new NullPointerException("constructed empty LHS");
        } else
        {
            type = 3;
            object = obj;
            index = i;
            return;
        }
    }

    public Object getValue()
        throws EvalError
    {
        if(type == 0)
            return nameSpace.getVariable(varName);
        if(type == 1)
            try
            {
                return field.get(object);
            }
            catch(IllegalAccessException illegalaccessexception)
            {
                throw new EvalError("Can't read field: " + field);
            }
        if(type == 2)
        {
            try
            {
                return Reflect.getObjectProperty(object, propName);
            }
            catch(ReflectError reflecterror)
            {
                Interpreter.debug(reflecterror.getMessage());
            }
            throw new EvalError("No such property: " + propName);
        }
        if(type == 3)
            try
            {
                return Reflect.getIndex(object, index);
            }
            catch(Exception exception)
            {
                throw new EvalError("Array access: " + exception);
            }
        else
            throw new InterpreterError("LHS type");
    }

    public Object assign(Object obj)
        throws EvalError
    {
        if(type == 0)
        {
            nameSpace.setVariable(varName, obj);
        } else
        {
            if(type == 1)
                try
                {
                    if(obj instanceof Primitive)
                        obj = ((Primitive)obj).getValue();
                    field.set(object, obj);
                    return obj;
                }
                catch(NullPointerException nullpointerexception)
                {
                    throw new EvalError("LHS (" + field.getName() + ") not a static field.");
                }
                catch(IllegalAccessException illegalaccessexception)
                {
                    throw new EvalError("LHS (" + field.getName() + ") can't access field.");
                }
                catch(IllegalArgumentException illegalargumentexception)
                {
                    throw new EvalError("Argument type mismatch. " + (obj != null ? obj.getClass().getName() : "null") + " not assignable to field " + field.getName());
                }
            if(type == 2)
            {
                if(object instanceof Hashtable)
                    ((Hashtable)object).put(propName, obj);
                else
                    try
                    {
                        Reflect.setObjectProperty(object, propName, obj);
                    }
                    catch(ReflectError reflecterror)
                    {
                        Interpreter.debug("Assignment: " + reflecterror.getMessage());
                        throw new EvalError("No such property: " + propName);
                    }
            } else
            if(type == 3)
                try
                {
                    Reflect.setIndex(object, index, obj);
                }
                catch(TargetError targeterror)
                {
                    throw targeterror;
                }
                catch(Exception exception)
                {
                    throw new EvalError("Assignment: " + exception.getMessage());
                }
        }
        return obj;
    }

    public String toString()
    {
        return "LHS";
    }

    NameSpace nameSpace;
    static final int VARIABLE = 0;
    static final int FIELD = 1;
    static final int PROPERTY = 2;
    static final int INDEX = 3;
    int type;
    String varName;
    String propName;
    Field field;
    Object object;
    int index;
}