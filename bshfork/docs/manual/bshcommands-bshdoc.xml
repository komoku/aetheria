<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="bshcommands.xsl"?>
<!-- This file was auto-generated by the bshdoc.bsh script -->
<BshDoc>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\addClassPath</Name>
    <Method>
      <Name>addClassPath</Name>
      <Sig>addClassPath ( path ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Add the specified directory or JAR file to the class path.
	e.g.
	<p>
	<pre>
    addClassPath( "/home/pat/java/classes" );
    addClassPath( "/home/pat/java/mystuff.jar" );
    addClassPath( new URL("http://myserver/~pat/somebeans.jar") );
	</pre>
	<p>
	See <a href="classpath.html">Class Path Management</a>
]]></Text>
      <Tags>
      <method>void addClassPath( string | URL )
</method>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\bg</Name>
    <Method>
      <Name>bg</Name>
      <Sig>Thread bg ( String filename ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Source a command in its own thread in the caller's namespace
	<p>

	This is like run() except that it runs the command in its own thread.  
	Returns the Thread object control.
]]></Text>
      <Tags>
      <method>Thread bg( String filename )
</method>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\bind</Name>
    <Method>
      <Name>bind</Name>
      <Sig>bind ( bsh .This ths , bsh .NameSpace namespace ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Bind a bsh object into a particular namespace and interpreter

]]></Text>
      <Tags>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\browseClass</Name>
    <Method>
      <Name>browseClass</Name>
      <Sig>browseClass ( Object o ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Open the class browser to view the specified class.  
	If the argument is a string it is considered to be a class name.  
	If the argument is an object, the class of the object is used.  
	If the arg is a class, the class is used.
	<p>

	Note: To browse the String class you can't supply a String.
	You'd have to do:  browseClass( String.class );
	<p>
]]></Text>
      <Tags>
      <method>void browseClass( String | Object | Class )
</method>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\cat</Name>
    <Method>
      <Name>cat</Name>
      <Sig>cat ( String filename ) </Sig>
      <Comment>
      <Text><![CDATA[
	cat comment

]]></Text>
      <Tags>
      </Tags>
      </Comment>
    </Method>
    <Method>
      <Name>cat</Name>
      <Sig>cat ( URL url ) </Sig>
      <Comment>
      <Text><![CDATA[
	cat comment

]]></Text>
      <Tags>
      </Tags>
      </Comment>
    </Method>
    <Method>
      <Name>cat</Name>
      <Sig>cat ( InputStream ins ) </Sig>
    </Method>
    <Method>
      <Name>cat</Name>
      <Sig>cat ( Reader reader ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Print the contents of filename, url, or stream (like Unix cat)

]]></Text>
      <Tags>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\cd</Name>
    <Method>
      <Name>cd</Name>
      <Sig>void cd ( String pathname ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Change working directory for dir(), etc. commands (like Unix cd)

]]></Text>
      <Tags>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\classBrowser</Name>
    <Method>
      <Name>classBrowser</Name>
      <Sig>classBrowser ( ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Open the class browser.

]]></Text>
      <Tags>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\clear</Name>
    <Method>
      <Name>clear</Name>
      <Sig>clear ( ) </Sig>
      <Comment>
      <Text><![CDATA[
	Clear all variables, methods, and imports from this namespace.
	If this namespace is the root, it will be reset to the default 
	imports.
	See NameSpace.clear();
]]></Text>
      <Tags>
      <see>NameSpace.clear();
</see>
      </Tags>
      </Comment>
    </Method>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\cp</Name>
    <Method>
      <Name>cp</Name>
      <Sig>cp ( String fromFile , String toFile ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Copy a file (like Unix cp).

]]></Text>
      <Tags>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\debug</Name>
    <Method>
      <Name>debug</Name>
      <Sig>debug ( ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Toggle on and off debug mode. 
	Debug output is verbose and generally useful only for developers.

]]></Text>
      <Tags>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\desktop</Name>
    <Method>
      <Name>desktop</Name>
      <Sig>desktop ( ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
 * Start the BeanShell GUI desktop in a JFrame.  A starter workspace is created
 * and added to the desktop.
 *
 * @method void desktop()
 *
 * @author Pat Niemeyer
 * @author Daniel Leuck
 
]]></Text>
      <Tags>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\dirname</Name>
    <Method>
      <Name>dirname</Name>
      <Sig>String dirname ( String pathname ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Return directory portion of path based on the system default file separator.
	Note: you should probably use pathToFile() to localize the path relative
	to BeanShell's working directory and then file.getAbsolutePath() to get
	back to a system localized string.
	<p>
	
	Example: to change to the directory that contains the script we're 
	currently executing:

	<pre>
	// Change to the directory containing this script
	path=pathToFile( getSourceFileInfo() ).getAbsolutePath();
	cd( dirname( path ) );
	</pre>

]]></Text>
      <Tags>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\editor</Name>
    <Method>
      <Name>editor</Name>
      <Sig>editor ( ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Open a GUI editor from the command line or in the GUI desktop mode.
	When run from the command line the editor is a simple standalone
	frame.  When run inside the GUI desktop it is a workspace editor.
	See workspaceEditor()

]]></Text>
      <Tags>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\error</Name>
    <Method>
      <Name>error</Name>
      <Sig>void error ( item ) </Sig>
      <Comment>
      <Text><![CDATA[
	Print the item as an error.  
	In the GUI console the text will show up in (something like) red, 
	else it will be printed to standard error.

]]></Text>
      <Tags>
      </Tags>
      </Comment>
    </Method>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\eval</Name>
    <Method>
      <Name>eval</Name>
      <Sig>Object eval ( String expression ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Evaluate the string in the current interpreter (see source()).
	Returns the result of the evaluation or null.
	<p>

	Evaluate a string as if it were written directly in the current scope, 
	with side effects in the current scope.
	<p>
	e.g.
    <code><pre>
    a=5;
    eval("b=a*2");
    print(b); // 10
    </pre></code>
	<p>

	eval() acts just like invoked text except that any exceptions generated
	by the code are captured in a bsh.EvalError.  This includes ParseException
	for syntactic errors and TargetError for exceptions thrown by the evaluated
	code.
	<p>
	e.g.
    <pre>
    try {
        eval("foo>>><>M>JK$LJLK$");
    } catch ( EvalError e ) {
        // ParseException caught here
    }

    try {
        eval("(Integer)true");  // illegal cast
    } catch ( EvalError e ) {
        // TargetException caught here
        print( e.getTarget() )  // prints ClassCastException
    }
    </pre>
	<p>
	
	If you want eval() to throw target exceptions directly, without wrapping
	them, you can simply redefine own eval like so:

    <pre>
    myEval( String expression ) {
        try {
            return eval( expression );
        } catch ( TargetError e ) {
            throw e.getTarget();
        }
    }
    </pre>
	<p/>

	Here is a cute example of how to use eval to implement a dynamic cast.  
	i.e. to cast a script to an arbitrary type by name at run-time where the
	type is not known when you are writing the script.  In this case the type
	is in the variable interfaceType.
	<pre>
    reference = eval( "("+interfaceType+")this" );
	</pre>

	<p>
	Returns the value of the expression.
	<p>
	Throws bsh.EvalError on error
	<p>
]]></Text>
      <Tags>
      <return>the value of the expression.</return>
      <throws>bsh.EvalError on error
</throws>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\exec</Name>
    <Method>
      <Name>exec</Name>
      <Sig>exec ( String arg ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Start an external application using the Java Runtime exec() method.
	Display any output to the standard BeanShell output using print().

]]></Text>
      <Tags>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\exit</Name>
    <Method>
      <Name>exit</Name>
      <Sig>exit ( ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Conditionally exit the virtual machine.
	Call System.exit(0) unless bsh.system.shutdownOnExit == false.

]]></Text>
      <Tags>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\extend</Name>
    <Method>
      <Name>extend</Name>
      <Sig>extend ( bsh .This parent ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Return a new object that is a child of the specified object.
	<strong>
	Note: this command will likely change along with a better inheritance 
	mechanism for bsh in a future release.</strong>
	<p>

	extend() is like the object() command, which
	creates a new bsh scripted object, except that the namespace of
	the new object is a child of the parent object. 
	<p>

	For example:
	<p>

    <pre>
    foo=object();
    bar=extend(foo);

    is equivalent to:
      
    foo() { 
        bar() {
            return this; 
        }
    }

    foo=foo();
    bar=foo.bar();

    and also:
     
    oo=object();
    ar=object();
    ar.namespace.bind( foo.namespace );
    </pre>
	<p>

	The last example above is exactly what the extend() command does.
	In each case the bar object inherits variables from foo in the usual way.
]]></Text>
      <Tags>
      <method>This extend( This object )
</method>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\fontMenu</Name>
    <Method>
      <Name>fontMenu</Name>
      <Sig>fontMenu ( component ) </Sig>
      <Comment>
      <Text><![CDATA[
 * Creates a font menu for use with the workspace and workspace editors
 *
 * @return a font menu
 *
 * @author Daniel Leuck
 
]]></Text>
      <Tags>
      </Tags>
      </Comment>
    </Method>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\frame</Name>
    <Method>
      <Name>frame</Name>
      <Sig>frame ( Component comp ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
    Show component in a frame, centered and packed, handling disposal with
	the close button.
	<p>

	Display the component, centered and packed, in a Frame, JFrame, or 
	JInternalFrame.  Returns the frame.  If the GUI desktop is running then a 
	JInternaFrame will be used and automatically added to the desktop.  
	Otherwise if Swing is available a top level JFrame will be created.  
	Otherwise a plain AWT Frame will be created.
]]></Text>
      <Tags>
      <method>Frame | JFrame | JInternalFrame frame( Component component )

</method>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\getBshPrompt</Name>
    <Method>
      <Name>getBshPrompt</Name>
      <Sig>String getBshPrompt ( ) </Sig>
      <Comment>
      <Text><![CDATA[
	Get the value to display for the bsh interactive prompt.
	This command checks for the variable bsh.prompt and uses it if set.
	else returns "bsh % "
	<p/>
	Remember that you can override bsh commands simply by defining the method
	in your namespace. e.g. the following method displays the current working
	directory in your prompt:
	<p/>
	<pre>
	String getBshPrompt() {
		return bsh.cwd + " % ";
	}
	</pre>

]]></Text>
      <Tags>
      </Tags>
      </Comment>
    </Method>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\getClass</Name>
    <Method>
      <Name>getClass</Name>
      <Sig>Class getClass ( String name ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Get a class through the current namespace utilizing the current imports,
	extended classloader, etc.
	<p>

	This is equivalent to the standard Class.forName() method for class loading,
	however it takes advantage of the BeanShell class manager so that added 
	classpath will be taken into account.  You can also use Class.forName(), 
	however if you have modified the classpath or reloaded classes from within 
	your script the modifications will only appear if you use the getClass() 
	command.

]]></Text>
      <Tags>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\getClassPath</Name>
    <Method>
      <Name>getClassPath</Name>
      <Sig>URL [ ] getClassPath ( ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
    Get the current classpath including all user path, extended path, and the
    bootstrap JAR file if possible.

]]></Text>
      <Tags>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\getResource</Name>
    <Method>
      <Name>getResource</Name>
      <Sig>URL getResource ( String path ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Get a resource from the BeanShell classpath.
	This method takes into account modification to the BeanShell class path via
	addClassPath() and setClassPath();

]]></Text>
      <Tags>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\getSourceFileInfo</Name>
    <Method>
      <Name>getSourceFileInfo</Name>
      <Sig>getSourceFileInfo ( ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Return the name of the file or source from which the current interpreter
	is reading.  Note that if you use this within a method, the result will
	not be the file from which the method was sourced, but will be the file 
	that the caller of the method is reading.   Methods are sourced once but
	can be called many times... Each time the interpreter may be associated
	with a different file and it is that calling interpreter that you are
	asking for information.
	<p>

	Note: although it may seems like this command would always return the
	getSourceFileInfo.bsh file, it does not since it is being executed after
	sourcing by the caller's interpreter.
	If one wanted to know the file from which a bsh method was sourced one
	would have to either capture that info when the file was sourced (by
	saving the state of the getSourceFileInfo() in a variable outside of
	the method or more generally we could add the info to the BshMethod class
	so that bsh methods remember from what source they were created...

]]></Text>
      <Tags>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\importCommands</Name>
    <Method>
      <Name>importCommands</Name>
      <Sig>importCommands ( path ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Import scripted or compiled BeanShell commands in the following package
	in the classpath.  You may use either "/" path or "." package notation.
	e.g. 
	<pre>
		// equivalent
		importCommands("/bsh/commands")
		importCommands("bsh.commands")
	<pre>

	When searching for a command each path will be checked for first, a file
	named 'command'.bsh and second a class file named 'command'.class.
	<p/>

	You may add to the BeanShell classpath using the addClassPath() or
	setClassPath() commands and then import them as usual.
	<pre>
		addClassPath("mycommands.jar");
		importCommands("/mypackage/commands");
	</pre>
	<p/>

	If a relative path style specifier is used then it is made into an absolute
	path by prepending "/".  Later imports take precedence over earlier ones.
	<p/>

	Imported commands are scoped just like imported clases.
	<p/>
]]></Text>
      <Tags>
      <method>void importCommands( resource path | package name )
</method>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\importObject</Name>
    <Method>
      <Name>importObject</Name>
      <Sig>importObject ( Object object ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
    Import an instance object into this namespace
    (analogous to static class imports).
    You can import the methods and fields of a Java object instance into
    a BeanShell namespace.  e.g.

    <pre>
        Map map = new HashMap();
        importObject( map );
        put("foo", "bar");
        print( get("foo") ); // "bar"
    </pre>
]]></Text>
      <Tags>
      <method>void importObject( Object object )
</method>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\javap</Name>
    <Method>
      <Name>javap</Name>
      <Sig>javap ( Object o ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Print the public fields and methods of the specified class (output similar 
	to the JDK javap command).
	<p/>
	If the argument is a string it is considered to be a class name.  If the
	argument is an object, the class of the object is used.  If the arg is a
	class, the class is used.  If the argument is a class identifier, the class
	identified by the class identifier will be used. e.g.  If the argument is
	the empty string an error will be printed.
	<p/>
	<pre>
	// equivalent
	javap( java.util.Date ); // class identifier
	javap( java.util.Date.class ); // class
	javap( "java.util.Date" ); // String name of class
	javap( new java.util.Date() ); // instance of class
	</pre>
]]></Text>
      <Tags>
      <method>void javap( String | Object | Class | ClassIdentifier )
</method>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\load</Name>
    <Method>
      <Name>load</Name>
      <Sig>Object load ( String filename ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Load a serialized Java object from filename.  Returns the object.

]]></Text>
      <Tags>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\makeWorkspace</Name>
    <Method>
      <Name>makeWorkspace</Name>
      <Sig>makeWorkspace ( String name ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
 * Creates a JConsole in a JInternalFrame and adds it to the desktop 
 *
 * @return this (the workspace scripted object for allowing access to the 
 *          frame, interpreter, etc.)
 *
 * @author Pat Niemeyer
 * @author Daniel Leuck (bug fixes)
 
]]></Text>
      <Tags>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\mv</Name>
    <Method>
      <Name>mv</Name>
      <Sig>mv ( String fromFile , String toFile ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Rename a file (like Unix mv).

]]></Text>
      <Tags>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\object</Name>
    <Method>
      <Name>object</Name>
      <Sig>object ( ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Return an "empty" BeanShell object context which can be used to hold 
	data items.  e.g. 
	<p>
	<pre>
    myStuff = object();
    myStuff.foo = 42;
    myStuff.bar = "blah";
	</pre>
]]></Text>
      <Tags>
      <method>This object()
</method>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\pathToFile</Name>
    <Method>
      <Name>pathToFile</Name>
      <Sig>File pathToFile ( String filename ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Create a File object corresponding to the specified file path name, taking
	into account the bsh current working directory (bsh.cwd)

]]></Text>
      <Tags>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\print</Name>
    <Method>
      <Name>print</Name>
      <Sig>void print ( arg ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Print the string value of the argument, which may be of any type.
	If beanshell is running interactively, the output will always go to the 
	command line, otherwise it will go to System.out.
	<p>

	Most often the printed value of an object will simply be the Java 
	toString() of the object.  However if the argument is an array the contents 
	of the array will be (recursively) listed in a verbose way.
	<p>

	Note that you are always free to use System.out.println() 
	instead of print().

]]></Text>
      <Tags>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\printBanner</Name>
    <Method>
      <Name>printBanner</Name>
      <Sig>printBanner ( ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Print the BeanShell banner (version and author line) - GUI or non GUI.
]]></Text>
      <Tags>
      <author>Daniel Leuck
</author>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\pwd</Name>
    <Method>
      <Name>pwd</Name>
      <Sig>pwd ( ) </Sig>
      <Comment>
      <Text><![CDATA[
	Print the BeanShell working directory.  This is the cwd obeyed by all the 
	unix-like bsh commands.

]]></Text>
      <Tags>
      </Tags>
      </Comment>
    </Method>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\reloadClasses</Name>
    <Method>
      <Name>reloadClasses</Name>
      <Sig>void reloadClasses ( item ) </Sig>
    </Method>
    <Method>
      <Name>reloadClasses</Name>
      <Sig>void reloadClasses ( ) </Sig>
      <Comment>
      <Text><![CDATA[
	Reload all classes

]]></Text>
      <Tags>
      </Tags>
      </Comment>
    </Method>
      <Comment>
      <Text><![CDATA[
	Reload the specified class, package name, or all classes if no name is 
	given.  e.g.
	<p>

	<pre>
    reloadClasses();
    reloadClasses("mypackage.*");
    reloadClasses(".*")  // reload unpackaged classes
    reloadClasses("mypackage.MyClass") 
	</pre>
	<p>

	See "Class Path Management"
]]></Text>
      <Tags>
      <method>void reloadClasses( [ package name ] )
</method>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\rm</Name>
    <Method>
      <Name>rm</Name>
      <Sig>boolean rm ( String pathname ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Remove a file (like Unix rm).

]]></Text>
      <Tags>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\run</Name>
    <Method>
      <Name>run</Name>
      <Sig>run ( String filename , Object runArgument ) </Sig>
    </Method>
    <Method>
      <Name>run</Name>
      <Sig>run ( String filename ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Run a command in its own in its own private global namespace, with its
	own class manager and interpeter context.  (kind of like unix "chroot" for 
	a namespace).
	The root bsh system object is extended (with the extend() command) and 
	made visible here, so that general system info (e.g. current working
	directory) is effectively inherited.  Because the root bsh object is 
	extended it is effectively read only / copy on write...  
	e.g. you can change directories in the child context, do imports, change
	the classpath, etc. and it will not affect the calling context.
	<p>

	run() is like source() except that it runs the command in a new, 
	subordinate and prune()'d namespace.  So it's like "running" a command 
	instead of "sourcing" it.  run() teturns the object context in which the 
	command was run.
	<p>

	Returns the object context so that you can gather results.
	<p>
	Parameter runArgument an argument passed to the child context under the
		name runArgument.  e.g. you might pass in the calling This context
		from which to draw variables, etc.
	<p>
]]></Text>
      <Tags>
      <return>Returns the object context so that you can gather results.</return>
      <param>runArgument an argument passed to the child context under the
		name runArgument.  e.g. you might pass in the calling This context
		from which to draw variables, etc.
</param>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\save</Name>
    <Method>
      <Name>save</Name>
      <Sig>void save ( Object obj , String filename ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Save a serializable Java object to filename. 

]]></Text>
      <Tags>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\server</Name>
    <Method>
      <Name>server</Name>
      <Sig>void server ( int port ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Create a remote BeanShell listener service attached to 
	the current interpreter, listening on the specified port.

]]></Text>
      <Tags>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\setAccessibility</Name>
    <Method>
      <Name>setAccessibility</Name>
      <Sig>setAccessibility ( boolean b ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Setting accessibility on enables to private and other non-public
	fields and method.

]]></Text>
      <Tags>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\setClassPath</Name>
    <Method>
      <Name>setClassPath</Name>
      <Sig>void setClassPath ( urls ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Change the classpath to the specified array of directories and/or archives.
	<p>
	See "Class Path Management" for details.
]]></Text>
      <Tags>
      <method>void setClassPath( URL [] )
</method>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\setFont</Name>
    <Method>
      <Name>setFont</Name>
      <Sig>Font setFont ( Component comp , String family , int style , int size ) </Sig>
    </Method>
    <Method>
      <Name>setFont</Name>
      <Sig>Font setFont ( Component comp , int size ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Change the point size of the font on the specified component, to ptsize.
	This is just a convenience for playing with GUI components.

]]></Text>
      <Tags>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\setNameCompletion</Name>
    <Method>
      <Name>setNameCompletion</Name>
      <Sig>void setNameCompletion ( boolean bool ) </Sig>
      <Comment>
      <Text><![CDATA[

]]></Text>
      <Tags>
      </Tags>
      </Comment>
    </Method>
      <Comment>
      <Text><![CDATA[
	Allow users to turn off name completion.
	<p>
	Turn name completion in the GUI console on or off.
	Name competion is on by default.  Explicitly setting it to true however can
	be used to prompt bsh to read the classpath and provide immediate feedback.
	(Otherwise this may happen behind the scenes the first time name completion
	is attempted).  Setting it to false will disable name completion.

]]></Text>
      <Tags>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\setNameSpace</Name>
    <Method>
      <Name>setNameSpace</Name>
      <Sig>setNameSpace ( ns ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Set the namespace (context) of the current scope.
	<p/>

	The following example illustrates swapping the current namespace.
	<p/>

	<pre>
    fooState = object(); 
    barState = object(); 
    
    print(this.namespace);
    setNameSpace(fooState.namespace);
    print(this.namespace);
    a=5;
    setNameSpace(barState.namespace);
    print(this.namespace);
    a=6;
    
    setNameSpace(fooState.namespace);
    print(this.namespace);
    print(a);  // 5
    
    setNameSpace(barState.namespace);
    print(this.namespace);
    print(a); // 6
    </pre>
	<p/>

	You could use this to creates the effect of a static namespace for a
	method by explicitly setting the namespace upon entry.
	<p/>

]]></Text>
      <Tags>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\setStrictJava</Name>
    <Method>
      <Name>setStrictJava</Name>
      <Sig>void setStrictJava ( boolean val ) </Sig>
      <Comment>
      <Text><![CDATA[
	Enable or disable "Strict Java Mode".
	When strict Java mode is enabled BeanShell will:
	<p>

	<ol>
	<li>Require typed variable declarations, method arguments and return types.
	<li>Modify the scoping of variables to look for the variable
	declaration first in the parent namespace, as in a java method inside 
	a java class.  e.g. if you can write a method called incrementFoo() that 
	will do the expected thing without referring to "super.foo".
	</ul>
	<p/>

	See "Strict Java Mode" for more details.
	<p/>

	<em>Note: Currently most standard BeanShell commands will not work in 
	Strict Java mode simply because they have not been written with full
	types, etc.

]]></Text>
      <Tags>
      </Tags>
      </Comment>
    </Method>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\show</Name>
    <Method>
      <Name>show</Name>
      <Sig>show ( ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Toggle on or off displaying the results of expressions (off by default).
	When show mode is on bsh will print() the value returned by each expression 
	you type on the command line.

]]></Text>
      <Tags>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\source</Name>
    <Method>
      <Name>source</Name>
      <Sig>Object source ( String filename ) </Sig>
    </Method>
    <Method>
      <Name>source</Name>
      <Sig>Object source ( URL url ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Read filename into the interpreter and evaluate it in the current
	namespace.  Like the Bourne Shell "." command.
	This command acts exactly like the eval() command but reads from a file 
	or URL source.
]]></Text>
      <Tags>
      <see>eval() for more information.</see>
      <throws>bsh.EvalError or bsh.TargetError on errors in the sourced script.
</throws>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\sourceRelative</Name>
    <Method>
      <Name>sourceRelative</Name>
      <Sig>sourceRelative ( String file ) </Sig>
      <Comment>
      <Text><![CDATA[
    Source a file relative to the callering script's directory.
	<p/>

    e.g. scripts A running in dir A sources script B in dir B.
	Script B can use this command to load additional scripts (data, etc.)
	relative to its own location (dir B) without having to explicitly know 
	its "home" directory (B).
	<p/>
	Note: this only works for files currently.
]]></Text>
      <Tags>
      <since>bsh1.3</since>
      <see>source( file | URL );
</see>
      </Tags>
      </Comment>
    </Method>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\thinBorder</Name>
    <Method>
      <Name>thinBorder</Name>
      <Sig>public thinBorder ( ) </Sig>
    </Method>
    <Method>
      <Name>thinBorder</Name>
      <Sig>public thinBorder ( Color lightColor , Color darkColor ) </Sig>
    </Method>
    <Method>
      <Name>thinBorder</Name>
      <Sig>public thinBorder ( Color lightColor , Color darkColor , boolean rollOver ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[ 
 * A one pixel wide bevel border.  This border works for buttons (with optional
 * rollover) and other components
 *
 * @author Daniel Leuck
 
]]></Text>
      <Tags>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\unset</Name>
    <Method>
      <Name>unset</Name>
      <Sig>void unset ( String name ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	"Undefine" the variable specifed by 'name' (So that it tests == void).
	<p>
	<em>Note: there will be a better way to do this in the future.  This is 
	currently equivalent to doing namespace.setVariable(name, null);</em>

]]></Text>
      <Tags>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\which</Name>
    <Method>
      <Name>which</Name>
      <Sig>which ( clas ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
	Use classpath mapping to determine the source of the specified class
	file.  (Like the Unix which command for executables).
	<p/>

    This command maps the entire classpath and prints all of the occurrences
    of the class.  If you just want to find the first occurrence in the
    classpath (the one that will be used by Java) you can also get it by
    printing the URL of the resource. e.g.:
	<p/>

    <pre>
        print( getResource("/com/foo/MyClass.class") );
		// Same as...
        // System.out.println(
        //    getClass().getResourceAsStream("/com/foo/MyClass.class" ) );
    </pre>
	<p/>

	Note: This is all a lie! This command is broken and only reports the
	currently first occurence! To be fixed!
	<p/>
]]></Text>
      <Tags>
      <method>which( classIdentifier | string | class )
</method>
      </Tags>
      </Comment>
  </File>
  <File>
    <Name>C:\Temp\BeanShell-2.0b4\src\bsh\commands\workspaceEditor</Name>
    <Method>
      <Name>workspaceEditor</Name>
      <Sig>workspaceEditor ( Interpreter parent , String name ) </Sig>
    </Method>
      <Comment>
      <Text><![CDATA[
 * Make a new workspaceEditor associated with a workspace and place it on the
 * desktop.
 *
 * @method workspaceEditor( bsh.Interpreter parent, String name )
 *
 * @author Pat Niemeyer
 * @author Daniel Leuck
 
]]></Text>
      <Tags>
      </Tags>
      </Comment>
  </File>
</BshDoc>
